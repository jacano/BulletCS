//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btRigidBody : btCollisionObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btRigidBody(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btRigidBody_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btRigidBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btRigidBody() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btRigidBody(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class btRigidBodyConstructionInfo : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal btRigidBodyConstructionInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btRigidBodyConstructionInfo obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~btRigidBodyConstructionInfo() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btRigidBody_btRigidBodyConstructionInfo(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public float m_mass {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_mass_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_mass_get(swigCPtr);
        return ret;
      } 
    }
  
    public btMotionState m_motionState {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_motionState_set(swigCPtr, btMotionState.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_motionState_get(swigCPtr);
        btMotionState ret = (cPtr == global::System.IntPtr.Zero) ? null : new btMotionState(cPtr, false);
        return ret;
      } 
    }
  
    public btTransform m_startWorldTransform {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_startWorldTransform_set(swigCPtr, btTransform.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_startWorldTransform_get(swigCPtr);
        btTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new btTransform(cPtr, false);
        return ret;
      } 
    }
  
    public btCollisionShape m_collisionShape {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_collisionShape_set(swigCPtr, btCollisionShape.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_collisionShape_get(swigCPtr);
        btCollisionShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionShape(cPtr, false);
        return ret;
      } 
    }
  
    public btVector3 m_localInertia {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_localInertia_set(swigCPtr, btVector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_localInertia_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        return ret;
      } 
    }
  
    public float m_linearDamping {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_linearDamping_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_linearDamping_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_angularDamping {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_angularDamping_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_angularDamping_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_friction {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_friction_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_friction_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_rollingFriction {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_rollingFriction_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_rollingFriction_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_restitution {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_restitution_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_restitution_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_linearSleepingThreshold {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_linearSleepingThreshold_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_linearSleepingThreshold_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_angularSleepingThreshold {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_angularSleepingThreshold_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_angularSleepingThreshold_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool m_additionalDamping {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalDamping_set(swigCPtr, value);
      } 
      get {
        bool ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalDamping_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_additionalDampingFactor {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalDampingFactor_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalDampingFactor_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_additionalLinearDampingThresholdSqr {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_additionalAngularDampingThresholdSqr {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_additionalAngularDampingFactor {
      set {
        BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public void proceedToTransform(btTransform newTrans) {
    BulletPINVOKE.btRigidBody_proceedToTransform(swigCPtr, btTransform.getCPtr(newTrans));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void predictIntegratedTransform(float step, btTransform predictedTransform) {
    BulletPINVOKE.btRigidBody_predictIntegratedTransform(swigCPtr, step, btTransform.getCPtr(predictedTransform));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void saveKinematicState(float step) {
    BulletPINVOKE.btRigidBody_saveKinematicState(swigCPtr, step);
  }

  public void applyGravity() {
    BulletPINVOKE.btRigidBody_applyGravity(swigCPtr);
  }

  public void setGravity(btVector3 acceleration) {
    BulletPINVOKE.btRigidBody_setGravity(swigCPtr, btVector3.getCPtr(acceleration));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 getGravity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getGravity(swigCPtr), false);
    return ret;
  }

  public void setDamping(float lin_damping, float ang_damping) {
    BulletPINVOKE.btRigidBody_setDamping(swigCPtr, lin_damping, ang_damping);
  }

  public float getLinearDamping() {
    float ret = BulletPINVOKE.btRigidBody_getLinearDamping(swigCPtr);
    return ret;
  }

  public float getAngularDamping() {
    float ret = BulletPINVOKE.btRigidBody_getAngularDamping(swigCPtr);
    return ret;
  }

  public float getLinearSleepingThreshold() {
    float ret = BulletPINVOKE.btRigidBody_getLinearSleepingThreshold(swigCPtr);
    return ret;
  }

  public float getAngularSleepingThreshold() {
    float ret = BulletPINVOKE.btRigidBody_getAngularSleepingThreshold(swigCPtr);
    return ret;
  }

  public void applyDamping(float timeStep) {
    BulletPINVOKE.btRigidBody_applyDamping(swigCPtr, timeStep);
  }

  public void setMassProps(float mass, btVector3 inertia) {
    BulletPINVOKE.btRigidBody_setMassProps(swigCPtr, mass, btVector3.getCPtr(inertia));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 getLinearFactor() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getLinearFactor(swigCPtr), false);
    return ret;
  }

  public void setLinearFactor(btVector3 linearFactor) {
    BulletPINVOKE.btRigidBody_setLinearFactor(swigCPtr, btVector3.getCPtr(linearFactor));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getInvMass() {
    float ret = BulletPINVOKE.btRigidBody_getInvMass(swigCPtr);
    return ret;
  }

  public btMatrix3x3 getInvInertiaTensorWorld() {
    btMatrix3x3 ret = new btMatrix3x3(BulletPINVOKE.btRigidBody_getInvInertiaTensorWorld(swigCPtr), false);
    return ret;
  }

  public void integrateVelocities(float step) {
    BulletPINVOKE.btRigidBody_integrateVelocities(swigCPtr, step);
  }

  public void setCenterOfMassTransform(btTransform xform) {
    BulletPINVOKE.btRigidBody_setCenterOfMassTransform(swigCPtr, btTransform.getCPtr(xform));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyCentralForce(btVector3 force) {
    BulletPINVOKE.btRigidBody_applyCentralForce(swigCPtr, btVector3.getCPtr(force));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 getTotalForce() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getTotalForce(swigCPtr), false);
    return ret;
  }

  public btVector3 getTotalTorque() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getTotalTorque(swigCPtr), false);
    return ret;
  }

  public btVector3 getInvInertiaDiagLocal() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getInvInertiaDiagLocal(swigCPtr), false);
    return ret;
  }

  public void setInvInertiaDiagLocal(btVector3 diagInvInertia) {
    BulletPINVOKE.btRigidBody_setInvInertiaDiagLocal(swigCPtr, btVector3.getCPtr(diagInvInertia));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSleepingThresholds(float linear, float angular) {
    BulletPINVOKE.btRigidBody_setSleepingThresholds(swigCPtr, linear, angular);
  }

  public void applyTorque(btVector3 torque) {
    BulletPINVOKE.btRigidBody_applyTorque(swigCPtr, btVector3.getCPtr(torque));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyForce(btVector3 force, btVector3 rel_pos) {
    BulletPINVOKE.btRigidBody_applyForce(swigCPtr, btVector3.getCPtr(force), btVector3.getCPtr(rel_pos));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyCentralImpulse(btVector3 impulse) {
    BulletPINVOKE.btRigidBody_applyCentralImpulse(swigCPtr, btVector3.getCPtr(impulse));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyTorqueImpulse(btVector3 torque) {
    BulletPINVOKE.btRigidBody_applyTorqueImpulse(swigCPtr, btVector3.getCPtr(torque));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyImpulse(btVector3 impulse, btVector3 rel_pos) {
    BulletPINVOKE.btRigidBody_applyImpulse(swigCPtr, btVector3.getCPtr(impulse), btVector3.getCPtr(rel_pos));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearForces() {
    BulletPINVOKE.btRigidBody_clearForces(swigCPtr);
  }

  public void updateInertiaTensor() {
    BulletPINVOKE.btRigidBody_updateInertiaTensor(swigCPtr);
  }

  public btVector3 getCenterOfMassPosition() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getCenterOfMassPosition(swigCPtr), false);
    return ret;
  }

  public btQuaternion getOrientation() {
    btQuaternion ret = new btQuaternion(BulletPINVOKE.btRigidBody_getOrientation(swigCPtr), true);
    return ret;
  }

  public btTransform getCenterOfMassTransform() {
    btTransform ret = new btTransform(BulletPINVOKE.btRigidBody_getCenterOfMassTransform(swigCPtr), false);
    return ret;
  }

  public btVector3 getLinearVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getLinearVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 getAngularVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getAngularVelocity(swigCPtr), false);
    return ret;
  }

  public void setLinearVelocity(btVector3 lin_vel) {
    BulletPINVOKE.btRigidBody_setLinearVelocity(swigCPtr, btVector3.getCPtr(lin_vel));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAngularVelocity(btVector3 ang_vel) {
    BulletPINVOKE.btRigidBody_setAngularVelocity(swigCPtr, btVector3.getCPtr(ang_vel));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 getVelocityInLocalPoint(btVector3 rel_pos) {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getVelocityInLocalPoint(swigCPtr, btVector3.getCPtr(rel_pos)), true);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void translate(btVector3 v) {
    BulletPINVOKE.btRigidBody_translate(swigCPtr, btVector3.getCPtr(v));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getAabb(btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btRigidBody_getAabb(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float computeImpulseDenominator(btVector3 pos, btVector3 normal) {
    float ret = BulletPINVOKE.btRigidBody_computeImpulseDenominator(swigCPtr, btVector3.getCPtr(pos), btVector3.getCPtr(normal));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float computeAngularImpulseDenominator(btVector3 axis) {
    float ret = BulletPINVOKE.btRigidBody_computeAngularImpulseDenominator(swigCPtr, btVector3.getCPtr(axis));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void updateDeactivation(float timeStep) {
    BulletPINVOKE.btRigidBody_updateDeactivation(swigCPtr, timeStep);
  }

  public bool wantsSleeping() {
    bool ret = BulletPINVOKE.btRigidBody_wantsSleeping(swigCPtr);
    return ret;
  }

  public btBroadphaseProxy getBroadphaseProxy() {
    global::System.IntPtr cPtr = BulletPINVOKE.btRigidBody_getBroadphaseProxy__SWIG_0(swigCPtr);
    btBroadphaseProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphaseProxy(cPtr, false);
    return ret;
  }

  public void setNewBroadphaseProxy(btBroadphaseProxy broadphaseProxy) {
    BulletPINVOKE.btRigidBody_setNewBroadphaseProxy(swigCPtr, btBroadphaseProxy.getCPtr(broadphaseProxy));
  }

  public btMotionState getMotionState() {
    global::System.IntPtr cPtr = BulletPINVOKE.btRigidBody_getMotionState__SWIG_0(swigCPtr);
    btMotionState ret = (cPtr == global::System.IntPtr.Zero) ? null : new btMotionState(cPtr, false);
    return ret;
  }

  public void setMotionState(btMotionState motionState) {
    BulletPINVOKE.btRigidBody_setMotionState(swigCPtr, btMotionState.getCPtr(motionState));
  }

  public int m_contactSolverType {
    set {
      BulletPINVOKE.btRigidBody_m_contactSolverType_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btRigidBody_m_contactSolverType_get(swigCPtr);
      return ret;
    } 
  }

  public int m_frictionSolverType {
    set {
      BulletPINVOKE.btRigidBody_m_frictionSolverType_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btRigidBody_m_frictionSolverType_get(swigCPtr);
      return ret;
    } 
  }

  public void setAngularFactor(btVector3 angFac) {
    BulletPINVOKE.btRigidBody_setAngularFactor__SWIG_0(swigCPtr, btVector3.getCPtr(angFac));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAngularFactor(float angFac) {
    BulletPINVOKE.btRigidBody_setAngularFactor__SWIG_1(swigCPtr, angFac);
  }

  public btVector3 getAngularFactor() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_getAngularFactor(swigCPtr), false);
    return ret;
  }

  public bool isInWorld() {
    bool ret = BulletPINVOKE.btRigidBody_isInWorld(swigCPtr);
    return ret;
  }

  public void addConstraintRef(btTypedConstraint c) {
    BulletPINVOKE.btRigidBody_addConstraintRef(swigCPtr, btTypedConstraint.getCPtr(c));
  }

  public void removeConstraintRef(btTypedConstraint c) {
    BulletPINVOKE.btRigidBody_removeConstraintRef(swigCPtr, btTypedConstraint.getCPtr(c));
  }

  public btTypedConstraint getConstraintRef(int index) {
    global::System.IntPtr cPtr = BulletPINVOKE.btRigidBody_getConstraintRef(swigCPtr, index);
    btTypedConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : new btTypedConstraint(cPtr, false);
    return ret;
  }

  public int getNumConstraintRefs() {
    int ret = BulletPINVOKE.btRigidBody_getNumConstraintRefs(swigCPtr);
    return ret;
  }

  public void setFlags(int flags) {
    BulletPINVOKE.btRigidBody_setFlags(swigCPtr, flags);
  }

  public int getFlags() {
    int ret = BulletPINVOKE.btRigidBody_getFlags(swigCPtr);
    return ret;
  }

  public btVector3 computeGyroscopicForce(float maxGyroscopicForce) {
    btVector3 ret = new btVector3(BulletPINVOKE.btRigidBody_computeGyroscopicForce(swigCPtr, maxGyroscopicForce), true);
    return ret;
  }

  public override int calculateSerializeBufferSize() {
    int ret = BulletPINVOKE.btRigidBody_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public override string serialize(SWIGTYPE_p_void dataBuffer, btSerializer serializer) {
    string ret = BulletPINVOKE.btRigidBody_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), btSerializer.getCPtr(serializer));
    return ret;
  }

  public override void serializeSingleObject(btSerializer serializer) {
    BulletPINVOKE.btRigidBody_serializeSingleObject(swigCPtr, btSerializer.getCPtr(serializer));
  }

}

}
