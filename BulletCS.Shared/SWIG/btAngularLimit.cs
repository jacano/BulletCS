//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btAngularLimit : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btAngularLimit(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btAngularLimit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btAngularLimit() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btAngularLimit(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public btAngularLimit() : this(BulletPINVOKE.new_btAngularLimit(), true) {
  }

  public void set(float low, float high, float _softness, float _biasFactor, float _relaxationFactor) {
    BulletPINVOKE.btAngularLimit_set__SWIG_0(swigCPtr, low, high, _softness, _biasFactor, _relaxationFactor);
  }

  public void set(float low, float high, float _softness, float _biasFactor) {
    BulletPINVOKE.btAngularLimit_set__SWIG_1(swigCPtr, low, high, _softness, _biasFactor);
  }

  public void set(float low, float high, float _softness) {
    BulletPINVOKE.btAngularLimit_set__SWIG_2(swigCPtr, low, high, _softness);
  }

  public void set(float low, float high) {
    BulletPINVOKE.btAngularLimit_set__SWIG_3(swigCPtr, low, high);
  }

  public void test(float angle) {
    BulletPINVOKE.btAngularLimit_test(swigCPtr, angle);
  }

  public float getSoftness() {
    float ret = BulletPINVOKE.btAngularLimit_getSoftness(swigCPtr);
    return ret;
  }

  public float getBiasFactor() {
    float ret = BulletPINVOKE.btAngularLimit_getBiasFactor(swigCPtr);
    return ret;
  }

  public float getRelaxationFactor() {
    float ret = BulletPINVOKE.btAngularLimit_getRelaxationFactor(swigCPtr);
    return ret;
  }

  public float getCorrection() {
    float ret = BulletPINVOKE.btAngularLimit_getCorrection(swigCPtr);
    return ret;
  }

  public float getSign() {
    float ret = BulletPINVOKE.btAngularLimit_getSign(swigCPtr);
    return ret;
  }

  public float getHalfRange() {
    float ret = BulletPINVOKE.btAngularLimit_getHalfRange(swigCPtr);
    return ret;
  }

  public bool isLimit() {
    bool ret = BulletPINVOKE.btAngularLimit_isLimit(swigCPtr);
    return ret;
  }

  public void fit(SWIGTYPE_p_float angle) {
    BulletPINVOKE.btAngularLimit_fit(swigCPtr, SWIGTYPE_p_float.getCPtr(angle));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getError() {
    float ret = BulletPINVOKE.btAngularLimit_getError(swigCPtr);
    return ret;
  }

  public float getLow() {
    float ret = BulletPINVOKE.btAngularLimit_getLow(swigCPtr);
    return ret;
  }

  public float getHigh() {
    float ret = BulletPINVOKE.btAngularLimit_getHigh(swigCPtr);
    return ret;
  }

}

}
