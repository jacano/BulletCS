//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btConeTwistConstraint : btTypedConstraint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btConeTwistConstraint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btConeTwistConstraint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btConeTwistConstraint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btConeTwistConstraint() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btConeTwistConstraint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btConeTwistConstraint(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame) : this(BulletPINVOKE.new_btConeTwistConstraint__SWIG_0(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), btTransform.getCPtr(rbAFrame), btTransform.getCPtr(rbBFrame)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btConeTwistConstraint(btRigidBody rbA, btTransform rbAFrame) : this(BulletPINVOKE.new_btConeTwistConstraint__SWIG_1(btRigidBody.getCPtr(rbA), btTransform.getCPtr(rbAFrame)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void buildJacobian() {
    BulletPINVOKE.btConeTwistConstraint_buildJacobian(swigCPtr);
  }

  public override void getInfo1(btTypedConstraint.btConstraintInfo1 info) {
    BulletPINVOKE.btConeTwistConstraint_getInfo1(swigCPtr, btTypedConstraint.btConstraintInfo1.getCPtr(info));
  }

  public void getInfo1NonVirtual(btTypedConstraint.btConstraintInfo1 info) {
    BulletPINVOKE.btConeTwistConstraint_getInfo1NonVirtual(swigCPtr, btTypedConstraint.btConstraintInfo1.getCPtr(info));
  }

  public override void getInfo2(btTypedConstraint.btConstraintInfo2 info) {
    BulletPINVOKE.btConeTwistConstraint_getInfo2(swigCPtr, btTypedConstraint.btConstraintInfo2.getCPtr(info));
  }

  public void getInfo2NonVirtual(btTypedConstraint.btConstraintInfo2 info, btTransform transA, btTransform transB, btMatrix3x3 invInertiaWorldA, btMatrix3x3 invInertiaWorldB) {
    BulletPINVOKE.btConeTwistConstraint_getInfo2NonVirtual(swigCPtr, btTypedConstraint.btConstraintInfo2.getCPtr(info), btTransform.getCPtr(transA), btTransform.getCPtr(transB), btMatrix3x3.getCPtr(invInertiaWorldA), btMatrix3x3.getCPtr(invInertiaWorldB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void solveConstraintObsolete(btSolverBody bodyA, btSolverBody bodyB, float timeStep) {
    BulletPINVOKE.btConeTwistConstraint_solveConstraintObsolete(swigCPtr, btSolverBody.getCPtr(bodyA), btSolverBody.getCPtr(bodyB), timeStep);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateRHS(float timeStep) {
    BulletPINVOKE.btConeTwistConstraint_updateRHS(swigCPtr, timeStep);
  }

  public new btRigidBody getRigidBodyA() {
    btRigidBody ret = new btRigidBody(BulletPINVOKE.btConeTwistConstraint_getRigidBodyA(swigCPtr), false);
    return ret;
  }

  public new btRigidBody getRigidBodyB() {
    btRigidBody ret = new btRigidBody(BulletPINVOKE.btConeTwistConstraint_getRigidBodyB(swigCPtr), false);
    return ret;
  }

  public void setAngularOnly(bool angularOnly) {
    BulletPINVOKE.btConeTwistConstraint_setAngularOnly(swigCPtr, angularOnly);
  }

  public void setLimit(int limitIndex, float limitValue) {
    BulletPINVOKE.btConeTwistConstraint_setLimit__SWIG_0(swigCPtr, limitIndex, limitValue);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor, float _relaxationFactor) {
    BulletPINVOKE.btConeTwistConstraint_setLimit__SWIG_1(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor, _relaxationFactor);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor) {
    BulletPINVOKE.btConeTwistConstraint_setLimit__SWIG_2(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness) {
    BulletPINVOKE.btConeTwistConstraint_setLimit__SWIG_3(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan, _softness);
  }

  public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan) {
    BulletPINVOKE.btConeTwistConstraint_setLimit__SWIG_4(swigCPtr, _swingSpan1, _swingSpan2, _twistSpan);
  }

  public btTransform getAFrame() {
    btTransform ret = new btTransform(BulletPINVOKE.btConeTwistConstraint_getAFrame(swigCPtr), false);
    return ret;
  }

  public btTransform getBFrame() {
    btTransform ret = new btTransform(BulletPINVOKE.btConeTwistConstraint_getBFrame(swigCPtr), false);
    return ret;
  }

  public int getSolveTwistLimit() {
    int ret = BulletPINVOKE.btConeTwistConstraint_getSolveTwistLimit(swigCPtr);
    return ret;
  }

  public int getSolveSwingLimit() {
    int ret = BulletPINVOKE.btConeTwistConstraint_getSolveSwingLimit(swigCPtr);
    return ret;
  }

  public float getTwistLimitSign() {
    float ret = BulletPINVOKE.btConeTwistConstraint_getTwistLimitSign(swigCPtr);
    return ret;
  }

  public void calcAngleInfo() {
    BulletPINVOKE.btConeTwistConstraint_calcAngleInfo(swigCPtr);
  }

  public void calcAngleInfo2(btTransform transA, btTransform transB, btMatrix3x3 invInertiaWorldA, btMatrix3x3 invInertiaWorldB) {
    BulletPINVOKE.btConeTwistConstraint_calcAngleInfo2(swigCPtr, btTransform.getCPtr(transA), btTransform.getCPtr(transB), btMatrix3x3.getCPtr(invInertiaWorldA), btMatrix3x3.getCPtr(invInertiaWorldB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getSwingSpan1() {
    float ret = BulletPINVOKE.btConeTwistConstraint_getSwingSpan1(swigCPtr);
    return ret;
  }

  public float getSwingSpan2() {
    float ret = BulletPINVOKE.btConeTwistConstraint_getSwingSpan2(swigCPtr);
    return ret;
  }

  public float getTwistSpan() {
    float ret = BulletPINVOKE.btConeTwistConstraint_getTwistSpan(swigCPtr);
    return ret;
  }

  public float getTwistAngle() {
    float ret = BulletPINVOKE.btConeTwistConstraint_getTwistAngle(swigCPtr);
    return ret;
  }

  public bool isPastSwingLimit() {
    bool ret = BulletPINVOKE.btConeTwistConstraint_isPastSwingLimit(swigCPtr);
    return ret;
  }

  public void setDamping(float damping) {
    BulletPINVOKE.btConeTwistConstraint_setDamping(swigCPtr, damping);
  }

  public void enableMotor(bool b) {
    BulletPINVOKE.btConeTwistConstraint_enableMotor(swigCPtr, b);
  }

  public void setMaxMotorImpulse(float maxMotorImpulse) {
    BulletPINVOKE.btConeTwistConstraint_setMaxMotorImpulse(swigCPtr, maxMotorImpulse);
  }

  public void setMaxMotorImpulseNormalized(float maxMotorImpulse) {
    BulletPINVOKE.btConeTwistConstraint_setMaxMotorImpulseNormalized(swigCPtr, maxMotorImpulse);
  }

  public float getFixThresh() {
    float ret = BulletPINVOKE.btConeTwistConstraint_getFixThresh(swigCPtr);
    return ret;
  }

  public void setFixThresh(float fixThresh) {
    BulletPINVOKE.btConeTwistConstraint_setFixThresh(swigCPtr, fixThresh);
  }

  public void setMotorTarget(btQuaternion q) {
    BulletPINVOKE.btConeTwistConstraint_setMotorTarget(swigCPtr, btQuaternion.getCPtr(q));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMotorTargetInConstraintSpace(btQuaternion q) {
    BulletPINVOKE.btConeTwistConstraint_setMotorTargetInConstraintSpace(swigCPtr, btQuaternion.getCPtr(q));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 GetPointForAngle(float fAngleInRadians, float fLength) {
    btVector3 ret = new btVector3(BulletPINVOKE.btConeTwistConstraint_GetPointForAngle(swigCPtr, fAngleInRadians, fLength), true);
    return ret;
  }

  public override void setParam(int num, float value, int axis) {
    BulletPINVOKE.btConeTwistConstraint_setParam__SWIG_0(swigCPtr, num, value, axis);
  }

  public override void setParam(int num, float value) {
    BulletPINVOKE.btConeTwistConstraint_setParam__SWIG_1(swigCPtr, num, value);
  }

  public virtual void setFrames(btTransform frameA, btTransform frameB) {
    BulletPINVOKE.btConeTwistConstraint_setFrames(swigCPtr, btTransform.getCPtr(frameA), btTransform.getCPtr(frameB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btTransform getFrameOffsetA() {
    btTransform ret = new btTransform(BulletPINVOKE.btConeTwistConstraint_getFrameOffsetA(swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetB() {
    btTransform ret = new btTransform(BulletPINVOKE.btConeTwistConstraint_getFrameOffsetB(swigCPtr), false);
    return ret;
  }

  public override float getParam(int num, int axis) {
    float ret = BulletPINVOKE.btConeTwistConstraint_getParam__SWIG_0(swigCPtr, num, axis);
    return ret;
  }

  public override float getParam(int num) {
    float ret = BulletPINVOKE.btConeTwistConstraint_getParam__SWIG_1(swigCPtr, num);
    return ret;
  }

  public override int calculateSerializeBufferSize() {
    int ret = BulletPINVOKE.btConeTwistConstraint_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public override string serialize(SWIGTYPE_p_void dataBuffer, btSerializer serializer) {
    string ret = BulletPINVOKE.btConeTwistConstraint_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), btSerializer.getCPtr(serializer));
    return ret;
  }

}

}
