//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btCollisionDispatcher : btDispatcher {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btCollisionDispatcher(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btCollisionDispatcher_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btCollisionDispatcher obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btCollisionDispatcher() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btCollisionDispatcher(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public int getDispatcherFlags() {
    int ret = BulletPINVOKE.btCollisionDispatcher_getDispatcherFlags(swigCPtr);
    return ret;
  }

  public void setDispatcherFlags(int flags) {
    BulletPINVOKE.btCollisionDispatcher_setDispatcherFlags(swigCPtr, flags);
  }

  public void registerCollisionCreateFunc(int proxyType0, int proxyType1, btCollisionAlgorithmCreateFunc createFunc) {
    BulletPINVOKE.btCollisionDispatcher_registerCollisionCreateFunc(swigCPtr, proxyType0, proxyType1, btCollisionAlgorithmCreateFunc.getCPtr(createFunc));
  }

  public override int getNumManifolds() {
    int ret = BulletPINVOKE.btCollisionDispatcher_getNumManifolds(swigCPtr);
    return ret;
  }

  public override SWIGTYPE_p_p_btPersistentManifold getInternalManifoldPointer() {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_getInternalManifoldPointer(swigCPtr);
    SWIGTYPE_p_p_btPersistentManifold ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public override btPersistentManifold getManifoldByIndexInternal(int index) {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(swigCPtr, index);
    btPersistentManifold ret = (cPtr == global::System.IntPtr.Zero) ? null : new btPersistentManifold(cPtr, false);
    return ret;
  }

  public btCollisionDispatcher(btCollisionConfiguration collisionConfiguration) : this(BulletPINVOKE.new_btCollisionDispatcher(btCollisionConfiguration.getCPtr(collisionConfiguration)), true) {
  }

  public override btPersistentManifold getNewManifold(btCollisionObject b0, btCollisionObject b1) {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_getNewManifold(swigCPtr, btCollisionObject.getCPtr(b0), btCollisionObject.getCPtr(b1));
    btPersistentManifold ret = (cPtr == global::System.IntPtr.Zero) ? null : new btPersistentManifold(cPtr, false);
    return ret;
  }

  public override void releaseManifold(btPersistentManifold manifold) {
    BulletPINVOKE.btCollisionDispatcher_releaseManifold(swigCPtr, btPersistentManifold.getCPtr(manifold));
  }

  public override void clearManifold(btPersistentManifold manifold) {
    BulletPINVOKE.btCollisionDispatcher_clearManifold(swigCPtr, btPersistentManifold.getCPtr(manifold));
  }

  public override btCollisionAlgorithm findAlgorithm(btCollisionObjectWrapper body0Wrap, btCollisionObjectWrapper body1Wrap, btPersistentManifold sharedManifold) {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_findAlgorithm__SWIG_0(swigCPtr, btCollisionObjectWrapper.getCPtr(body0Wrap), btCollisionObjectWrapper.getCPtr(body1Wrap), btPersistentManifold.getCPtr(sharedManifold));
    btCollisionAlgorithm ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public override btCollisionAlgorithm findAlgorithm(btCollisionObjectWrapper body0Wrap, btCollisionObjectWrapper body1Wrap) {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_findAlgorithm__SWIG_1(swigCPtr, btCollisionObjectWrapper.getCPtr(body0Wrap), btCollisionObjectWrapper.getCPtr(body1Wrap));
    btCollisionAlgorithm ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public override bool needsCollision(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BulletPINVOKE.btCollisionDispatcher_needsCollision(swigCPtr, btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1));
    return ret;
  }

  public override bool needsResponse(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BulletPINVOKE.btCollisionDispatcher_needsResponse(swigCPtr, btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1));
    return ret;
  }

  public override void dispatchAllCollisionPairs(btOverlappingPairCache pairCache, btDispatcherInfo dispatchInfo, btDispatcher dispatcher) {
    BulletPINVOKE.btCollisionDispatcher_dispatchAllCollisionPairs(swigCPtr, btOverlappingPairCache.getCPtr(pairCache), btDispatcherInfo.getCPtr(dispatchInfo), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setNearCallback(SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void nearCallback) {
    BulletPINVOKE.btCollisionDispatcher_setNearCallback(swigCPtr, SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void.getCPtr(nearCallback));
  }

  public SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void getNearCallback() {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_getNearCallback(swigCPtr);
    SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void(cPtr, false);
    return ret;
  }

  public static void defaultNearCallback(btBroadphasePair collisionPair, btCollisionDispatcher dispatcher, btDispatcherInfo dispatchInfo) {
    BulletPINVOKE.btCollisionDispatcher_defaultNearCallback(btBroadphasePair.getCPtr(collisionPair), btCollisionDispatcher.getCPtr(dispatcher), btDispatcherInfo.getCPtr(dispatchInfo));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override SWIGTYPE_p_void allocateCollisionAlgorithm(int size) {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_allocateCollisionAlgorithm(swigCPtr, size);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public override void freeCollisionAlgorithm(SWIGTYPE_p_void ptr) {
    BulletPINVOKE.btCollisionDispatcher_freeCollisionAlgorithm(swigCPtr, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public btCollisionConfiguration getCollisionConfiguration() {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_getCollisionConfiguration__SWIG_0(swigCPtr);
    btCollisionConfiguration ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionConfiguration(cPtr, false);
    return ret;
  }

  public void setCollisionConfiguration(btCollisionConfiguration config) {
    BulletPINVOKE.btCollisionDispatcher_setCollisionConfiguration(swigCPtr, btCollisionConfiguration.getCPtr(config));
  }

  public override SWIGTYPE_p_btPoolAllocator getInternalManifoldPool() {
    global::System.IntPtr cPtr = BulletPINVOKE.btCollisionDispatcher_getInternalManifoldPool__SWIG_0(swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public enum DispatcherFlags {
    CD_STATIC_STATIC_REPORTED = 1,
    CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD = 2,
    CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION = 4
  }

}

}
