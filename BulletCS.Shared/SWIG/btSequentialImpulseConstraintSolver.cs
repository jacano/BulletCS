//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btSequentialImpulseConstraintSolver : btConstraintSolver {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btSequentialImpulseConstraintSolver(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btSequentialImpulseConstraintSolver_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btSequentialImpulseConstraintSolver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSequentialImpulseConstraintSolver() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btSequentialImpulseConstraintSolver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btSequentialImpulseConstraintSolver() : this(BulletPINVOKE.new_btSequentialImpulseConstraintSolver(), true) {
  }

  public override float solveGroup(SWIGTYPE_p_p_btCollisionObject bodies, int numBodies, SWIGTYPE_p_p_btPersistentManifold manifold, int numManifolds, SWIGTYPE_p_p_btTypedConstraint constraints, int numConstraints, btContactSolverInfo info, btIDebugDraw debugDrawer, btDispatcher dispatcher) {
    float ret = BulletPINVOKE.btSequentialImpulseConstraintSolver_solveGroup(swigCPtr, SWIGTYPE_p_p_btCollisionObject.getCPtr(bodies), numBodies, SWIGTYPE_p_p_btPersistentManifold.getCPtr(manifold), numManifolds, SWIGTYPE_p_p_btTypedConstraint.getCPtr(constraints), numConstraints, btContactSolverInfo.getCPtr(info), btIDebugDraw.getCPtr(debugDrawer), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void reset() {
    BulletPINVOKE.btSequentialImpulseConstraintSolver_reset(swigCPtr);
  }

  public uint btRand2() {
    uint ret = BulletPINVOKE.btSequentialImpulseConstraintSolver_btRand2(swigCPtr);
    return ret;
  }

  public int btRandInt2(int n) {
    int ret = BulletPINVOKE.btSequentialImpulseConstraintSolver_btRandInt2(swigCPtr, n);
    return ret;
  }

  public void setRandSeed(uint seed) {
    BulletPINVOKE.btSequentialImpulseConstraintSolver_setRandSeed(swigCPtr, seed);
  }

  public uint getRandSeed() {
    uint ret = BulletPINVOKE.btSequentialImpulseConstraintSolver_getRandSeed(swigCPtr);
    return ret;
  }

  public override btConstraintSolverType getSolverType() {
    btConstraintSolverType ret = (btConstraintSolverType)BulletPINVOKE.btSequentialImpulseConstraintSolver_getSolverType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float getActiveConstraintRowSolverGeneric() {
    global::System.IntPtr cPtr = BulletPINVOKE.btSequentialImpulseConstraintSolver_getActiveConstraintRowSolverGeneric(swigCPtr);
    SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float(cPtr, false);
    return ret;
  }

  public void setConstraintRowSolverGeneric(SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float rowSolver) {
    BulletPINVOKE.btSequentialImpulseConstraintSolver_setConstraintRowSolverGeneric(swigCPtr, SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float.getCPtr(rowSolver));
  }

  public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float getActiveConstraintRowSolverLowerLimit() {
    global::System.IntPtr cPtr = BulletPINVOKE.btSequentialImpulseConstraintSolver_getActiveConstraintRowSolverLowerLimit(swigCPtr);
    SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float(cPtr, false);
    return ret;
  }

  public void setConstraintRowSolverLowerLimit(SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float rowSolver) {
    BulletPINVOKE.btSequentialImpulseConstraintSolver_setConstraintRowSolverLowerLimit(swigCPtr, SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float.getCPtr(rowSolver));
  }

  public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float getScalarConstraintRowSolverGeneric() {
    global::System.IntPtr cPtr = BulletPINVOKE.btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverGeneric(swigCPtr);
    SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float getScalarConstraintRowSolverLowerLimit() {
    global::System.IntPtr cPtr = BulletPINVOKE.btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverLowerLimit(swigCPtr);
    SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__float(cPtr, false);
    return ret;
  }

}

}
