//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btDispatcher : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btDispatcher(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btDispatcher obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btDispatcher() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btDispatcher(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual btCollisionAlgorithm findAlgorithm(btCollisionObjectWrapper body0Wrap, btCollisionObjectWrapper body1Wrap, btPersistentManifold sharedManifold) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDispatcher_findAlgorithm__SWIG_0(swigCPtr, btCollisionObjectWrapper.getCPtr(body0Wrap), btCollisionObjectWrapper.getCPtr(body1Wrap), btPersistentManifold.getCPtr(sharedManifold));
    btCollisionAlgorithm ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public virtual btCollisionAlgorithm findAlgorithm(btCollisionObjectWrapper body0Wrap, btCollisionObjectWrapper body1Wrap) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDispatcher_findAlgorithm__SWIG_1(swigCPtr, btCollisionObjectWrapper.getCPtr(body0Wrap), btCollisionObjectWrapper.getCPtr(body1Wrap));
    btCollisionAlgorithm ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionAlgorithm(cPtr, false);
    return ret;
  }

  public virtual btPersistentManifold getNewManifold(btCollisionObject b0, btCollisionObject b1) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDispatcher_getNewManifold(swigCPtr, btCollisionObject.getCPtr(b0), btCollisionObject.getCPtr(b1));
    btPersistentManifold ret = (cPtr == global::System.IntPtr.Zero) ? null : new btPersistentManifold(cPtr, false);
    return ret;
  }

  public virtual void releaseManifold(btPersistentManifold manifold) {
    BulletPINVOKE.btDispatcher_releaseManifold(swigCPtr, btPersistentManifold.getCPtr(manifold));
  }

  public virtual void clearManifold(btPersistentManifold manifold) {
    BulletPINVOKE.btDispatcher_clearManifold(swigCPtr, btPersistentManifold.getCPtr(manifold));
  }

  public virtual bool needsCollision(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BulletPINVOKE.btDispatcher_needsCollision(swigCPtr, btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1));
    return ret;
  }

  public virtual bool needsResponse(btCollisionObject body0, btCollisionObject body1) {
    bool ret = BulletPINVOKE.btDispatcher_needsResponse(swigCPtr, btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1));
    return ret;
  }

  public virtual void dispatchAllCollisionPairs(btOverlappingPairCache pairCache, btDispatcherInfo dispatchInfo, btDispatcher dispatcher) {
    BulletPINVOKE.btDispatcher_dispatchAllCollisionPairs(swigCPtr, btOverlappingPairCache.getCPtr(pairCache), btDispatcherInfo.getCPtr(dispatchInfo), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int getNumManifolds() {
    int ret = BulletPINVOKE.btDispatcher_getNumManifolds(swigCPtr);
    return ret;
  }

  public virtual btPersistentManifold getManifoldByIndexInternal(int index) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDispatcher_getManifoldByIndexInternal(swigCPtr, index);
    btPersistentManifold ret = (cPtr == global::System.IntPtr.Zero) ? null : new btPersistentManifold(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_p_btPersistentManifold getInternalManifoldPointer() {
    global::System.IntPtr cPtr = BulletPINVOKE.btDispatcher_getInternalManifoldPointer(swigCPtr);
    SWIGTYPE_p_p_btPersistentManifold ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_btPersistentManifold(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_btPoolAllocator getInternalManifoldPool() {
    global::System.IntPtr cPtr = BulletPINVOKE.btDispatcher_getInternalManifoldPool__SWIG_0(swigCPtr);
    SWIGTYPE_p_btPoolAllocator ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btPoolAllocator(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_void allocateCollisionAlgorithm(int size) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDispatcher_allocateCollisionAlgorithm(swigCPtr, size);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual void freeCollisionAlgorithm(SWIGTYPE_p_void ptr) {
    BulletPINVOKE.btDispatcher_freeCollisionAlgorithm(swigCPtr, SWIGTYPE_p_void.getCPtr(ptr));
  }

}

}
