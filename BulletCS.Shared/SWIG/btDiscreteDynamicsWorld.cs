//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btDiscreteDynamicsWorld : btDynamicsWorld {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btDiscreteDynamicsWorld(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btDiscreteDynamicsWorld_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btDiscreteDynamicsWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btDiscreteDynamicsWorld() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btDiscreteDynamicsWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btDiscreteDynamicsWorld(btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) : this(BulletPINVOKE.new_btDiscreteDynamicsWorld(btDispatcher.getCPtr(dispatcher), btBroadphaseInterface.getCPtr(pairCache), btConstraintSolver.getCPtr(constraintSolver), btCollisionConfiguration.getCPtr(collisionConfiguration)), true) {
  }

  public override int stepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {
    int ret = BulletPINVOKE.btDiscreteDynamicsWorld_stepSimulation__SWIG_0(swigCPtr, timeStep, maxSubSteps, fixedTimeStep);
    return ret;
  }

  public override int stepSimulation(float timeStep, int maxSubSteps) {
    int ret = BulletPINVOKE.btDiscreteDynamicsWorld_stepSimulation__SWIG_1(swigCPtr, timeStep, maxSubSteps);
    return ret;
  }

  public override int stepSimulation(float timeStep) {
    int ret = BulletPINVOKE.btDiscreteDynamicsWorld_stepSimulation__SWIG_2(swigCPtr, timeStep);
    return ret;
  }

  public override void synchronizeMotionStates() {
    BulletPINVOKE.btDiscreteDynamicsWorld_synchronizeMotionStates(swigCPtr);
  }

  public void synchronizeSingleMotionState(btRigidBody body) {
    BulletPINVOKE.btDiscreteDynamicsWorld_synchronizeSingleMotionState(swigCPtr, btRigidBody.getCPtr(body));
  }

  public override void addConstraint(btTypedConstraint constraint, bool disableCollisionsBetweenLinkedBodies) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addConstraint__SWIG_0(swigCPtr, btTypedConstraint.getCPtr(constraint), disableCollisionsBetweenLinkedBodies);
  }

  public override void addConstraint(btTypedConstraint constraint) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addConstraint__SWIG_1(swigCPtr, btTypedConstraint.getCPtr(constraint));
  }

  public override void removeConstraint(btTypedConstraint constraint) {
    BulletPINVOKE.btDiscreteDynamicsWorld_removeConstraint(swigCPtr, btTypedConstraint.getCPtr(constraint));
  }

  public override void addAction(btActionInterface arg0) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addAction(swigCPtr, btActionInterface.getCPtr(arg0));
  }

  public override void removeAction(btActionInterface arg0) {
    BulletPINVOKE.btDiscreteDynamicsWorld_removeAction(swigCPtr, btActionInterface.getCPtr(arg0));
  }

  public SWIGTYPE_p_btSimulationIslandManager getSimulationIslandManager() {
    global::System.IntPtr cPtr = BulletPINVOKE.btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0(swigCPtr);
    SWIGTYPE_p_btSimulationIslandManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btSimulationIslandManager(cPtr, false);
    return ret;
  }

  public btCollisionWorld getCollisionWorld() {
    global::System.IntPtr cPtr = BulletPINVOKE.btDiscreteDynamicsWorld_getCollisionWorld(swigCPtr);
    btCollisionWorld ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionWorld(cPtr, false);
    return ret;
  }

  public override void setGravity(btVector3 gravity) {
    BulletPINVOKE.btDiscreteDynamicsWorld_setGravity(swigCPtr, btVector3.getCPtr(gravity));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override btVector3 getGravity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btDiscreteDynamicsWorld_getGravity(swigCPtr), true);
    return ret;
  }

  public override void addCollisionObject(btCollisionObject collisionObject, short collisionFilterGroup, short collisionFilterMask) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addCollisionObject__SWIG_0(swigCPtr, btCollisionObject.getCPtr(collisionObject), collisionFilterGroup, collisionFilterMask);
  }

  public override void addCollisionObject(btCollisionObject collisionObject, short collisionFilterGroup) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addCollisionObject__SWIG_1(swigCPtr, btCollisionObject.getCPtr(collisionObject), collisionFilterGroup);
  }

  public override void addCollisionObject(btCollisionObject collisionObject) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addCollisionObject__SWIG_2(swigCPtr, btCollisionObject.getCPtr(collisionObject));
  }

  public override void addRigidBody(btRigidBody body) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addRigidBody__SWIG_0(swigCPtr, btRigidBody.getCPtr(body));
  }

  public override void addRigidBody(btRigidBody body, short group, short mask) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addRigidBody__SWIG_1(swigCPtr, btRigidBody.getCPtr(body), group, mask);
  }

  public override void removeRigidBody(btRigidBody body) {
    BulletPINVOKE.btDiscreteDynamicsWorld_removeRigidBody(swigCPtr, btRigidBody.getCPtr(body));
  }

  public override void removeCollisionObject(btCollisionObject collisionObject) {
    BulletPINVOKE.btDiscreteDynamicsWorld_removeCollisionObject(swigCPtr, btCollisionObject.getCPtr(collisionObject));
  }

  public void debugDrawConstraint(btTypedConstraint constraint) {
    BulletPINVOKE.btDiscreteDynamicsWorld_debugDrawConstraint(swigCPtr, btTypedConstraint.getCPtr(constraint));
  }

  public override void debugDrawWorld() {
    BulletPINVOKE.btDiscreteDynamicsWorld_debugDrawWorld(swigCPtr);
  }

  public override void setConstraintSolver(btConstraintSolver solver) {
    BulletPINVOKE.btDiscreteDynamicsWorld_setConstraintSolver(swigCPtr, btConstraintSolver.getCPtr(solver));
  }

  public override btConstraintSolver getConstraintSolver() {
    global::System.IntPtr cPtr = BulletPINVOKE.btDiscreteDynamicsWorld_getConstraintSolver(swigCPtr);
    btConstraintSolver ret = (cPtr == global::System.IntPtr.Zero) ? null : new btConstraintSolver(cPtr, false);
    return ret;
  }

  public override int getNumConstraints() {
    int ret = BulletPINVOKE.btDiscreteDynamicsWorld_getNumConstraints(swigCPtr);
    return ret;
  }

  public override btTypedConstraint getConstraint(int index) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDiscreteDynamicsWorld_getConstraint__SWIG_0(swigCPtr, index);
    btTypedConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : new btTypedConstraint(cPtr, false);
    return ret;
  }

  public override btDynamicsWorldType getWorldType() {
    btDynamicsWorldType ret = (btDynamicsWorldType)BulletPINVOKE.btDiscreteDynamicsWorld_getWorldType(swigCPtr);
    return ret;
  }

  public override void clearForces() {
    BulletPINVOKE.btDiscreteDynamicsWorld_clearForces(swigCPtr);
  }

  public virtual void applyGravity() {
    BulletPINVOKE.btDiscreteDynamicsWorld_applyGravity(swigCPtr);
  }

  public virtual void setNumTasks(int numTasks) {
    BulletPINVOKE.btDiscreteDynamicsWorld_setNumTasks(swigCPtr, numTasks);
  }

  public virtual void updateVehicles(float timeStep) {
    BulletPINVOKE.btDiscreteDynamicsWorld_updateVehicles(swigCPtr, timeStep);
  }

  public override void addVehicle(btActionInterface vehicle) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addVehicle(swigCPtr, btActionInterface.getCPtr(vehicle));
  }

  public override void removeVehicle(btActionInterface vehicle) {
    BulletPINVOKE.btDiscreteDynamicsWorld_removeVehicle(swigCPtr, btActionInterface.getCPtr(vehicle));
  }

  public override void addCharacter(btActionInterface character) {
    BulletPINVOKE.btDiscreteDynamicsWorld_addCharacter(swigCPtr, btActionInterface.getCPtr(character));
  }

  public override void removeCharacter(btActionInterface character) {
    BulletPINVOKE.btDiscreteDynamicsWorld_removeCharacter(swigCPtr, btActionInterface.getCPtr(character));
  }

  public void setSynchronizeAllMotionStates(bool synchronizeAll) {
    BulletPINVOKE.btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(swigCPtr, synchronizeAll);
  }

  public bool getSynchronizeAllMotionStates() {
    bool ret = BulletPINVOKE.btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(swigCPtr);
    return ret;
  }

  public void setApplySpeculativeContactRestitution(bool enable) {
    BulletPINVOKE.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(swigCPtr, enable);
  }

  public bool getApplySpeculativeContactRestitution() {
    bool ret = BulletPINVOKE.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(swigCPtr);
    return ret;
  }

  public override void serialize(btSerializer serializer) {
    BulletPINVOKE.btDiscreteDynamicsWorld_serialize(swigCPtr, btSerializer.getCPtr(serializer));
  }

  public void setLatencyMotionStateInterpolation(bool latencyInterpolation) {
    BulletPINVOKE.btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation(swigCPtr, latencyInterpolation);
  }

  public bool getLatencyMotionStateInterpolation() {
    bool ret = BulletPINVOKE.btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation(swigCPtr);
    return ret;
  }

}

}
