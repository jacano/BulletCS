//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btIDebugDraw : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btIDebugDraw(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btIDebugDraw obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btIDebugDraw() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btIDebugDraw(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void drawLine(btVector3 from, btVector3 to, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawLine__SWIG_0(swigCPtr, btVector3.getCPtr(from), btVector3.getCPtr(to), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawLine(btVector3 from, btVector3 to, btVector3 fromColor, btVector3 toColor) {
    BulletPINVOKE.btIDebugDraw_drawLine__SWIG_1(swigCPtr, btVector3.getCPtr(from), btVector3.getCPtr(to), btVector3.getCPtr(fromColor), btVector3.getCPtr(toColor));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawSphere(float radius, btTransform transform, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawSphere__SWIG_0(swigCPtr, radius, btTransform.getCPtr(transform), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawSphere(btVector3 p, float radius, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawSphere__SWIG_1(swigCPtr, btVector3.getCPtr(p), radius, btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawTriangle(btVector3 v0, btVector3 v1, btVector3 v2, btVector3 arg3, btVector3 arg4, btVector3 arg5, btVector3 color, float alpha) {
    BulletPINVOKE.btIDebugDraw_drawTriangle__SWIG_0(swigCPtr, btVector3.getCPtr(v0), btVector3.getCPtr(v1), btVector3.getCPtr(v2), btVector3.getCPtr(arg3), btVector3.getCPtr(arg4), btVector3.getCPtr(arg5), btVector3.getCPtr(color), alpha);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawTriangle(btVector3 v0, btVector3 v1, btVector3 v2, btVector3 color, float arg4) {
    BulletPINVOKE.btIDebugDraw_drawTriangle__SWIG_1(swigCPtr, btVector3.getCPtr(v0), btVector3.getCPtr(v1), btVector3.getCPtr(v2), btVector3.getCPtr(color), arg4);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawContactPoint(btVector3 PointOnB, btVector3 normalOnB, float distance, int lifeTime, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawContactPoint(swigCPtr, btVector3.getCPtr(PointOnB), btVector3.getCPtr(normalOnB), distance, lifeTime, btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void reportErrorWarning(string warningString) {
    BulletPINVOKE.btIDebugDraw_reportErrorWarning(swigCPtr, warningString);
  }

  public virtual void draw3dText(btVector3 location, string textString) {
    BulletPINVOKE.btIDebugDraw_draw3dText(swigCPtr, btVector3.getCPtr(location), textString);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDebugMode(int debugMode) {
    BulletPINVOKE.btIDebugDraw_setDebugMode(swigCPtr, debugMode);
  }

  public virtual int getDebugMode() {
    int ret = BulletPINVOKE.btIDebugDraw_getDebugMode(swigCPtr);
    return ret;
  }

  public virtual void drawAabb(btVector3 from, btVector3 to, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawAabb(swigCPtr, btVector3.getCPtr(from), btVector3.getCPtr(to), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawTransform(btTransform transform, float orthoLen) {
    BulletPINVOKE.btIDebugDraw_drawTransform(swigCPtr, btTransform.getCPtr(transform), orthoLen);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawArc(btVector3 center, btVector3 normal, btVector3 axis, float radiusA, float radiusB, float minAngle, float maxAngle, btVector3 color, bool drawSect, float stepDegrees) {
    BulletPINVOKE.btIDebugDraw_drawArc__SWIG_0(swigCPtr, btVector3.getCPtr(center), btVector3.getCPtr(normal), btVector3.getCPtr(axis), radiusA, radiusB, minAngle, maxAngle, btVector3.getCPtr(color), drawSect, stepDegrees);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawArc(btVector3 center, btVector3 normal, btVector3 axis, float radiusA, float radiusB, float minAngle, float maxAngle, btVector3 color, bool drawSect) {
    BulletPINVOKE.btIDebugDraw_drawArc__SWIG_1(swigCPtr, btVector3.getCPtr(center), btVector3.getCPtr(normal), btVector3.getCPtr(axis), radiusA, radiusB, minAngle, maxAngle, btVector3.getCPtr(color), drawSect);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawSpherePatch(btVector3 center, btVector3 up, btVector3 axis, float radius, float minTh, float maxTh, float minPs, float maxPs, btVector3 color, float stepDegrees, bool drawCenter) {
    BulletPINVOKE.btIDebugDraw_drawSpherePatch__SWIG_0(swigCPtr, btVector3.getCPtr(center), btVector3.getCPtr(up), btVector3.getCPtr(axis), radius, minTh, maxTh, minPs, maxPs, btVector3.getCPtr(color), stepDegrees, drawCenter);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawSpherePatch(btVector3 center, btVector3 up, btVector3 axis, float radius, float minTh, float maxTh, float minPs, float maxPs, btVector3 color, float stepDegrees) {
    BulletPINVOKE.btIDebugDraw_drawSpherePatch__SWIG_1(swigCPtr, btVector3.getCPtr(center), btVector3.getCPtr(up), btVector3.getCPtr(axis), radius, minTh, maxTh, minPs, maxPs, btVector3.getCPtr(color), stepDegrees);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawSpherePatch(btVector3 center, btVector3 up, btVector3 axis, float radius, float minTh, float maxTh, float minPs, float maxPs, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawSpherePatch__SWIG_2(swigCPtr, btVector3.getCPtr(center), btVector3.getCPtr(up), btVector3.getCPtr(axis), radius, minTh, maxTh, minPs, maxPs, btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawBox(btVector3 bbMin, btVector3 bbMax, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawBox__SWIG_0(swigCPtr, btVector3.getCPtr(bbMin), btVector3.getCPtr(bbMax), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawBox(btVector3 bbMin, btVector3 bbMax, btTransform trans, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawBox__SWIG_1(swigCPtr, btVector3.getCPtr(bbMin), btVector3.getCPtr(bbMax), btTransform.getCPtr(trans), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawCapsule(float radius, float halfHeight, int upAxis, btTransform transform, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawCapsule(swigCPtr, radius, halfHeight, upAxis, btTransform.getCPtr(transform), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawCylinder(float radius, float halfHeight, int upAxis, btTransform transform, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawCylinder(swigCPtr, radius, halfHeight, upAxis, btTransform.getCPtr(transform), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawCone(float radius, float height, int upAxis, btTransform transform, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawCone(swigCPtr, radius, height, upAxis, btTransform.getCPtr(transform), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void drawPlane(btVector3 planeNormal, float planeConst, btTransform transform, btVector3 color) {
    BulletPINVOKE.btIDebugDraw_drawPlane(swigCPtr, btVector3.getCPtr(planeNormal), planeConst, btTransform.getCPtr(transform), btVector3.getCPtr(color));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum DebugDrawModes {
    DBG_NoDebug = 0,
    DBG_DrawWireframe = 1,
    DBG_DrawAabb = 2,
    DBG_DrawFeaturesText = 4,
    DBG_DrawContactPoints = 8,
    DBG_NoDeactivation = 16,
    DBG_NoHelpText = 32,
    DBG_DrawText = 64,
    DBG_ProfileTimings = 128,
    DBG_EnableSatComparison = 256,
    DBG_DisableBulletLCP = 512,
    DBG_EnableCCD = 1024,
    DBG_DrawConstraints = (1 << 11),
    DBG_DrawConstraintLimits = (1 << 12),
    DBG_FastWireframe = (1 << 13),
    DBG_DrawNormals = (1 << 14),
    DBG_MAX_DEBUG_DRAW_MODE
  }

}

}
