/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Bullet(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Bullet(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Bullet(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_Bullet(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}


	#include "btBulletCollisionCommon.h"
	#include "btBulletDynamicsCommon.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_BT_BULLET_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(283);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGetVersion() {
  int jresult ;
  int result;
  
  result = (int)btGetVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BT_LARGE_FLOAT_get() {
  double jresult ;
  double result;
  
  result = (double)(1e18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btInfinityMask_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  btInfinityMask = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btInfinityMask_get() {
  int jresult ;
  int result;
  
  result = (int)btInfinityMask;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGetInfinityMask() {
  int jresult ;
  int result;
  
  result = (int)btGetInfinityMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSqrt(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFabs(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btFabs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCos(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btCos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSin(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btSin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTan(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btTan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAcos(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btAcos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAsin(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btAsin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAtan(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btAtan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAtan2(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btAtan2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btExp(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btExp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btLog(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btLog(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPow(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btPow(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFmod(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btFmod(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAtan2Fast(float jarg1, float jarg2) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)btAtan2Fast(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btFuzzyZero(float jarg1) {
  unsigned int jresult ;
  btScalar arg1 ;
  bool result;
  
  arg1 = (btScalar)jarg1; 
  result = (bool)btFuzzyZero(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btEqual(float jarg1, float jarg2) {
  unsigned int jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (bool)btEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGreaterEqual(float jarg1, float jarg2) {
  unsigned int jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  bool result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (bool)btGreaterEqual(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIsNegative(float jarg1) {
  int jresult ;
  btScalar arg1 ;
  int result;
  
  arg1 = (btScalar)jarg1; 
  result = (int)btIsNegative(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRadians(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btRadians(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDegrees(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btDegrees(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFsel(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btScalar)btFsel(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btMachineIsLittleEndian() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)btMachineIsLittleEndian();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSelect__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)btSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSelect__SWIG_1(unsigned int jarg1, int jarg2, int jarg3) {
  int jresult ;
  unsigned int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)btSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSelect__SWIG_2(unsigned int jarg1, float jarg2, float jarg3) {
  float jresult ;
  unsigned int arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)btSelect(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSwapEndian__SWIG_0(unsigned int jarg1) {
  unsigned int jresult ;
  unsigned int arg1 ;
  unsigned int result;
  
  arg1 = (unsigned int)jarg1; 
  result = (unsigned int)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btSwapEndian__SWIG_1(unsigned short jarg1) {
  unsigned short jresult ;
  unsigned short arg1 ;
  unsigned short result;
  
  arg1 = (unsigned short)jarg1; 
  result = (unsigned short)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSwapEndian__SWIG_2(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  unsigned int result;
  
  arg1 = (int)jarg1; 
  result = (unsigned int)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_btSwapEndian__SWIG_3(short jarg1) {
  unsigned short jresult ;
  short arg1 ;
  unsigned short result;
  
  arg1 = (short)jarg1; 
  result = (unsigned short)btSwapEndian(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSwapEndianFloat(float jarg1) {
  unsigned int jresult ;
  float arg1 ;
  unsigned int result;
  
  arg1 = (float)jarg1; 
  result = (unsigned int)btSwapEndianFloat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUnswapEndianFloat(unsigned int jarg1) {
  float jresult ;
  unsigned int arg1 ;
  float result;
  
  arg1 = (unsigned int)jarg1; 
  result = (float)btUnswapEndianFloat(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSwapEndianDouble(double jarg1, void * jarg2) {
  double arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (double)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  btSwapEndianDouble(arg1,arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_btUnswapEndianDouble(void * jarg1) {
  double jresult ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  double result;
  
  arg1 = (unsigned char *)jarg1; 
  result = (double)btUnswapEndianDouble((unsigned char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btLargeDot(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  btScalar *arg1 = (btScalar *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btScalar *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)btLargeDot((float const *)arg1,(float const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btNormalizeAngle(float jarg1) {
  float jresult ;
  btScalar arg1 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  result = (btScalar)btNormalizeAngle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTypedObject(int jarg1) {
  void * jresult ;
  int arg1 ;
  btTypedObject *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btTypedObject *)new btTypedObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedObject_m_objectType_set(void * jarg1, int jarg2) {
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedObject *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedObject_m_objectType_get(void * jarg1) {
  int jresult ;
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  arg1 = (btTypedObject *)jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedObject_getObjectType(void * jarg1) {
  int jresult ;
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  int result;
  
  arg1 = (btTypedObject *)jarg1; 
  result = (int)((btTypedObject const *)arg1)->getObjectType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedObject(void * jarg1) {
  btTypedObject *arg1 = (btTypedObject *) 0 ;
  
  arg1 = (btTypedObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAlignedAllocInternal(unsigned long jarg1, int jarg2) {
  void * jresult ;
  size_t arg1 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)btAlignedAllocInternal(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedFreeInternal(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  btAlignedFreeInternal(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedAllocSetCustom(void * jarg1, void * jarg2) {
  btAllocFunc *arg1 = (btAllocFunc *) 0 ;
  btFreeFunc *arg2 = (btFreeFunc *) 0 ;
  
  arg1 = (btAllocFunc *)jarg1; 
  arg2 = (btFreeFunc *)jarg2; 
  btAlignedAllocSetCustom(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAlignedAllocSetCustomAligned(void * jarg1, void * jarg2) {
  btAlignedAllocFunc *arg1 = (btAlignedAllocFunc *) 0 ;
  btAlignedFreeFunc *arg2 = (btAlignedFreeFunc *) 0 ;
  
  arg1 = (btAlignedAllocFunc *)jarg1; 
  arg2 = (btAlignedFreeFunc *)jarg2; 
  btAlignedAllocSetCustomAligned(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btVector3DataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btVector3FloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_m_floats_set(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_m_floats_get(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *)(btScalar *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3__SWIG_0() {
  void * jresult ;
  btVector3 *result = 0 ;
  
  result = (btVector3 *)new btVector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btVector3 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = (btVector3 *)new btVector3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_dot(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->dot((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_length2(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar)((btVector3 const *)arg1)->length2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_length(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar)((btVector3 const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_norm(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar)((btVector3 const *)arg1)->norm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_distance2(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->distance2((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_distance(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->distance((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_safeNormalize(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btVector3 *) &(arg1)->safeNormalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_normalize(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btVector3 *) &(arg1)->normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_normalized(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  result = ((btVector3 const *)arg1)->normalized();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_rotate(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = ((btVector3 const *)arg1)->rotate((btVector3 const &)*arg2,arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_angle(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->angle((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_absolute(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  result = ((btVector3 const *)arg1)->absolute();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_cross(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btVector3 const *)arg1)->cross((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_triple(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btVector3 const *)arg1)->triple((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_minAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->minAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_maxAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->maxAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_furthestAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->furthestAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector3_closestAxis(void * jarg1) {
  int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (int)((btVector3 const *)arg1)->closestAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setInterpolate3(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->setInterpolate3((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = ((btVector3 const *)arg1)->lerp((btVector3 const &)*arg2,(btScalar const &)*arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_getX(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->getX();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_getY(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->getY();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_getZ(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->getZ();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setX(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setY(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setZ(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setW(void * jarg1, float jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setW(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_x(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->x();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_y(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->y();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_z(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->z();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector3_w(void * jarg1) {
  float jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  result = (btScalar *) &((btVector3 const *)arg1)->w();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setMax(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMax((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setMin(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMin((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setValue(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btVector3 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_getSkewSymmetricMatrix(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  btVector3 *arg4 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (btVector3 *)jarg4; 
  ((btVector3 const *)arg1)->getSkewSymmetricMatrix(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_setZero(void * jarg1) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  (arg1)->setZero();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVector3_isZero(void * jarg1) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (bool)((btVector3 const *)arg1)->isZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btVector3_fuzzyZero(void * jarg1) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  result = (bool)((btVector3 const *)arg1)->fuzzyZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_serialize(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData & type is null", 0);
    return ;
  } 
  ((btVector3 const *)arg1)->serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_deSerialize(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerialize((btVector3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_serializeFloat(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData & type is null", 0);
    return ;
  } 
  ((btVector3 const *)arg1)->serializeFloat(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_deSerializeFloat(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3FloatData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeFloat((btVector3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_serializeDouble(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3DoubleData & type is null", 0);
    return ;
  } 
  ((btVector3 const *)arg1)->serializeDouble(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3_deSerializeDouble(void * jarg1, void * jarg2) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3DoubleData *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3DoubleData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeDouble((btVector3DoubleData const &)*arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_btVector3_maxDot(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  result = (long)((btVector3 const *)arg1)->maxDot((btVector3 const *)arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_btVector3_minDot(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  long jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  long arg3 ;
  btScalar *arg4 = 0 ;
  long result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  result = (long)((btVector3 const *)arg1)->minDot((btVector3 const *)arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3_dot3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btVector3 const *)arg1)->dot3((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector3(void * jarg1) {
  btVector3 *arg1 = (btVector3 *) 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDot(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btDot((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDistance2(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btDistance2((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDistance(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btDistance((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngle__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btAngle((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCross(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = btCross((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriple(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btTriple((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_lerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = lerp((btVector3 const &)*arg1,(btVector3 const &)*arg2,(float const &)*arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector4__SWIG_0() {
  void * jresult ;
  btVector4 *result = 0 ;
  
  result = (btVector4 *)new btVector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btVector4 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  result = (btVector4 *)new btVector4((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector4_absolute4(void * jarg1) {
  void * jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btVector4 result;
  
  arg1 = (btVector4 *)jarg1; 
  result = ((btVector4 const *)arg1)->absolute4();
  jresult = new btVector4((const btVector4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVector4_getW(void * jarg1) {
  float jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (btScalar)((btVector4 const *)arg1)->getW();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector4_maxAxis4(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (int)((btVector4 const *)arg1)->maxAxis4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector4_minAxis4(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (int)((btVector4 const *)arg1)->minAxis4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btVector4_closestAxis4(void * jarg1) {
  int jresult ;
  btVector4 *arg1 = (btVector4 *) 0 ;
  int result;
  
  arg1 = (btVector4 *)jarg1; 
  result = (int)((btVector4 const *)arg1)->closestAxis4();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector4_setValue(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btVector4 *arg1 = (btVector4 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  
  arg1 = (btVector4 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector4(void * jarg1) {
  btVector4 *arg1 = (btVector4 *) 0 ;
  
  arg1 = (btVector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSwapScalarEndian(float jarg1, void * jarg2) {
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp1 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  btSwapScalarEndian((float const &)*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSwapVector3Endian(void * jarg1, void * jarg2) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btSwapVector3Endian((btVector3 const &)*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUnSwapVector3Endian(void * jarg1) {
  btVector3 *arg1 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btUnSwapVector3Endian(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3FloatData_m_floats_set(void * jarg1, void * jarg2) {
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *arg2 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3FloatData_m_floats_get(void * jarg1) {
  void * jresult ;
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3FloatData() {
  void * jresult ;
  btVector3FloatData *result = 0 ;
  
  result = (btVector3FloatData *)new btVector3FloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector3FloatData(void * jarg1) {
  btVector3FloatData *arg1 = (btVector3FloatData *) 0 ;
  
  arg1 = (btVector3FloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVector3DoubleData_m_floats_set(void * jarg1, void * jarg2) {
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *arg2 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->m_floats;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVector3DoubleData_m_floats_get(void * jarg1) {
  void * jresult ;
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  double *result = 0 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  result = (double *)(double *) ((arg1)->m_floats);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVector3DoubleData() {
  void * jresult ;
  btVector3DoubleData *result = 0 ;
  
  result = (btVector3DoubleData *)new btVector3DoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVector3DoubleData(void * jarg1) {
  btVector3DoubleData *arg1 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btVector3DoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_getX(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->getX();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_getY(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->getY();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_getZ(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->getZ();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setX(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setY(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setZ(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setW(void * jarg1, float jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setW(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_x(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->x();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_y(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->y();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_z(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->z();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuadWord_w(void * jarg1) {
  float jresult ;
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  result = (btScalar *) &((btQuadWord const *)arg1)->w();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setValue__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btQuadWord *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setValue__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  
  arg1 = (btQuadWord *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuadWord__SWIG_0() {
  void * jresult ;
  btQuadWord *result = 0 ;
  
  result = (btQuadWord *)new btQuadWord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuadWord__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btQuadWord *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuadWord__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btQuadWord *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  result = (btQuadWord *)new btQuadWord((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setMax(void * jarg1, void * jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btQuadWord *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuadWord const & type is null", 0);
    return ;
  } 
  (arg1)->setMax((btQuadWord const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuadWord_setMin(void * jarg1, void * jarg2) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  btQuadWord *arg2 = 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  arg2 = (btQuadWord *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuadWord const & type is null", 0);
    return ;
  } 
  (arg1)->setMin((btQuadWord const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuadWord(void * jarg1) {
  btQuadWord *arg1 = (btQuadWord *) 0 ;
  
  arg1 = (btQuadWord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_0() {
  void * jresult ;
  btQuaternion *result = 0 ;
  
  result = (btQuaternion *)new btQuaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btQuaternion *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar temp2 ;
  btQuaternion *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  result = (btQuaternion *)new btQuaternion((btVector3 const &)*arg1,(btScalar const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuaternion__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btQuaternion *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = (btQuaternion *)new btQuaternion((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuaternion_setRotation(void * jarg1, void * jarg2, float jarg3) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  (arg1)->setRotation((btVector3 const &)*arg2,(btScalar const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuaternion_setEuler(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btQuaternion *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setEuler((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuaternion_setEulerZYX(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btQuaternion *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setEulerZYX((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_dot(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btQuaternion const *)arg1)->dot((btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_length2(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar)((btQuaternion const *)arg1)->length2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_length(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar)((btQuaternion const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_normalize(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btQuaternion *) &(arg1)->normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_normalized(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = ((btQuaternion const *)arg1)->normalized();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_angle(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btQuaternion const *)arg1)->angle((btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_angleShortestPath(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btQuaternion const *)arg1)->angleShortestPath((btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_getAngle(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar)((btQuaternion const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_getAngleShortestPath(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar)((btQuaternion const *)arg1)->getAngleShortestPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_getAxis(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btVector3 result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = ((btQuaternion const *)arg1)->getAxis();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_inverse(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  result = ((btQuaternion const *)arg1)->inverse();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_farthest(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((btQuaternion const *)arg1)->farthest((btQuaternion const &)*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_nearest(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = ((btQuaternion const *)arg1)->nearest((btQuaternion const &)*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = ((btQuaternion const *)arg1)->slerp((btQuaternion const &)*arg2,(btScalar const &)*arg3);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuaternion_getIdentity() {
  void * jresult ;
  btQuaternion *result = 0 ;
  
  result = (btQuaternion *) &btQuaternion::getIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btQuaternion_getW(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1; 
  result = (btScalar *) &((btQuaternion const *)arg1)->getW();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuaternion(void * jarg1) {
  btQuaternion *arg1 = (btQuaternion *) 0 ;
  
  arg1 = (btQuaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_dot(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)dot((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_length(void * jarg1) {
  float jresult ;
  btQuaternion *arg1 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)length((btQuaternion const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngle__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btScalar)btAngle((btQuaternion const &)*arg1,(btQuaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_inverse(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = inverse((btQuaternion const &)*arg1);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_slerp(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar temp3 ;
  btQuaternion result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  result = slerp((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,(float const &)*arg3);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_quatRotate(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = quatRotate((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_shortestArcQuat(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = shortestArcQuat((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_shortestArcQuatNormalize2(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  result = shortestArcQuatNormalize2(*arg1,*arg2);
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_0() {
  void * jresult ;
  btMatrix3x3 *result = 0 ;
  
  result = (btMatrix3x3 *)new btMatrix3x3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_1(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btMatrix3x3 *)new btMatrix3x3((btQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  btScalar *arg1 = 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btScalar temp1 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  btScalar temp6 ;
  btScalar temp7 ;
  btScalar temp8 ;
  btScalar temp9 ;
  btMatrix3x3 *result = 0 ;
  
  temp1 = (btScalar)jarg1; 
  arg1 = &temp1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  temp6 = (btScalar)jarg6; 
  arg6 = &temp6; 
  temp7 = (btScalar)jarg7; 
  arg7 = &temp7; 
  temp8 = (btScalar)jarg8; 
  arg8 = &temp8; 
  temp9 = (btScalar)jarg9; 
  arg9 = &temp9; 
  result = (btMatrix3x3 *)new btMatrix3x3((btScalar const &)*arg1,(btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3__SWIG_3(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = (btMatrix3x3 *)new btMatrix3x3((btMatrix3x3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_getColumn(void * jarg1, int jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((btMatrix3x3 const *)arg1)->getColumn(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_getRow(void * jarg1, int jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btVector3 *) &((btMatrix3x3 const *)arg1)->getRow(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setFromOpenGLSubMatrix(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  (arg1)->setFromOpenGLSubMatrix((btScalar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setValue(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btScalar *arg6 = 0 ;
  btScalar *arg7 = 0 ;
  btScalar *arg8 = 0 ;
  btScalar *arg9 = 0 ;
  btScalar *arg10 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  btScalar temp5 ;
  btScalar temp6 ;
  btScalar temp7 ;
  btScalar temp8 ;
  btScalar temp9 ;
  btScalar temp10 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  temp5 = (btScalar)jarg5; 
  arg5 = &temp5; 
  temp6 = (btScalar)jarg6; 
  arg6 = &temp6; 
  temp7 = (btScalar)jarg7; 
  arg7 = &temp7; 
  temp8 = (btScalar)jarg8; 
  arg8 = &temp8; 
  temp9 = (btScalar)jarg9; 
  arg9 = &temp9; 
  temp10 = (btScalar)jarg10; 
  arg10 = &temp10; 
  (arg1)->setValue((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4,(btScalar const &)*arg5,(btScalar const &)*arg6,(btScalar const &)*arg7,(btScalar const &)*arg8,(btScalar const &)*arg9,(btScalar const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setRotation(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setRotation((btQuaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setEulerYPR(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar temp2 ;
  btScalar temp3 ;
  btScalar temp4 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  temp2 = (btScalar)jarg2; 
  arg2 = &temp2; 
  temp3 = (btScalar)jarg3; 
  arg3 = &temp3; 
  temp4 = (btScalar)jarg4; 
  arg4 = &temp4; 
  (arg1)->setEulerYPR((btScalar const &)*arg2,(btScalar const &)*arg3,(btScalar const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setEulerZYX(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setEulerZYX(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_setIdentity(void * jarg1) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  (arg1)->setIdentity();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_getIdentity() {
  void * jresult ;
  btMatrix3x3 *result = 0 ;
  
  result = (btMatrix3x3 *) &btMatrix3x3::getIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getOpenGLSubMatrix(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  ((btMatrix3x3 const *)arg1)->getOpenGLSubMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getRotation(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->getRotation(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getEulerYPR(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg3 = (btScalar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->getEulerYPR(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getEulerZYX__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  unsigned int arg5 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg3 = (btScalar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg5 = (unsigned int)jarg5; 
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_getEulerZYX__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg3 = (btScalar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->getEulerZYX(*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_scaled(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btMatrix3x3 const *)arg1)->scaled((btVector3 const &)*arg2);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_determinant(void * jarg1) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = (btScalar)((btMatrix3x3 const *)arg1)->determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_adjoint(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->adjoint();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_absolute(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->absolute();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_transpose(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->transpose();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_inverse(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  result = ((btMatrix3x3 const *)arg1)->inverse();
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_transposeTimes(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = ((btMatrix3x3 const *)arg1)->transposeTimes((btMatrix3x3 const &)*arg2);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3_timesTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = ((btMatrix3x3 const *)arg1)->timesTranspose((btMatrix3x3 const &)*arg2);
  jresult = new btMatrix3x3((const btMatrix3x3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_tdotx(void * jarg1, void * jarg2) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotx((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_tdoty(void * jarg1, void * jarg2) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdoty((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_tdotz(void * jarg1, void * jarg2) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btMatrix3x3 const *)arg1)->tdotz((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_diagonalize(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->diagonalize(*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMatrix3x3_cofac(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  float jresult ;
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  btScalar result;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (btScalar)((btMatrix3x3 const *)arg1)->cofac(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_serialize(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_serializeFloat(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData & type is null", 0);
    return ;
  } 
  ((btMatrix3x3 const *)arg1)->serializeFloat(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_deSerialize(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerialize((btMatrix3x3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_deSerializeFloat(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3FloatData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3FloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeFloat((btMatrix3x3FloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3_deSerializeDouble(void * jarg1, void * jarg2) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  btMatrix3x3DoubleData *arg2 = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  arg2 = (btMatrix3x3DoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3DoubleData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeDouble((btMatrix3x3DoubleData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMatrix3x3(void * jarg1) {
  btMatrix3x3 *arg1 = (btMatrix3x3 *) 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3FloatData_m_el_set(void * jarg1, void * jarg2) {
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *arg2 ;
  
  arg1 = (btMatrix3x3FloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  {
    size_t ii;
    btVector3FloatData *b = (btVector3FloatData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3FloatData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3FloatData_m_el_get(void * jarg1) {
  void * jresult ;
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btMatrix3x3FloatData *)jarg1; 
  result = (btVector3FloatData *)(btVector3FloatData *) ((arg1)->m_el);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3FloatData() {
  void * jresult ;
  btMatrix3x3FloatData *result = 0 ;
  
  result = (btMatrix3x3FloatData *)new btMatrix3x3FloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMatrix3x3FloatData(void * jarg1) {
  btMatrix3x3FloatData *arg1 = (btMatrix3x3FloatData *) 0 ;
  
  arg1 = (btMatrix3x3FloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMatrix3x3DoubleData_m_el_set(void * jarg1, void * jarg2) {
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *arg2 ;
  
  arg1 = (btMatrix3x3DoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  {
    size_t ii;
    btVector3DoubleData *b = (btVector3DoubleData *) arg1->m_el;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btVector3DoubleData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMatrix3x3DoubleData_m_el_get(void * jarg1) {
  void * jresult ;
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btMatrix3x3DoubleData *)jarg1; 
  result = (btVector3DoubleData *)(btVector3DoubleData *) ((arg1)->m_el);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMatrix3x3DoubleData() {
  void * jresult ;
  btMatrix3x3DoubleData *result = 0 ;
  
  result = (btMatrix3x3DoubleData *)new btMatrix3x3DoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMatrix3x3DoubleData(void * jarg1) {
  btMatrix3x3DoubleData *arg1 = (btMatrix3x3DoubleData *) 0 ;
  
  arg1 = (btMatrix3x3DoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_0() {
  void * jresult ;
  btTransform *result = 0 ;
  
  result = (btTransform *)new btTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_2(void * jarg1) {
  void * jresult ;
  btQuaternion *arg1 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btQuaternion const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_4(void * jarg1) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btMatrix3x3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransform__SWIG_5(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btTransform *)new btTransform((btTransform const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_mult(void * jarg1, void * jarg2, void * jarg3) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->mult((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getBasis__SWIG_0(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  result = (btMatrix3x3 *) &(arg1)->getBasis();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getOrigin__SWIG_0(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  result = (btVector3 *) &(arg1)->getOrigin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getRotation(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion result;
  
  arg1 = (btTransform *)jarg1; 
  result = ((btTransform const *)arg1)->getRotation();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setFromOpenGLMatrix(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  (arg1)->setFromOpenGLMatrix((btScalar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_getOpenGLMatrix(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  ((btTransform const *)arg1)->getOpenGLMatrix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setOrigin(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setOrigin((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_invXform(void * jarg1, void * jarg2) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btTransform const *)arg1)->invXform((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setBasis(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btMatrix3x3 *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  (arg1)->setBasis((btMatrix3x3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setRotation(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setRotation((btQuaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_setIdentity(void * jarg1) {
  btTransform *arg1 = (btTransform *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  (arg1)->setIdentity();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_inverse(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform result;
  
  arg1 = (btTransform *)jarg1; 
  result = ((btTransform const *)arg1)->inverse();
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_inverseTimes(void * jarg1, void * jarg2) {
  void * jresult ;
  btTransform *arg1 = (btTransform *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform result;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = ((btTransform const *)arg1)->inverseTimes((btTransform const &)*arg2);
  jresult = new btTransform((const btTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransform_getIdentity() {
  void * jresult ;
  btTransform *result = 0 ;
  
  result = (btTransform *) &btTransform::getIdentity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_serialize(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData & type is null", 0);
    return ;
  } 
  ((btTransform const *)arg1)->serialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_serializeFloat(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData & type is null", 0);
    return ;
  } 
  ((btTransform const *)arg1)->serializeFloat(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_deSerialize(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerialize((btTransformFloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_deSerializeDouble(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformDoubleData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformDoubleData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeDouble((btTransformDoubleData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransform_deSerializeFloat(void * jarg1, void * jarg2) {
  btTransform *arg1 = (btTransform *) 0 ;
  btTransformFloatData *arg2 = 0 ;
  
  arg1 = (btTransform *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransformFloatData const & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeFloat((btTransformFloatData const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransform(void * jarg1) {
  btTransform *arg1 = (btTransform *) 0 ;
  
  arg1 = (btTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformFloatData_m_basis_set(void * jarg1, void * jarg2) {
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *arg2 = (btMatrix3x3FloatData *) 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2; 
  if (arg1) (arg1)->m_basis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformFloatData_m_basis_get(void * jarg1) {
  void * jresult ;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btMatrix3x3FloatData *result = 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  result = (btMatrix3x3FloatData *)& ((arg1)->m_basis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformFloatData_m_origin_set(void * jarg1, void * jarg2) {
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_origin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformFloatData_m_origin_get(void * jarg1) {
  void * jresult ;
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_origin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransformFloatData() {
  void * jresult ;
  btTransformFloatData *result = 0 ;
  
  result = (btTransformFloatData *)new btTransformFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransformFloatData(void * jarg1) {
  btTransformFloatData *arg1 = (btTransformFloatData *) 0 ;
  
  arg1 = (btTransformFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformDoubleData_m_basis_set(void * jarg1, void * jarg2) {
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *arg2 = (btMatrix3x3DoubleData *) 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  arg2 = (btMatrix3x3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_basis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformDoubleData_m_basis_get(void * jarg1) {
  void * jresult ;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btMatrix3x3DoubleData *result = 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  result = (btMatrix3x3DoubleData *)& ((arg1)->m_basis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformDoubleData_m_origin_set(void * jarg1, void * jarg2) {
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_origin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTransformDoubleData_m_origin_get(void * jarg1) {
  void * jresult ;
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_origin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransformDoubleData() {
  void * jresult ;
  btTransformDoubleData *result = 0 ;
  
  result = (btTransformDoubleData *)new btTransformDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransformDoubleData(void * jarg1) {
  btTransformDoubleData *arg1 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btTransformDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ACTIVE_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ISLAND_SLEEPING_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WANTS_DEACTIVATION_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DISABLE_DEACTIVATION_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DISABLE_SIMULATION_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMotionState(void * jarg1) {
  btMotionState *arg1 = (btMotionState *) 0 ;
  
  arg1 = (btMotionState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMotionState_getWorldTransform(void * jarg1, void * jarg2) {
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  ((btMotionState const *)arg1)->getWorldTransform(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMotionState_setWorldTransform(void * jarg1, void * jarg2) {
  btMotionState *arg1 = (btMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_USE_PLACEMENT_NEW_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btCollisionObjectFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_mergesSimulationIslands(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->mergesSimulationIslands();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getAnisotropicFriction(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getAnisotropicFriction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setAnisotropicFriction__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setAnisotropicFriction__SWIG_1(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAnisotropicFriction((btVector3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_hasAnisotropicFriction__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_hasAnisotropicFriction__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->hasAnisotropicFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setContactProcessingThreshold(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setContactProcessingThreshold(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getContactProcessingThreshold(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getContactProcessingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isStaticObject(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isStaticObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isKinematicObject(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isKinematicObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isStaticOrKinematicObject(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isStaticOrKinematicObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_hasContactResponse(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->hasContactResponse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionObject() {
  void * jresult ;
  btCollisionObject *result = 0 ;
  
  result = (btCollisionObject *)new btCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionObject(void * jarg1) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCollisionShape(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  (arg1)->setCollisionShape(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getCollisionShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btCollisionShape *)((btCollisionObject const *)arg1)->getCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setIgnoreCollisionCheck(void * jarg1, void * jarg2, unsigned int jarg3) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool arg3 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setIgnoreCollisionCheck((btCollisionObject const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_checkCollideWithOverride(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  result = (bool)((btCollisionObject const *)arg1)->checkCollideWithOverride((btCollisionObject const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_internalGetExtensionPointer(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (void *)((btCollisionObject const *)arg1)->internalGetExtensionPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_internalSetExtensionPointer(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->internalSetExtensionPointer(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getActivationState(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getActivationState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setActivationState(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  ((btCollisionObject const *)arg1)->setActivationState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setDeactivationTime(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDeactivationTime(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getDeactivationTime(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getDeactivationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_forceActivationState(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  ((btCollisionObject const *)arg1)->forceActivationState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_activate__SWIG_0(void * jarg1, unsigned int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ((btCollisionObject const *)arg1)->activate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_activate__SWIG_1(void * jarg1) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  ((btCollisionObject const *)arg1)->activate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_isActive(void * jarg1) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (bool)((btCollisionObject const *)arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setRestitution(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitution(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getRestitution(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setFriction(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getFriction(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setRollingFriction(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRollingFriction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getRollingFriction(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getRollingFriction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getInternalType(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getInternalType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getWorldTransform__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btTransform *) &(arg1)->getWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setWorldTransform(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getBroadphaseHandle__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btBroadphaseProxy *)(arg1)->getBroadphaseHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setBroadphaseHandle(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  (arg1)->setBroadphaseHandle(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getInterpolationWorldTransform__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btTransform *) &((btCollisionObject const *)arg1)->getInterpolationWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setInterpolationWorldTransform(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setInterpolationWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setInterpolationLinearVelocity(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setInterpolationLinearVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setInterpolationAngularVelocity(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setInterpolationAngularVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getInterpolationLinearVelocity(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationLinearVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getInterpolationAngularVelocity(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btVector3 *) &((btCollisionObject const *)arg1)->getInterpolationAngularVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getIslandTag(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getIslandTag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setIslandTag(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIslandTag(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getCompanionId(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getCompanionId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCompanionId(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCompanionId(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getHitFraction(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getHitFraction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setHitFraction(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setHitFraction(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getCollisionFlags(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getCollisionFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCollisionFlags(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setCollisionFlags(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getCcdSweptSphereRadius(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSweptSphereRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCcdSweptSphereRadius(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setCcdSweptSphereRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getCcdMotionThreshold(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdMotionThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObject_getCcdSquareMotionThreshold(void * jarg1) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btScalar)((btCollisionObject const *)arg1)->getCcdSquareMotionThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setCcdMotionThreshold(void * jarg1, float jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setCcdMotionThreshold(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObject_getUserPointer(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (void *)((btCollisionObject const *)arg1)->getUserPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getUserIndex(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getUserIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setUserPointer(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setUserPointer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_setUserIndex(void * jarg1, int jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUserIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_getUpdateRevisionInternal(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->getUpdateRevisionInternal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionObject_checkCollideWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  result = (bool)((btCollisionObject const *)arg1)->checkCollideWith((btCollisionObject const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObject_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  int result;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (int)((btCollisionObject const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObject_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCollisionObject const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObject_serializeSingleObject(void * jarg1, void * jarg2) {
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btCollisionObject const *)arg1)->serializeSingleObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_broadphaseHandle_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_broadphaseHandle_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rootCollisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rootCollisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_name_set(void * jarg1, char * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_name_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_worldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_worldTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_worldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_worldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationWorldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationWorldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_interpolationWorldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationLinearVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationLinearVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationLinearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationAngularVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_interpolationAngularVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_interpolationAngularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_anisotropicFriction_set(void * jarg1, void * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_anisotropicFriction_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_anisotropicFriction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_contactProcessingThreshold_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_contactProcessingThreshold_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_contactProcessingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_deactivationTime_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_deactivationTime_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_deactivationTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_friction_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_friction_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rollingFriction_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_rollingFriction_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_restitution_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_restitution_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hitFraction_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hitFraction_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_ccdSweptSphereRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdMotionThreshold_set(void * jarg1, double jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_ccdMotionThreshold_get(void * jarg1) {
  double jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  double result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (double) ((arg1)->m_ccdMotionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hasAnisotropicFriction_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_hasAnisotropicFriction_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionFlags_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_collisionFlags_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_islandTag1_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_islandTag1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_companionId_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_companionId_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_activationState1_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_activationState1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_internalType_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_internalType_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_checkCollideWith_set(void * jarg1, int jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_checkCollideWith_get(void * jarg1) {
  int jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_padding_set(void * jarg1, char * jarg2) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectDoubleData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionObjectDoubleData() {
  void * jresult ;
  btCollisionObjectDoubleData *result = 0 ;
  
  result = (btCollisionObjectDoubleData *)new btCollisionObjectDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionObjectDoubleData(void * jarg1) {
  btCollisionObjectDoubleData *arg1 = (btCollisionObjectDoubleData *) 0 ;
  
  arg1 = (btCollisionObjectDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_broadphaseHandle_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_broadphaseHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_broadphaseHandle_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (void *) ((arg1)->m_broadphaseHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (void *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rootCollisionShape_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_rootCollisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rootCollisionShape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_rootCollisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_name_set(void * jarg1, char * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_name_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_worldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_worldTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_worldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_worldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationWorldTransform_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_interpolationWorldTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationWorldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_interpolationWorldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationLinearVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_interpolationLinearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationLinearVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_interpolationLinearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationAngularVelocity_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_interpolationAngularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_interpolationAngularVelocity_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_interpolationAngularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_anisotropicFriction_set(void * jarg1, void * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_anisotropicFriction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_anisotropicFriction_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_anisotropicFriction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_contactProcessingThreshold_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_contactProcessingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_contactProcessingThreshold_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_contactProcessingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_deactivationTime_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_deactivationTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_deactivationTime_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_deactivationTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_friction_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_friction_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rollingFriction_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_rollingFriction_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_restitution_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_restitution_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hitFraction_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hitFraction_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdSweptSphereRadius_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdSweptSphereRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdSweptSphereRadius_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_ccdSweptSphereRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdMotionThreshold_set(void * jarg1, float jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ccdMotionThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_ccdMotionThreshold_get(void * jarg1) {
  float jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  float result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (float) ((arg1)->m_ccdMotionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hasAnisotropicFriction_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hasAnisotropicFriction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_hasAnisotropicFriction_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_hasAnisotropicFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionFlags_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_collisionFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_collisionFlags_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_collisionFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_islandTag1_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_islandTag1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_islandTag1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_islandTag1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_companionId_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_companionId_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_companionId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_activationState1_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_activationState1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_activationState1_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_activationState1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_internalType_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_internalType_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_internalType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_checkCollideWith_set(void * jarg1, int jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_checkCollideWith = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_checkCollideWith_get(void * jarg1) {
  int jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (int) ((arg1)->m_checkCollideWith);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_padding_set(void * jarg1, char * jarg2) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionObjectFloatData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionObjectFloatData() {
  void * jresult ;
  btCollisionObjectFloatData *result = 0 ;
  
  result = (btCollisionObjectFloatData *)new btCollisionObjectFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionObjectFloatData(void * jarg1) {
  btCollisionObjectFloatData *arg1 = (btCollisionObjectFloatData *) 0 ;
  
  arg1 = (btCollisionObjectFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDispatcherInfo() {
  void * jresult ;
  btDispatcherInfo *result = 0 ;
  
  result = (btDispatcherInfo *)new btDispatcherInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_timeStep_set(void * jarg1, float jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_timeStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDispatcherInfo_m_timeStep_get(void * jarg1) {
  float jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_timeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_stepCount_set(void * jarg1, int jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_stepCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDispatcherInfo_m_stepCount_get(void * jarg1) {
  int jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (int) ((arg1)->m_stepCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_dispatchFunc_set(void * jarg1, int jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dispatchFunc = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDispatcherInfo_m_dispatchFunc_get(void * jarg1) {
  int jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  int result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (int) ((arg1)->m_dispatchFunc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_timeOfImpact_set(void * jarg1, float jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_timeOfImpact = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDispatcherInfo_m_timeOfImpact_get(void * jarg1) {
  float jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_timeOfImpact);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_useContinuous_set(void * jarg1, unsigned int jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_useContinuous = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDispatcherInfo_m_useContinuous_get(void * jarg1) {
  unsigned int jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (bool) ((arg1)->m_useContinuous);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_debugDraw_set(void * jarg1, void * jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  if (arg1) (arg1)->m_debugDraw = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcherInfo_m_debugDraw_get(void * jarg1) {
  void * jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btIDebugDraw *result = 0 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (btIDebugDraw *) ((arg1)->m_debugDraw);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_enableSatConvex_set(void * jarg1, unsigned int jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableSatConvex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDispatcherInfo_m_enableSatConvex_get(void * jarg1) {
  unsigned int jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (bool) ((arg1)->m_enableSatConvex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_enableSPU_set(void * jarg1, unsigned int jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableSPU = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDispatcherInfo_m_enableSPU_get(void * jarg1) {
  unsigned int jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (bool) ((arg1)->m_enableSPU);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_useEpa_set(void * jarg1, unsigned int jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_useEpa = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDispatcherInfo_m_useEpa_get(void * jarg1) {
  unsigned int jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (bool) ((arg1)->m_useEpa);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_allowedCcdPenetration_set(void * jarg1, float jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_allowedCcdPenetration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDispatcherInfo_m_allowedCcdPenetration_get(void * jarg1) {
  float jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_allowedCcdPenetration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_useConvexConservativeDistanceUtil_set(void * jarg1, unsigned int jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_useConvexConservativeDistanceUtil = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDispatcherInfo_m_useConvexConservativeDistanceUtil_get(void * jarg1) {
  unsigned int jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  bool result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (bool) ((arg1)->m_useConvexConservativeDistanceUtil);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcherInfo_m_convexConservativeDistanceThreshold_set(void * jarg1, float jarg2) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_convexConservativeDistanceThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDispatcherInfo_m_convexConservativeDistanceThreshold_get(void * jarg1) {
  float jresult ;
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  btScalar result;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_convexConservativeDistanceThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDispatcherInfo(void * jarg1) {
  btDispatcherInfo *arg1 = (btDispatcherInfo *) 0 ;
  
  arg1 = (btDispatcherInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDispatcher(void * jarg1) {
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcher_findAlgorithm__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btPersistentManifold *arg4 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btPersistentManifold *)jarg4; 
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcher_findAlgorithm__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcher_getNewManifold(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (btPersistentManifold *)(arg1)->getNewManifold((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcher_releaseManifold(void * jarg1, void * jarg2) {
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  (arg1)->releaseManifold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcher_clearManifold(void * jarg1, void * jarg2) {
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  (arg1)->clearManifold(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDispatcher_needsCollision(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (bool)(arg1)->needsCollision((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDispatcher_needsResponse(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (bool)(arg1)->needsResponse((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcher_dispatchAllCollisionPairs(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btDispatcherInfo *arg3 = 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btOverlappingPairCache *)jarg2; 
  arg3 = (btDispatcherInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg4 = (btDispatcher *)jarg4; 
  (arg1)->dispatchAllCollisionPairs(arg2,(btDispatcherInfo const &)*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDispatcher_getNumManifolds(void * jarg1) {
  int jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int result;
  
  arg1 = (btDispatcher *)jarg1; 
  result = (int)((btDispatcher const *)arg1)->getNumManifolds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcher_getManifoldByIndexInternal(void * jarg1, int jarg2) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btPersistentManifold *)(arg1)->getManifoldByIndexInternal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcher_getInternalManifoldPointer(void * jarg1) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPersistentManifold **result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  result = (btPersistentManifold **)(arg1)->getInternalManifoldPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcher_getInternalManifoldPool__SWIG_0(void * jarg1) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getInternalManifoldPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDispatcher_allocateCollisionAlgorithm(void * jarg1, int jarg2) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)(arg1)->allocateCollisionAlgorithm(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDispatcher_freeCollisionAlgorithm(void * jarg1, void * jarg2) {
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->freeCollisionAlgorithm(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btAabbSupport(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = btAabbSupport((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_integrateTransform(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  btTransform *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btTransform *arg5 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  btTransformUtil::integrateTransform((btTransform const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateVelocityQuaternion(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btQuaternion *arg3 = 0 ;
  btQuaternion *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btQuaternion *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg4 = (btQuaternion *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateVelocityQuaternion((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btQuaternion const &)*arg3,(btQuaternion const &)*arg4,arg5,*arg6,*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateDiffAxisAngleQuaternion(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btQuaternion *arg1 = 0 ;
  btQuaternion *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btQuaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateDiffAxisAngleQuaternion((btQuaternion const &)*arg1,(btQuaternion const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateVelocity(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateVelocity((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformUtil_calculateDiffAxisAngle(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  btTransformUtil::calculateDiffAxisAngle((btTransform const &)*arg1,(btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTransformUtil() {
  void * jresult ;
  btTransformUtil *result = 0 ;
  
  result = (btTransformUtil *)new btTransformUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTransformUtil(void * jarg1) {
  btTransformUtil *arg1 = (btTransformUtil *) 0 ;
  
  arg1 = (btTransformUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexSeparatingDistanceUtil(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConvexSeparatingDistanceUtil *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConvexSeparatingDistanceUtil *)new btConvexSeparatingDistanceUtil(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance(void * jarg1) {
  float jresult ;
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btScalar result;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  result = (btScalar)(arg1)->getConservativeSeparatingDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexSeparatingDistanceUtil_updateSeparatingDistance(void * jarg1, void * jarg2, void * jarg3) {
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->updateSeparatingDistance((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexSeparatingDistanceUtil_initSeparatingDistance(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btTransform *arg5 = 0 ;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->initSeparatingDistance((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btTransform const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexSeparatingDistanceUtil(void * jarg1) {
  btConvexSeparatingDistanceUtil *arg1 = (btConvexSeparatingDistanceUtil *) 0 ;
  
  arg1 = (btConvexSeparatingDistanceUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintRow_m_normal_set(void * jarg1, void * jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  {
    size_t ii;
    btScalar *b = (btScalar *) arg1->m_normal;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((btScalar *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConstraintRow_m_normal_get(void * jarg1) {
  void * jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar *)(btScalar *) ((arg1)->m_normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintRow_m_rhs_set(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rhs = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintRow_m_rhs_get(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_rhs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintRow_m_jacDiagInv_set(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_jacDiagInv = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintRow_m_jacDiagInv_get(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_jacDiagInv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintRow_m_lowerLimit_set(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintRow_m_lowerLimit_get(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintRow_m_upperLimit_set(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintRow_m_upperLimit_get(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintRow_m_accumImpulse_set(void * jarg1, float jarg2) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_accumImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintRow_m_accumImpulse_get(void * jarg1) {
  float jresult ;
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintRow *)jarg1; 
  result = (btScalar) ((arg1)->m_accumImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConstraintRow() {
  void * jresult ;
  btConstraintRow *result = 0 ;
  
  result = (btConstraintRow *)new btConstraintRow();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConstraintRow(void * jarg1) {
  btConstraintRow *arg1 = (btConstraintRow *) 0 ;
  
  arg1 = (btConstraintRow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btManifoldPoint__SWIG_0() {
  void * jresult ;
  btManifoldPoint *result = 0 ;
  
  result = (btManifoldPoint *)new btManifoldPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btManifoldPoint__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btManifoldPoint *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  result = (btManifoldPoint *)new btManifoldPoint((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_localPointA_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_localPointA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_localPointA_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_localPointA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_localPointB_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_localPointB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_localPointB_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_localPointB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_positionWorldOnB_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_positionWorldOnB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_positionWorldOnB_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_positionWorldOnB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_positionWorldOnA_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_positionWorldOnA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_positionWorldOnA_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_positionWorldOnA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_normalWorldOnB_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_normalWorldOnB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_normalWorldOnB_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_normalWorldOnB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_distance1_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_distance1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_distance1_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_distance1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_combinedFriction_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_combinedFriction_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_combinedRollingFriction_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedRollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_combinedRollingFriction_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedRollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_combinedRestitution_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_combinedRestitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_combinedRestitution_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_combinedRestitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_partId0_set(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_partId0 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btManifoldPoint_m_partId0_get(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_partId0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_partId1_set(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_partId1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btManifoldPoint_m_partId1_get(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_partId1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_index0_set(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_index0 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btManifoldPoint_m_index0_get(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_index0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_index1_set(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_index1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btManifoldPoint_m_index1_get(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_index1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_userPersistentData_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_userPersistentData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_userPersistentData_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  void *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (void *) ((arg1)->m_userPersistentData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_lateralFrictionInitialized_set(void * jarg1, unsigned int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  bool arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_lateralFrictionInitialized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btManifoldPoint_m_lateralFrictionInitialized_get(void * jarg1) {
  unsigned int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  bool result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (bool) ((arg1)->m_lateralFrictionInitialized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_appliedImpulse_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_appliedImpulse_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_appliedImpulseLateral1_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedImpulseLateral1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_appliedImpulseLateral1_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedImpulseLateral1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_appliedImpulseLateral2_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedImpulseLateral2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_appliedImpulseLateral2_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedImpulseLateral2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_contactMotion1_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactMotion1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_contactMotion1_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactMotion1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_contactMotion2_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactMotion2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_contactMotion2_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactMotion2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_contactCFM1_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactCFM1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_contactCFM1_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactCFM1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_contactCFM2_set(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_contactCFM2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_m_contactCFM2_get(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar) ((arg1)->m_contactCFM2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_lifeTime_set(void * jarg1, int jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_lifeTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btManifoldPoint_m_lifeTime_get(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int) ((arg1)->m_lifeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_lateralFrictionDir1_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_lateralFrictionDir1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_lateralFrictionDir1_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_m_lateralFrictionDir2_set(void * jarg1, void * jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_lateralFrictionDir2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_m_lateralFrictionDir2_get(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_lateralFrictionDir2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_getDistance(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar)((btManifoldPoint const *)arg1)->getDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btManifoldPoint_getLifeTime(void * jarg1) {
  int jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  int result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (int)((btManifoldPoint const *)arg1)->getLifeTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_getPositionWorldOnA(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldPoint_getPositionWorldOnB(void * jarg1) {
  void * jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btVector3 *) &((btManifoldPoint const *)arg1)->getPositionWorldOnB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldPoint_setDistance(void * jarg1, float jarg2) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDistance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldPoint_getAppliedImpulse(void * jarg1) {
  float jresult ;
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  btScalar result;
  
  arg1 = (btManifoldPoint *)jarg1; 
  result = (btScalar)((btManifoldPoint const *)arg1)->getAppliedImpulse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btManifoldPoint(void * jarg1) {
  btManifoldPoint *arg1 = (btManifoldPoint *) 0 ;
  
  arg1 = (btManifoldPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gContactBreakingThreshold_set(float jarg1) {
  btScalar arg1 ;
  
  arg1 = (btScalar)jarg1; 
  gContactBreakingThreshold = arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_gContactBreakingThreshold_get() {
  float jresult ;
  btScalar result;
  
  result = (btScalar)gContactBreakingThreshold;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gContactDestroyedCallback_set(void * jarg1) {
  ContactDestroyedCallback arg1 = (ContactDestroyedCallback) 0 ;
  
  arg1 = (ContactDestroyedCallback)jarg1; 
  gContactDestroyedCallback = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gContactDestroyedCallback_get() {
  void * jresult ;
  ContactDestroyedCallback result;
  
  result = (ContactDestroyedCallback)gContactDestroyedCallback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gContactProcessedCallback_set(void * jarg1) {
  ContactProcessedCallback arg1 = (ContactProcessedCallback) 0 ;
  
  arg1 = (ContactProcessedCallback)jarg1; 
  gContactProcessedCallback = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gContactProcessedCallback_get() {
  void * jresult ;
  ContactProcessedCallback result;
  
  result = (ContactProcessedCallback)gContactProcessedCallback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MANIFOLD_CACHE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_m_companionIdA_set(void * jarg1, int jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionIdA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPersistentManifold_m_companionIdA_get(void * jarg1) {
  int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (int) ((arg1)->m_companionIdA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_m_companionIdB_set(void * jarg1, int jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_companionIdB = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPersistentManifold_m_companionIdB_get(void * jarg1) {
  int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (int) ((arg1)->m_companionIdB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_m_index1a_set(void * jarg1, int jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_index1a = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPersistentManifold_m_index1a_get(void * jarg1) {
  int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (int) ((arg1)->m_index1a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPersistentManifold__SWIG_0() {
  void * jresult ;
  btPersistentManifold *result = 0 ;
  
  result = (btPersistentManifold *)new btPersistentManifold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPersistentManifold__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  int arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  result = (btPersistentManifold *)new btPersistentManifold((btCollisionObject const *)arg1,(btCollisionObject const *)arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPersistentManifold_getBody0(void * jarg1) {
  void * jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (btCollisionObject *)((btPersistentManifold const *)arg1)->getBody0();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPersistentManifold_getBody1(void * jarg1) {
  void * jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (btCollisionObject *)((btPersistentManifold const *)arg1)->getBody1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_setBodies(void * jarg1, void * jarg2, void * jarg3) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  (arg1)->setBodies((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_clearUserCache(void * jarg1, void * jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint & type is null", 0);
    return ;
  } 
  (arg1)->clearUserCache(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPersistentManifold_getNumContacts(void * jarg1) {
  int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (int)((btPersistentManifold const *)arg1)->getNumContacts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_setNumContacts(void * jarg1, int jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumContacts(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPersistentManifold_getContactPoint__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  btManifoldPoint *result = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btManifoldPoint *) &((btPersistentManifold const *)arg1)->getContactPoint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPersistentManifold_getContactBreakingThreshold(void * jarg1) {
  float jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (btScalar)((btPersistentManifold const *)arg1)->getContactBreakingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPersistentManifold_getContactProcessingThreshold(void * jarg1) {
  float jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  result = (btScalar)((btPersistentManifold const *)arg1)->getContactProcessingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_setContactBreakingThreshold(void * jarg1, float jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setContactBreakingThreshold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_setContactProcessingThreshold(void * jarg1, float jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setContactProcessingThreshold(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPersistentManifold_getCacheEntry(void * jarg1, void * jarg2) {
  int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint const & type is null", 0);
    return 0;
  } 
  result = (int)((btPersistentManifold const *)arg1)->getCacheEntry((btManifoldPoint const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPersistentManifold_addManifoldPoint__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->addManifoldPoint((btManifoldPoint const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPersistentManifold_addManifoldPoint__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint const & type is null", 0);
    return 0;
  } 
  result = (int)(arg1)->addManifoldPoint((btManifoldPoint const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_removeContactPoint(void * jarg1, int jarg2) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  int arg2 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeContactPoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_replaceContactPoint(void * jarg1, void * jarg2, int jarg3) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->replaceContactPoint((btManifoldPoint const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPersistentManifold_validContactDistance(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  bool result;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint const & type is null", 0);
    return 0;
  } 
  result = (bool)((btPersistentManifold const *)arg1)->validContactDistance((btManifoldPoint const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_refreshContactPoints(void * jarg1, void * jarg2, void * jarg3) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->refreshContactPoints((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPersistentManifold_clearManifold(void * jarg1) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  (arg1)->clearManifold();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPersistentManifold(void * jarg1) {
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDiscreteCollisionDetectorInterface_Result(void * jarg1) {
  btDiscreteCollisionDetectorInterface::Result *arg1 = (btDiscreteCollisionDetectorInterface::Result *) 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::Result *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_Result_setShapeIdentifiersA(void * jarg1, int jarg2, int jarg3) {
  btDiscreteCollisionDetectorInterface::Result *arg1 = (btDiscreteCollisionDetectorInterface::Result *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::Result *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setShapeIdentifiersA(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_Result_setShapeIdentifiersB(void * jarg1, int jarg2, int jarg3) {
  btDiscreteCollisionDetectorInterface::Result *arg1 = (btDiscreteCollisionDetectorInterface::Result *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::Result *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setShapeIdentifiersB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_Result_addContactPoint(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btDiscreteCollisionDetectorInterface::Result *arg1 = (btDiscreteCollisionDetectorInterface::Result *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::Result *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->addContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDiscreteCollisionDetectorInterface_ClosestPointInput() {
  void * jresult ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *result = 0 ;
  
  result = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)new btDiscreteCollisionDetectorInterface::ClosestPointInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformA_set(void * jarg1, void * jarg2) {
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_transformA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformA_get(void * jarg1) {
  void * jresult ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg1; 
  result = (btTransform *)& ((arg1)->m_transformA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformB_set(void * jarg1, void * jarg2) {
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_transformB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformB_get(void * jarg1) {
  void * jresult ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg1; 
  result = (btTransform *)& ((arg1)->m_transformB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_ClosestPointInput_m_maximumDistanceSquared_set(void * jarg1, float jarg2) {
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maximumDistanceSquared = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_ClosestPointInput_m_maximumDistanceSquared_get(void * jarg1) {
  float jresult ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *) 0 ;
  btScalar result;
  
  arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg1; 
  result = (btScalar) ((arg1)->m_maximumDistanceSquared);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDiscreteCollisionDetectorInterface_ClosestPointInput(void * jarg1) {
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *) 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDiscreteCollisionDetectorInterface(void * jarg1) {
  btDiscreteCollisionDetectorInterface *arg1 = (btDiscreteCollisionDetectorInterface *) 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  btDiscreteCollisionDetectorInterface *arg1 = (btDiscreteCollisionDetectorInterface *) 0 ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg2 = 0 ;
  btDiscreteCollisionDetectorInterface::Result *arg3 = 0 ;
  btIDebugDraw *arg4 = (btIDebugDraw *) 0 ;
  bool arg5 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface *)jarg1; 
  arg2 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDiscreteCollisionDetectorInterface::ClosestPointInput const & type is null", 0);
    return ;
  } 
  arg3 = (btDiscreteCollisionDetectorInterface::Result *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDiscreteCollisionDetectorInterface::Result & type is null", 0);
    return ;
  } 
  arg4 = (btIDebugDraw *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->getClosestPoints((btDiscreteCollisionDetectorInterface::ClosestPointInput const &)*arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDiscreteCollisionDetectorInterface *arg1 = (btDiscreteCollisionDetectorInterface *) 0 ;
  btDiscreteCollisionDetectorInterface::ClosestPointInput *arg2 = 0 ;
  btDiscreteCollisionDetectorInterface::Result *arg3 = 0 ;
  btIDebugDraw *arg4 = (btIDebugDraw *) 0 ;
  
  arg1 = (btDiscreteCollisionDetectorInterface *)jarg1; 
  arg2 = (btDiscreteCollisionDetectorInterface::ClosestPointInput *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDiscreteCollisionDetectorInterface::ClosestPointInput const & type is null", 0);
    return ;
  } 
  arg3 = (btDiscreteCollisionDetectorInterface::Result *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDiscreteCollisionDetectorInterface::Result & type is null", 0);
    return ;
  } 
  arg4 = (btIDebugDraw *)jarg4; 
  (arg1)->getClosestPoints((btDiscreteCollisionDetectorInterface::ClosestPointInput const &)*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStorageResult_m_normalOnSurfaceB_set(void * jarg1, void * jarg2) {
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btStorageResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_normalOnSurfaceB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStorageResult_m_normalOnSurfaceB_get(void * jarg1) {
  void * jresult ;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btStorageResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_normalOnSurfaceB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStorageResult_m_closestPointInB_set(void * jarg1, void * jarg2) {
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btStorageResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_closestPointInB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStorageResult_m_closestPointInB_get(void * jarg1) {
  void * jresult ;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btStorageResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_closestPointInB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStorageResult_m_distance_set(void * jarg1, float jarg2) {
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btStorageResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btStorageResult_m_distance_get(void * jarg1) {
  float jresult ;
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btScalar result;
  
  arg1 = (btStorageResult *)jarg1; 
  result = (btScalar) ((arg1)->m_distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStorageResult(void * jarg1) {
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  
  arg1 = (btStorageResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStorageResult_addContactPoint(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btStorageResult *arg1 = (btStorageResult *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btStorageResult *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->addContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_parent_set(void * jarg1, void * jarg2) {
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  if (arg1) (arg1)->m_parent = (btCollisionObjectWrapper const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_parent_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (btCollisionObjectWrapper *) ((arg1)->m_parent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_shape_set(void * jarg1, void * jarg2) {
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  if (arg1) (arg1)->m_shape = (btCollisionShape const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_shape_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (btCollisionShape *) ((arg1)->m_shape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_collisionObject_set(void * jarg1, void * jarg2) {
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_collisionObject_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_worldTransform_get(void * jarg1) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (btTransform *) &(btTransform const &) ((arg1)->m_worldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_partId_set(void * jarg1, int jarg2) {
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_partId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_partId_get(void * jarg1) {
  int jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (int) ((arg1)->m_partId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_index_set(void * jarg1, int jarg2) {
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionObjectWrapper_m_index_get(void * jarg1) {
  int jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  int result;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (int) ((arg1)->m_index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionObjectWrapper(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btTransform *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  btCollisionObjectWrapper *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (btCollisionObjectWrapper *)new btCollisionObjectWrapper((btCollisionObjectWrapper const *)arg1,(btCollisionShape const *)arg2,(btCollisionObject const *)arg3,(btTransform const &)*arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectWrapper_getWorldTransform(void * jarg1) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (btTransform *) &((btCollisionObjectWrapper const *)arg1)->getWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectWrapper_getCollisionObject(void * jarg1) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (btCollisionObject *)((btCollisionObjectWrapper const *)arg1)->getCollisionObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionObjectWrapper_getCollisionShape(void * jarg1) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  result = (btCollisionShape *)((btCollisionObjectWrapper const *)arg1)->getCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionObjectWrapper(void * jarg1) {
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gContactAddedCallback_set(void * jarg1) {
  ContactAddedCallback arg1 = (ContactAddedCallback) 0 ;
  
  arg1 = (ContactAddedCallback)jarg1; 
  gContactAddedCallback = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gContactAddedCallback_get() {
  void * jresult ;
  ContactAddedCallback result;
  
  result = (ContactAddedCallback)gContactAddedCallback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btManifoldResult__SWIG_0() {
  void * jresult ;
  btManifoldResult *result = 0 ;
  
  result = (btManifoldResult *)new btManifoldResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btManifoldResult__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btCollisionObjectWrapper *arg1 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btManifoldResult *result = 0 ;
  
  arg1 = (btCollisionObjectWrapper *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  result = (btManifoldResult *)new btManifoldResult((btCollisionObjectWrapper const *)arg1,(btCollisionObjectWrapper const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btManifoldResult(void * jarg1) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldResult_setPersistentManifold(void * jarg1, void * jarg2) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  (arg1)->setPersistentManifold(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldResult_getPersistentManifold__SWIG_0(void * jarg1) {
  void * jresult ;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  result = (btPersistentManifold *)((btManifoldResult const *)arg1)->getPersistentManifold();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldResult_setShapeIdentifiersA(void * jarg1, int jarg2, int jarg3) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setShapeIdentifiersA(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldResult_setShapeIdentifiersB(void * jarg1, int jarg2, int jarg3) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setShapeIdentifiersB(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldResult_addContactPoint(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->addContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldResult_refreshContactPoints(void * jarg1) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  (arg1)->refreshContactPoints();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldResult_getBody0Wrap(void * jarg1) {
  void * jresult ;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  result = (btCollisionObjectWrapper *)((btManifoldResult const *)arg1)->getBody0Wrap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldResult_getBody1Wrap(void * jarg1) {
  void * jresult ;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *result = 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  result = (btCollisionObjectWrapper *)((btManifoldResult const *)arg1)->getBody1Wrap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldResult_setBody0Wrap(void * jarg1, void * jarg2) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  (arg1)->setBody0Wrap((btCollisionObjectWrapper const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btManifoldResult_setBody1Wrap(void * jarg1, void * jarg2) {
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  (arg1)->setBody1Wrap((btCollisionObjectWrapper const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldResult_getBody0Internal(void * jarg1) {
  void * jresult ;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  result = (btCollisionObject *)((btManifoldResult const *)arg1)->getBody0Internal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btManifoldResult_getBody1Internal(void * jarg1) {
  void * jresult ;
  btManifoldResult *arg1 = (btManifoldResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btManifoldResult *)jarg1; 
  result = (btCollisionObject *)((btManifoldResult const *)arg1)->getBody1Internal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldResult_calculateCombinedRestitution(void * jarg1, void * jarg2) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  result = (btScalar)btManifoldResult::calculateCombinedRestitution((btCollisionObject const *)arg1,(btCollisionObject const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btManifoldResult_calculateCombinedFriction(void * jarg1, void * jarg2) {
  float jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  result = (btScalar)btManifoldResult::calculateCombinedFriction((btCollisionObject const *)arg1,(btCollisionObject const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseProxy_m_clientObject_set(void * jarg1, void * jarg2) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_clientObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseProxy_m_clientObject_get(void * jarg1) {
  void * jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (void *) ((arg1)->m_clientObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseProxy_m_collisionFilterGroup_set(void * jarg1, short jarg2) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short arg2 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btBroadphaseProxy_m_collisionFilterGroup_get(void * jarg1) {
  short jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short result;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseProxy_m_collisionFilterMask_set(void * jarg1, short jarg2) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short arg2 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btBroadphaseProxy_m_collisionFilterMask_get(void * jarg1) {
  short jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  short result;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseProxy_m_multiSapParentProxy_set(void * jarg1, void * jarg2) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_multiSapParentProxy = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseProxy_m_multiSapParentProxy_get(void * jarg1) {
  void * jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  void *result = 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (void *) ((arg1)->m_multiSapParentProxy);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseProxy_m_uniqueId_set(void * jarg1, int jarg2) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_uniqueId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBroadphaseProxy_m_uniqueId_get(void * jarg1) {
  int jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int result;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (int) ((arg1)->m_uniqueId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseProxy_m_aabbMin_set(void * jarg1, void * jarg2) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_aabbMin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseProxy_m_aabbMin_get(void * jarg1) {
  void * jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_aabbMin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseProxy_m_aabbMax_set(void * jarg1, void * jarg2) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_aabbMax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseProxy_m_aabbMax_get(void * jarg1) {
  void * jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_aabbMax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBroadphaseProxy_getUid(void * jarg1) {
  int jresult ;
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  int result;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  result = (int)((btBroadphaseProxy const *)arg1)->getUid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBroadphaseProxy__SWIG_0() {
  void * jresult ;
  btBroadphaseProxy *result = 0 ;
  
  result = (btBroadphaseProxy *)new btBroadphaseProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBroadphaseProxy__SWIG_1(void * jarg1, void * jarg2, void * jarg3, short jarg4, short jarg5, void * jarg6) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  void *arg6 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  arg4 = (short)jarg4; 
  arg5 = (short)jarg5; 
  arg6 = (void *)jarg6; 
  result = (btBroadphaseProxy *)new btBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBroadphaseProxy__SWIG_2(void * jarg1, void * jarg2, void * jarg3, short jarg4, short jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  arg4 = (short)jarg4; 
  arg5 = (short)jarg5; 
  result = (btBroadphaseProxy *)new btBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isPolyhedral(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isPolyhedral(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isConvex(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isConvex(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isNonMoving(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isNonMoving(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isConcave(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isConcave(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isCompound(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isCompound(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isSoftBody(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isSoftBody(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isInfinite(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isInfinite(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseProxy_isConvex2d(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)btBroadphaseProxy::isConvex2d(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBroadphaseProxy(void * jarg1) {
  btBroadphaseProxy *arg1 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBroadphasePair__SWIG_0() {
  void * jresult ;
  btBroadphasePair *result = 0 ;
  
  result = (btBroadphasePair *)new btBroadphasePair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBroadphasePair__SWIG_1(void * jarg1) {
  void * jresult ;
  btBroadphasePair *arg1 = 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btBroadphasePair *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair const & type is null", 0);
    return 0;
  } 
  result = (btBroadphasePair *)new btBroadphasePair((btBroadphasePair const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBroadphasePair__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  btBroadphaseProxy *arg1 = 0 ;
  btBroadphaseProxy *arg2 = 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btBroadphaseProxy *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseProxy & type is null", 0);
    return 0;
  } 
  arg2 = (btBroadphaseProxy *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseProxy & type is null", 0);
    return 0;
  } 
  result = (btBroadphasePair *)new btBroadphasePair(*arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphasePair_m_pProxy0_set(void * jarg1, void * jarg2) {
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  if (arg1) (arg1)->m_pProxy0 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphasePair_m_pProxy0_get(void * jarg1) {
  void * jresult ;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  result = (btBroadphaseProxy *) ((arg1)->m_pProxy0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphasePair_m_pProxy1_set(void * jarg1, void * jarg2) {
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  if (arg1) (arg1)->m_pProxy1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphasePair_m_pProxy1_get(void * jarg1) {
  void * jresult ;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  result = (btBroadphaseProxy *) ((arg1)->m_pProxy1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphasePair_m_algorithm_set(void * jarg1, void * jarg2) {
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btCollisionAlgorithm *arg2 = (btCollisionAlgorithm *) 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  arg2 = (btCollisionAlgorithm *)jarg2; 
  if (arg1) (arg1)->m_algorithm = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphasePair_m_algorithm_get(void * jarg1) {
  void * jresult ;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  result = (btCollisionAlgorithm *) ((arg1)->m_algorithm);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphasePair_m_internalInfo1_set(void * jarg1, void * jarg2) {
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_internalInfo1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphasePair_m_internalInfo1_get(void * jarg1) {
  void * jresult ;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  void *result = 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  result = (void *) ((arg1)->m_internalInfo1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphasePair_m_internalTmpValue_set(void * jarg1, int jarg2) {
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  int arg2 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_internalTmpValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBroadphasePair_m_internalTmpValue_get(void * jarg1) {
  int jresult ;
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  int result;
  
  arg1 = (btBroadphasePair *)jarg1; 
  result = (int) ((arg1)->m_internalTmpValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBroadphasePair(void * jarg1) {
  btBroadphasePair *arg1 = (btBroadphasePair *) 0 ;
  
  arg1 = (btBroadphasePair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBroadphasePairSortPredicate() {
  void * jresult ;
  btBroadphasePairSortPredicate *result = 0 ;
  
  result = (btBroadphasePairSortPredicate *)new btBroadphasePairSortPredicate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBroadphasePairSortPredicate(void * jarg1) {
  btBroadphasePairSortPredicate *arg1 = (btBroadphasePairSortPredicate *) 0 ;
  
  arg1 = (btBroadphasePairSortPredicate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionAlgorithmCreateFunc_m_swapped_set(void * jarg1, unsigned int jarg2) {
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  bool arg2 ;
  
  arg1 = (btCollisionAlgorithmCreateFunc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_swapped = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionAlgorithmCreateFunc_m_swapped_get(void * jarg1) {
  unsigned int jresult ;
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  bool result;
  
  arg1 = (btCollisionAlgorithmCreateFunc *)jarg1; 
  result = (bool) ((arg1)->m_swapped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionAlgorithmCreateFunc() {
  void * jresult ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  result = (btCollisionAlgorithmCreateFunc *)new btCollisionAlgorithmCreateFunc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionAlgorithmCreateFunc(void * jarg1) {
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  
  arg1 = (btCollisionAlgorithmCreateFunc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btCollisionAlgorithmCreateFunc *arg1 = (btCollisionAlgorithmCreateFunc *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionAlgorithmCreateFunc *)jarg1; 
  arg2 = (btCollisionAlgorithmConstructionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  result = (btCollisionAlgorithm *)(arg1)->CreateCollisionAlgorithm(*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_DISPATCH_REGISTRY_ARRAY_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionDispatcher_getDispatcherFlags(void * jarg1) {
  int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (int)((btCollisionDispatcher const *)arg1)->getDispatcherFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_setDispatcherFlags(void * jarg1, int jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDispatcherFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_registerCollisionCreateFunc(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *arg4 = (btCollisionAlgorithmCreateFunc *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btCollisionAlgorithmCreateFunc *)jarg4; 
  (arg1)->registerCollisionCreateFunc(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionDispatcher_getNumManifolds(void * jarg1) {
  int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (int)((btCollisionDispatcher const *)arg1)->getNumManifolds();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getInternalManifoldPointer(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold **result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btPersistentManifold **)(arg1)->getInternalManifoldPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getManifoldByIndexInternal__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btPersistentManifold *)(arg1)->getManifoldByIndexInternal(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionDispatcher(void * jarg1) {
  void * jresult ;
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btCollisionDispatcher *result = 0 ;
  
  arg1 = (btCollisionConfiguration *)jarg1; 
  result = (btCollisionDispatcher *)new btCollisionDispatcher(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionDispatcher(void * jarg1) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getNewManifold(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (btPersistentManifold *)(arg1)->getNewManifold((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_releaseManifold(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  (arg1)->releaseManifold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_clearManifold(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  (arg1)->clearManifold(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_findAlgorithm__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btPersistentManifold *arg4 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btPersistentManifold *)jarg4; 
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_findAlgorithm__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  result = (btCollisionAlgorithm *)(arg1)->findAlgorithm((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionDispatcher_needsCollision(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (bool)(arg1)->needsCollision((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionDispatcher_needsResponse(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  bool result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  result = (bool)(arg1)->needsResponse((btCollisionObject const *)arg2,(btCollisionObject const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_dispatchAllCollisionPairs(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btDispatcherInfo *arg3 = 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btOverlappingPairCache *)jarg2; 
  arg3 = (btDispatcherInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg4 = (btDispatcher *)jarg4; 
  (arg1)->dispatchAllCollisionPairs(arg2,(btDispatcherInfo const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_setNearCallback(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback arg2 = (btNearCallback) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btNearCallback)jarg2; 
  (arg1)->setNearCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getNearCallback(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btNearCallback result;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btNearCallback)((btCollisionDispatcher const *)arg1)->getNearCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_defaultNearCallback(void * jarg1, void * jarg2, void * jarg3) {
  btBroadphasePair *arg1 = 0 ;
  btCollisionDispatcher *arg2 = 0 ;
  btDispatcherInfo *arg3 = 0 ;
  
  arg1 = (btBroadphasePair *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair & type is null", 0);
    return ;
  } 
  arg2 = (btCollisionDispatcher *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionDispatcher & type is null", 0);
    return ;
  } 
  arg3 = (btDispatcherInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  btCollisionDispatcher::defaultNearCallback(*arg1,*arg2,(btDispatcherInfo const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_allocateCollisionAlgorithm(void * jarg1, int jarg2) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  result = (void *)(arg1)->allocateCollisionAlgorithm(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_freeCollisionAlgorithm(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->freeCollisionAlgorithm(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getCollisionConfiguration__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btCollisionConfiguration *)(arg1)->getCollisionConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionDispatcher_setCollisionConfiguration(void * jarg1, void * jarg2) {
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btCollisionConfiguration *arg2 = (btCollisionConfiguration *) 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  arg2 = (btCollisionConfiguration *)jarg2; 
  (arg1)->setCollisionConfiguration(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionDispatcher_getInternalManifoldPool__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionDispatcher *arg1 = (btCollisionDispatcher *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btCollisionDispatcher *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getInternalManifoldPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBroadphaseAabbCallback(void * jarg1) {
  btBroadphaseAabbCallback *arg1 = (btBroadphaseAabbCallback *) 0 ;
  
  arg1 = (btBroadphaseAabbCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBroadphaseAabbCallback_process(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btBroadphaseAabbCallback *arg1 = (btBroadphaseAabbCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btBroadphaseAabbCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  result = (bool)(arg1)->process((btBroadphaseProxy const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseRayCallback_m_rayDirectionInverse_set(void * jarg1, void * jarg2) {
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btBroadphaseRayCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayDirectionInverse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseRayCallback_m_rayDirectionInverse_get(void * jarg1) {
  void * jresult ;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btBroadphaseRayCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayDirectionInverse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseRayCallback_m_signs_set(void * jarg1, void * jarg2) {
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  unsigned int *arg2 ;
  
  arg1 = (btBroadphaseRayCallback *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->m_signs;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseRayCallback_m_signs_get(void * jarg1) {
  void * jresult ;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (btBroadphaseRayCallback *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->m_signs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseRayCallback_m_lambda_max_set(void * jarg1, float jarg2) {
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btBroadphaseRayCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_lambda_max = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btBroadphaseRayCallback_m_lambda_max_get(void * jarg1) {
  float jresult ;
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  btScalar result;
  
  arg1 = (btBroadphaseRayCallback *)jarg1; 
  result = (btScalar) ((arg1)->m_lambda_max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBroadphaseRayCallback(void * jarg1) {
  btBroadphaseRayCallback *arg1 = (btBroadphaseRayCallback *) 0 ;
  
  arg1 = (btBroadphaseRayCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBroadphaseInterface(void * jarg1) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseInterface_createProxy(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, short jarg6, short jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (short)jarg7; 
  arg8 = (btDispatcher *)jarg8; 
  arg9 = (void *)jarg9; 
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_destroyProxy(void * jarg1, void * jarg2, void * jarg3) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->destroyProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_setAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBroadphaseInterface const *)arg1)->getAabb(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_rayTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_rayTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_rayTest__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_aabbTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseAabbCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseAabbCallback & type is null", 0);
    return ;
  } 
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_calculateOverlappingPairs(void * jarg1, void * jarg2) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->calculateOverlappingPairs(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBroadphaseInterface_getOverlappingPairCache__SWIG_0(void * jarg1) {
  void * jresult ;
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_getBroadphaseAabb(void * jarg1, void * jarg2, void * jarg3) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBroadphaseInterface const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_resetPool(void * jarg1, void * jarg2) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->resetPool(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBroadphaseInterface_printStats(void * jarg1) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  (arg1)->printStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOverlappingPairCallback(void * jarg1) {
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  
  arg1 = (btOverlappingPairCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOverlappingPairCallback_addOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btOverlappingPairCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOverlappingPairCallback_removeOverlappingPair(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  arg1 = (btOverlappingPairCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  arg4 = (btDispatcher *)jarg4; 
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOverlappingPairCallback_removeOverlappingPairsContainingProxy(void * jarg1, void * jarg2, void * jarg3) {
  btOverlappingPairCallback *arg1 = (btOverlappingPairCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btOverlappingPairCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOverlapCallback(void * jarg1) {
  btOverlapCallback *arg1 = (btOverlapCallback *) 0 ;
  
  arg1 = (btOverlapCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btOverlapCallback_processOverlap(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btOverlapCallback *arg1 = (btOverlapCallback *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  bool result;
  
  arg1 = (btOverlapCallback *)jarg1; 
  arg2 = (btBroadphasePair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->processOverlap(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOverlapFilterCallback(void * jarg1) {
  btOverlapFilterCallback *arg1 = (btOverlapFilterCallback *) 0 ;
  
  arg1 = (btOverlapFilterCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btOverlapFilterCallback_needBroadphaseCollision(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btOverlapFilterCallback *arg1 = (btOverlapFilterCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btOverlapFilterCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (bool)((btOverlapFilterCallback const *)arg1)->needBroadphaseCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gRemovePairs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  gRemovePairs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gRemovePairs_get() {
  int jresult ;
  int result;
  
  result = (int)gRemovePairs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gAddedPairs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  gAddedPairs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gAddedPairs_get() {
  int jresult ;
  int result;
  
  result = (int)gAddedPairs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFindPairs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  gFindPairs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gFindPairs_get() {
  int jresult ;
  int result;
  
  result = (int)gFindPairs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_NULL_PAIR_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BT_NULL_PAIR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOverlappingPairCache(void * jarg1) {
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(void * jarg1) {
  void * jresult ;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOverlappingPairCache_getOverlappingPairArray(void * jarg1) {
  void * jresult ;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOverlappingPairCache_cleanOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphasePair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair & type is null", 0);
    return ;
  } 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanOverlappingPair(*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOverlappingPairCache_getNumOverlappingPairs(void * jarg1) {
  int jresult ;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  int result;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  result = (int)((btOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOverlappingPairCache_cleanProxyFromPairs(void * jarg1, void * jarg2, void * jarg3) {
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanProxyFromPairs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOverlappingPairCache_setOverlapFilterCallback(void * jarg1, void * jarg2) {
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  arg2 = (btOverlapFilterCallback *)jarg2; 
  (arg1)->setOverlapFilterCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOverlappingPairCache_processAllOverlappingPairs(void * jarg1, void * jarg2, void * jarg3) {
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  arg2 = (btOverlapCallback *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->processAllOverlappingPairs(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOverlappingPairCache_findPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btOverlappingPairCache_hasDeferredRemoval(void * jarg1) {
  unsigned int jresult ;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  bool result;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  result = (bool)(arg1)->hasDeferredRemoval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOverlappingPairCache_setInternalGhostPairCallback(void * jarg1, void * jarg2) {
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  arg2 = (btOverlappingPairCallback *)jarg2; 
  (arg1)->setInternalGhostPairCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOverlappingPairCache_sortOverlappingPairs(void * jarg1, void * jarg2) {
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->sortOverlappingPairs(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHashedOverlappingPairCache() {
  void * jresult ;
  btHashedOverlappingPairCache *result = 0 ;
  
  result = (btHashedOverlappingPairCache *)new btHashedOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHashedOverlappingPairCache(void * jarg1) {
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy(void * jarg1, void * jarg2, void * jarg3) {
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashedOverlappingPairCache_removeOverlappingPair(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  arg4 = (btDispatcher *)jarg4; 
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashedOverlappingPairCache_needsBroadphaseCollision(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (bool)((btHashedOverlappingPairCache const *)arg1)->needsBroadphaseCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashedOverlappingPairCache_addOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashedOverlappingPairCache_cleanProxyFromPairs(void * jarg1, void * jarg2, void * jarg3) {
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanProxyFromPairs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashedOverlappingPairCache_processAllOverlappingPairs(void * jarg1, void * jarg2, void * jarg3) {
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btOverlapCallback *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->processAllOverlappingPairs(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(void * jarg1) {
  void * jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashedOverlappingPairCache_cleanOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphasePair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair & type is null", 0);
    return ;
  } 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanOverlappingPair(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashedOverlappingPairCache_findPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHashedOverlappingPairCache_GetCount(void * jarg1) {
  int jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  int result;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  result = (int)((btHashedOverlappingPairCache const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashedOverlappingPairCache_getOverlapFilterCallback(void * jarg1) {
  void * jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *result = 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  result = (btOverlapFilterCallback *)(arg1)->getOverlapFilterCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashedOverlappingPairCache_setOverlapFilterCallback(void * jarg1, void * jarg2) {
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  arg2 = (btOverlapFilterCallback *)jarg2; 
  (arg1)->setOverlapFilterCallback(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHashedOverlappingPairCache_getNumOverlappingPairs(void * jarg1) {
  int jresult ;
  btHashedOverlappingPairCache *arg1 = (btHashedOverlappingPairCache *) 0 ;
  int result;
  
  arg1 = (btHashedOverlappingPairCache *)jarg1; 
  result = (int)((btHashedOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSortedOverlappingPairCache() {
  void * jresult ;
  btSortedOverlappingPairCache *result = 0 ;
  
  result = (btSortedOverlappingPairCache *)new btSortedOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSortedOverlappingPairCache(void * jarg1) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSortedOverlappingPairCache_processAllOverlappingPairs(void * jarg1, void * jarg2, void * jarg3) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btOverlapCallback *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->processAllOverlappingPairs(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSortedOverlappingPairCache_removeOverlappingPair(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  arg4 = (btDispatcher *)jarg4; 
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSortedOverlappingPairCache_cleanOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphasePair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair & type is null", 0);
    return ;
  } 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanOverlappingPair(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSortedOverlappingPairCache_addOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSortedOverlappingPairCache_findPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSortedOverlappingPairCache_cleanProxyFromPairs(void * jarg1, void * jarg2, void * jarg3) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanProxyFromPairs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSortedOverlappingPairCache_removeOverlappingPairsContainingProxy(void * jarg1, void * jarg2, void * jarg3) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSortedOverlappingPairCache_needsBroadphaseCollision(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (bool)((btSortedOverlappingPairCache const *)arg1)->needsBroadphaseCollision(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSortedOverlappingPairCache_getOverlappingPairArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSortedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(void * jarg1) {
  void * jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSortedOverlappingPairCache_getNumOverlappingPairs(void * jarg1) {
  int jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  int result;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  result = (int)((btSortedOverlappingPairCache const *)arg1)->getNumOverlappingPairs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSortedOverlappingPairCache_getOverlapFilterCallback(void * jarg1) {
  void * jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *result = 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  result = (btOverlapFilterCallback *)(arg1)->getOverlapFilterCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSortedOverlappingPairCache_setOverlapFilterCallback(void * jarg1, void * jarg2) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btOverlapFilterCallback *)jarg2; 
  (arg1)->setOverlapFilterCallback(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSortedOverlappingPairCache_hasDeferredRemoval(void * jarg1) {
  unsigned int jresult ;
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  bool result;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  result = (bool)(arg1)->hasDeferredRemoval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSortedOverlappingPairCache_setInternalGhostPairCallback(void * jarg1, void * jarg2) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btOverlappingPairCallback *)jarg2; 
  (arg1)->setInternalGhostPairCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSortedOverlappingPairCache_sortOverlappingPairs(void * jarg1, void * jarg2) {
  btSortedOverlappingPairCache *arg1 = (btSortedOverlappingPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btSortedOverlappingPairCache *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->sortOverlappingPairs(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btNullPairCache_getOverlappingPairArrayPtr__SWIG_0(void * jarg1) {
  void * jresult ;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  result = (btBroadphasePair *)(arg1)->getOverlappingPairArrayPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btNullPairCache_getOverlappingPairArray(void * jarg1) {
  void * jresult ;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePairArray *result = 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  result = (btBroadphasePairArray *) &(arg1)->getOverlappingPairArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNullPairCache_cleanOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphasePair *arg2 = 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btBroadphasePair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphasePair & type is null", 0);
    return ;
  } 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanOverlappingPair(*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btNullPairCache_getNumOverlappingPairs(void * jarg1) {
  int jresult ;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  int result;
  
  arg1 = (btNullPairCache *)jarg1; 
  result = (int)((btNullPairCache const *)arg1)->getNumOverlappingPairs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNullPairCache_cleanProxyFromPairs(void * jarg1, void * jarg2, void * jarg3) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->cleanProxyFromPairs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNullPairCache_setOverlapFilterCallback(void * jarg1, void * jarg2) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlapFilterCallback *arg2 = (btOverlapFilterCallback *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btOverlapFilterCallback *)jarg2; 
  (arg1)->setOverlapFilterCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNullPairCache_processAllOverlappingPairs(void * jarg1, void * jarg2, void * jarg3) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlapCallback *arg2 = (btOverlapCallback *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btOverlapCallback *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->processAllOverlappingPairs(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btNullPairCache_findPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->findPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btNullPairCache_hasDeferredRemoval(void * jarg1) {
  unsigned int jresult ;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  bool result;
  
  arg1 = (btNullPairCache *)jarg1; 
  result = (bool)(arg1)->hasDeferredRemoval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNullPairCache_setInternalGhostPairCallback(void * jarg1, void * jarg2) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btOverlappingPairCallback *arg2 = (btOverlappingPairCallback *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btOverlappingPairCallback *)jarg2; 
  (arg1)->setInternalGhostPairCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btNullPairCache_addOverlappingPair(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphasePair *result = 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (btBroadphasePair *)(arg1)->addOverlappingPair(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btNullPairCache_removeOverlappingPair(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg4 = (btDispatcher *) 0 ;
  void *result = 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  arg4 = (btDispatcher *)jarg4; 
  result = (void *)(arg1)->removeOverlappingPair(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNullPairCache_removeOverlappingPairsContainingProxy(void * jarg1, void * jarg2, void * jarg3) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->removeOverlappingPairsContainingProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNullPairCache_sortOverlappingPairs(void * jarg1, void * jarg2) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->sortOverlappingPairs(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btNullPairCache() {
  void * jresult ;
  btNullPairCache *result = 0 ;
  
  result = (btNullPairCache *)new btNullPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btNullPairCache(void * jarg1) {
  btNullPairCache *arg1 = (btNullPairCache *) 0 ;
  
  arg1 = (btNullPairCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btCollisionConfiguration *arg3 = (btCollisionConfiguration *) 0 ;
  btCollisionWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btCollisionConfiguration *)jarg3; 
  result = (btCollisionWorld *)new btCollisionWorld(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_setBroadphase(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  (arg1)->setBroadphase(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getBroadphase__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btBroadphaseInterface *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btBroadphaseInterface *)((btCollisionWorld const *)arg1)->getBroadphase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getPairCache(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getDispatcher__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcher *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btDispatcher *)(arg1)->getDispatcher();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_updateSingleAabb(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->updateSingleAabb(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_updateAabbs(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->updateAabbs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_computeOverlappingPairs(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->computeOverlappingPairs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_setDebugDrawer(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  (arg1)->setDebugDrawer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getDebugDrawer(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btIDebugDraw *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btIDebugDraw *)(arg1)->getDebugDrawer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_debugDrawWorld(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_debugDrawObject(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->debugDrawObject((btTransform const &)*arg2,(btCollisionShape const *)arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalShapeInfo_m_shapePart_set(void * jarg1, int jarg2) {
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_shapePart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionWorld_LocalShapeInfo_m_shapePart_get(void * jarg1) {
  int jresult ;
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  result = (int) ((arg1)->m_shapePart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalShapeInfo_m_triangleIndex_set(void * jarg1, int jarg2) {
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionWorld_LocalShapeInfo_m_triangleIndex_get(void * jarg1) {
  int jresult ;
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld_LocalShapeInfo() {
  void * jresult ;
  btCollisionWorld::LocalShapeInfo *result = 0 ;
  
  result = (btCollisionWorld::LocalShapeInfo *)new btCollisionWorld::LocalShapeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_LocalShapeInfo(void * jarg1) {
  btCollisionWorld::LocalShapeInfo *arg1 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  
  arg1 = (btCollisionWorld::LocalShapeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld_LocalRayResult(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btCollisionWorld::LocalRayResult *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  result = (btCollisionWorld::LocalRayResult *)new btCollisionWorld::LocalRayResult((btCollisionObject const *)arg1,arg2,(btVector3 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_collisionObject_set(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_collisionObject_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_localShapeInfo_set(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  if (arg1) (arg1)->m_localShapeInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_localShapeInfo_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btCollisionWorld::LocalShapeInfo *) ((arg1)->m_localShapeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_hitNormalLocal_set(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_hitNormalLocal_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_hitFraction_set(void * jarg1, float jarg2) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_LocalRayResult_m_hitFraction_get(void * jarg1) {
  float jresult ;
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  result = (btScalar) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_LocalRayResult(void * jarg1) {
  btCollisionWorld::LocalRayResult *arg1 = (btCollisionWorld::LocalRayResult *) 0 ;
  
  arg1 = (btCollisionWorld::LocalRayResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_closestHitFraction_set(void * jarg1, float jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_closestHitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_closestHitFraction_get(void * jarg1) {
  float jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (btScalar) ((arg1)->m_closestHitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_collisionObject_set(void * jarg1, void * jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_collisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_collisionObject_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_collisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_collisionFilterGroup_set(void * jarg1, short jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_collisionFilterGroup_get(void * jarg1) {
  short jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  short result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_collisionFilterMask_set(void * jarg1, short jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_collisionFilterMask_get(void * jarg1) {
  short jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  short result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_flags_set(void * jarg1, unsigned int jarg2) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_m_flags_get(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  unsigned int result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (unsigned int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_RayResultCallback(void * jarg1) {
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_hasHit(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  result = (bool)((btCollisionWorld::RayResultCallback const *)arg1)->hasHit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_needsCollision(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  result = (bool)((btCollisionWorld::RayResultCallback const *)arg1)->needsCollision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_RayResultCallback_addSingleResult(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::RayResultCallback *arg1 = (btCollisionWorld::RayResultCallback *) 0 ;
  btCollisionWorld::LocalRayResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::RayResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalRayResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalRayResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld_ClosestRayResultCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionWorld::ClosestRayResultCallback *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCollisionWorld::ClosestRayResultCallback *)new btCollisionWorld::ClosestRayResultCallback((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_rayFromWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayFromWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_rayFromWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayFromWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_rayToWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayToWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_rayToWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayToWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_hitNormalWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_hitNormalWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_hitPointWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitPointWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_m_hitPointWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitPointWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_addSingleResult(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  btCollisionWorld::LocalRayResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalRayResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalRayResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_ClosestRayResultCallback(void * jarg1) {
  btCollisionWorld::ClosestRayResultCallback *arg1 = (btCollisionWorld::ClosestRayResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestRayResultCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld_AllHitsRayResultCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionWorld::AllHitsRayResultCallback *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCollisionWorld::AllHitsRayResultCallback *)new btCollisionWorld::AllHitsRayResultCallback((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_collisionObjects_set(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *arg2 = (btAlignedObjectArray< btCollisionObject const * > *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btAlignedObjectArray< btCollisionObject const * > *)jarg2; 
  if (arg1) (arg1)->m_collisionObjects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_collisionObjects_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btCollisionObject const * > *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btAlignedObjectArray< btCollisionObject const * > *)& ((arg1)->m_collisionObjects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_rayFromWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayFromWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_rayFromWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayFromWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_rayToWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_rayToWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_rayToWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_rayToWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_hitNormalWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->m_hitNormalWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_hitNormalWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_hitNormalWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_hitPointWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *arg2 = (btAlignedObjectArray< btVector3 > *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btAlignedObjectArray< btVector3 > *)jarg2; 
  if (arg1) (arg1)->m_hitPointWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_hitPointWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btVector3 > *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btAlignedObjectArray< btVector3 > *)& ((arg1)->m_hitPointWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_hitFractions_set(void * jarg1, void * jarg2) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btScalar > *arg2 = (btAlignedObjectArray< btScalar > *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btAlignedObjectArray< btScalar > *)jarg2; 
  if (arg1) (arg1)->m_hitFractions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_m_hitFractions_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btAlignedObjectArray< btScalar > *result = 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  result = (btAlignedObjectArray< btScalar > *)& ((arg1)->m_hitFractions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_addSingleResult(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  btCollisionWorld::LocalRayResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalRayResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalRayResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_AllHitsRayResultCallback(void * jarg1) {
  btCollisionWorld::AllHitsRayResultCallback *arg1 = (btCollisionWorld::AllHitsRayResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::AllHitsRayResultCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld_LocalConvexResult(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btCollisionWorld::LocalConvexResult *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  result = (btCollisionWorld::LocalConvexResult *)new btCollisionWorld::LocalConvexResult((btCollisionObject const *)arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitCollisionObject_set(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_hitCollisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitCollisionObject_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_hitCollisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_localShapeInfo_set(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *arg2 = (btCollisionWorld::LocalShapeInfo *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btCollisionWorld::LocalShapeInfo *)jarg2; 
  if (arg1) (arg1)->m_localShapeInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_localShapeInfo_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btCollisionWorld::LocalShapeInfo *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btCollisionWorld::LocalShapeInfo *) ((arg1)->m_localShapeInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitNormalLocal_set(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitNormalLocal_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitPointLocal_set(void * jarg1, void * jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitPointLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitPointLocal_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitPointLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitFraction_set(void * jarg1, float jarg2) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_hitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_LocalConvexResult_m_hitFraction_get(void * jarg1) {
  float jresult ;
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  result = (btScalar) ((arg1)->m_hitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_LocalConvexResult(void * jarg1) {
  btCollisionWorld::LocalConvexResult *arg1 = (btCollisionWorld::LocalConvexResult *) 0 ;
  
  arg1 = (btCollisionWorld::LocalConvexResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_m_closestHitFraction_set(void * jarg1, float jarg2) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_closestHitFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_m_closestHitFraction_get(void * jarg1) {
  float jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  result = (btScalar) ((arg1)->m_closestHitFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_m_collisionFilterGroup_set(void * jarg1, short jarg2) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_m_collisionFilterGroup_get(void * jarg1) {
  short jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  short result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_m_collisionFilterMask_set(void * jarg1, short jarg2) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_m_collisionFilterMask_get(void * jarg1) {
  short jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  short result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_ConvexResultCallback(void * jarg1) {
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_hasHit(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  result = (bool)((btCollisionWorld::ConvexResultCallback const *)arg1)->hasHit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_needsCollision(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  result = (bool)((btCollisionWorld::ConvexResultCallback const *)arg1)->needsCollision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_ConvexResultCallback_addSingleResult(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::ConvexResultCallback *arg1 = (btCollisionWorld::ConvexResultCallback *) 0 ;
  btCollisionWorld::LocalConvexResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ConvexResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalConvexResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalConvexResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionWorld_ClosestConvexResultCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btCollisionWorld::ClosestConvexResultCallback *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCollisionWorld::ClosestConvexResultCallback *)new btCollisionWorld::ClosestConvexResultCallback((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_convexFromWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_convexFromWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_convexFromWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_convexFromWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_convexToWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_convexToWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_convexToWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_convexToWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_hitNormalWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_hitNormalWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_hitPointWorld_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitPointWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_hitPointWorld_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitPointWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_hitCollisionObject_set(void * jarg1, void * jarg2) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  if (arg1) (arg1)->m_hitCollisionObject = (btCollisionObject const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_m_hitCollisionObject_get(void * jarg1) {
  void * jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btCollisionObject *result = 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  result = (btCollisionObject *) ((arg1)->m_hitCollisionObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_addSingleResult(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  btCollisionWorld::LocalConvexResult *arg2 = 0 ;
  bool arg3 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  arg2 = (btCollisionWorld::LocalConvexResult *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::LocalConvexResult & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btScalar)(arg1)->addSingleResult(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_ClosestConvexResultCallback(void * jarg1) {
  btCollisionWorld::ClosestConvexResultCallback *arg1 = (btCollisionWorld::ClosestConvexResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ClosestConvexResultCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ContactResultCallback_m_collisionFilterGroup_set(void * jarg1, short jarg2) {
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterGroup = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btCollisionWorld_ContactResultCallback_m_collisionFilterGroup_get(void * jarg1) {
  short jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  short result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_ContactResultCallback_m_collisionFilterMask_set(void * jarg1, short jarg2) {
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  short arg2 ;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_collisionFilterMask = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btCollisionWorld_ContactResultCallback_m_collisionFilterMask_get(void * jarg1) {
  short jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  short result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  result = (short) ((arg1)->m_collisionFilterMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionWorld_ContactResultCallback(void * jarg1) {
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_ContactResultCallback_needsCollision(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  result = (bool)((btCollisionWorld::ContactResultCallback const *)arg1)->needsCollision(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionWorld_ContactResultCallback_addSingleResult(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, int jarg7, int jarg8) {
  float jresult ;
  btCollisionWorld::ContactResultCallback *arg1 = (btCollisionWorld::ContactResultCallback *) 0 ;
  btManifoldPoint *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  int arg4 ;
  int arg5 ;
  btCollisionObjectWrapper *arg6 = (btCollisionObjectWrapper *) 0 ;
  int arg7 ;
  int arg8 ;
  btScalar result;
  
  arg1 = (btCollisionWorld::ContactResultCallback *)jarg1; 
  arg2 = (btManifoldPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldPoint & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btCollisionObjectWrapper *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (btScalar)(arg1)->addSingleResult(*arg2,(btCollisionObjectWrapper const *)arg3,arg4,arg5,(btCollisionObjectWrapper const *)arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionWorld_getNumCollisionObjects(void * jarg1) {
  int jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  int result;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (int)((btCollisionWorld const *)arg1)->getNumCollisionObjects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_rayTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionWorld::RayResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  ((btCollisionWorld const *)arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_convexSweepTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btConvexShape *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_convexSweepTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btConvexShape *arg2 = (btConvexShape *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btConvexShape *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  ((btCollisionWorld const *)arg1)->convexSweepTest((btConvexShape const *)arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_contactTest(void * jarg1, void * jarg2, void * jarg3) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionWorld::ContactResultCallback *arg3 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionWorld::ContactResultCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ContactResultCallback & type is null", 0);
    return ;
  } 
  (arg1)->contactTest(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_contactPairTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionWorld::ContactResultCallback *arg4 = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btCollisionWorld::ContactResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ContactResultCallback & type is null", 0);
    return ;
  } 
  (arg1)->contactPairTest(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_rayTestSingle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btCollisionShape *arg4 = (btCollisionShape *) 0 ;
  btTransform *arg5 = 0 ;
  btCollisionWorld::RayResultCallback *arg6 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btCollisionShape *)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btCollisionWorld::RayResultCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  btCollisionWorld::rayTestSingle((btTransform const &)*arg1,(btTransform const &)*arg2,arg3,(btCollisionShape const *)arg4,(btTransform const &)*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_rayTestSingleInternal(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionWorld::RayResultCallback *arg4 = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionWorld::RayResultCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::RayResultCallback & type is null", 0);
    return ;
  } 
  btCollisionWorld::rayTestSingleInternal((btTransform const &)*arg1,(btTransform const &)*arg2,(btCollisionObjectWrapper const *)arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_objectQuerySingle(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, float jarg8) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObject *arg4 = (btCollisionObject *) 0 ;
  btCollisionShape *arg5 = (btCollisionShape *) 0 ;
  btTransform *arg6 = 0 ;
  btCollisionWorld::ConvexResultCallback *arg7 = 0 ;
  btScalar arg8 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionObject *)jarg4; 
  arg5 = (btCollisionShape *)jarg5; 
  arg6 = (btTransform *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg7 = (btCollisionWorld::ConvexResultCallback *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg8 = (btScalar)jarg8; 
  btCollisionWorld::objectQuerySingle((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,arg4,(btCollisionShape const *)arg5,(btTransform const &)*arg6,*arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_objectQuerySingleInternal(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionWorld::ConvexResultCallback *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  arg5 = (btCollisionWorld::ConvexResultCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionWorld::ConvexResultCallback & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  btCollisionWorld::objectQuerySingleInternal((btConvexShape const *)arg1,(btTransform const &)*arg2,(btTransform const &)*arg3,(btCollisionObjectWrapper const *)arg4,*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_addCollisionObject__SWIG_0(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addCollisionObject(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_addCollisionObject__SWIG_1(void * jarg1, void * jarg2, short jarg3) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->addCollisionObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_addCollisionObject__SWIG_2(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->addCollisionObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getCollisionObjectArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObjectArray *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btCollisionObjectArray *) &(arg1)->getCollisionObjectArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_removeCollisionObject(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->removeCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_performDiscreteCollisionDetection(void * jarg1) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  (arg1)->performDiscreteCollisionDetection();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionWorld_getDispatchInfo__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btDispatcherInfo *result = 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (btDispatcherInfo *) &(arg1)->getDispatchInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionWorld_getForceUpdateAllAabbs(void * jarg1) {
  unsigned int jresult ;
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool result;
  
  arg1 = (btCollisionWorld *)jarg1; 
  result = (bool)((btCollisionWorld const *)arg1)->getForceUpdateAllAabbs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_setForceUpdateAllAabbs(void * jarg1, unsigned int jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setForceUpdateAllAabbs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionWorld_serialize(void * jarg1, void * jarg2) {
  btCollisionWorld *arg1 = (btCollisionWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btCollisionWorld *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  (arg1)->serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionShape(void * jarg1) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCollisionShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_getBoundingSphere(void * jarg1, void * jarg2, void * jarg3) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar *arg3 = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btScalar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btCollisionShape const *)arg1)->getBoundingSphere(*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionShape_getAngularMotionDisc(void * jarg1) {
  float jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (btScalar)((btCollisionShape const *)arg1)->getAngularMotionDisc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionShape_getContactBreakingThreshold(void * jarg1, float jarg2) {
  float jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  btScalar result;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btScalar)((btCollisionShape const *)arg1)->getContactBreakingThreshold(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_calculateTemporalAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCollisionShape const *)arg1)->calculateTemporalAabb((btTransform const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,*arg6,*arg7);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isPolyhedral(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isPolyhedral();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isConvex2d(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isConvex2d();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isConvex(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isConvex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isNonMoving(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isNonMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isConcave(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isConcave();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isCompound(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isCompound();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isSoftBody(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isSoftBody();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btCollisionShape_isInfinite(void * jarg1) {
  unsigned int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  bool result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (bool)((btCollisionShape const *)arg1)->isInfinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_setLocalScaling(void * jarg1, void * jarg2) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (btVector3 *) &((btCollisionShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCollisionShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionShape_getName(void * jarg1) {
  char * jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (char *)((btCollisionShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionShape_getShapeType(void * jarg1) {
  int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  int result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (int)((btCollisionShape const *)arg1)->getShapeType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionShape_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btVector3 result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = ((btCollisionShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_setMargin(void * jarg1, float jarg2) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionShape_getMargin(void * jarg1) {
  float jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (btScalar)((btCollisionShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_setUserPointer(void * jarg1, void * jarg2) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setUserPointer(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionShape_getUserPointer(void * jarg1) {
  void * jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *result = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (void *)((btCollisionShape const *)arg1)->getUserPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  int result;
  
  arg1 = (btCollisionShape *)jarg1; 
  result = (int)((btCollisionShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCollisionShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShape_serializeSingleShape(void * jarg1, void * jarg2) {
  btCollisionShape *arg1 = (btCollisionShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btCollisionShape *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btCollisionShape const *)arg1)->serializeSingleShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShapeData_m_name_set(void * jarg1, char * jarg2) {
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btCollisionShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionShapeData_m_name_get(void * jarg1) {
  char * jresult ;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionShapeData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShapeData_m_shapeType_set(void * jarg1, int jarg2) {
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btCollisionShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_shapeType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCollisionShapeData_m_shapeType_get(void * jarg1) {
  int jresult ;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  int result;
  
  arg1 = (btCollisionShapeData *)jarg1; 
  result = (int) ((arg1)->m_shapeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCollisionShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCollisionShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCollisionShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionShapeData() {
  void * jresult ;
  btCollisionShapeData *result = 0 ;
  
  result = (btCollisionShapeData *)new btCollisionShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionShapeData(void * jarg1) {
  btCollisionShapeData *arg1 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCollisionShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_PREFERRED_PENETRATION_DIRECTIONS_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexShape(void * jarg1) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexShape const *)arg1)->localGetSupportVertexWithoutMarginNonVirtual((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexShape_localGetSupportVertexNonVirtual(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexShape const *)arg1)->localGetSupportVertexNonVirtual((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexShape_getMarginNonVirtual(void * jarg1) {
  float jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar result;
  
  arg1 = (btConvexShape *)jarg1; 
  result = (btScalar)((btConvexShape const *)arg1)->getMarginNonVirtual();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_getAabbNonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexShape const *)arg1)->getAabbNonVirtual((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_project(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btConvexShape const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btConvexShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_getAabbSlow(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  result = (btVector3 *) &((btConvexShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_setMargin(void * jarg1, float jarg2) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexShape_getMargin(void * jarg1) {
  float jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar result;
  
  arg1 = (btConvexShape *)jarg1; 
  result = (btScalar)((btConvexShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexShape_getNumPreferredPenetrationDirections(void * jarg1) {
  int jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int result;
  
  arg1 = (btConvexShape *)jarg1; 
  result = (int)((btConvexShape const *)arg1)->getNumPreferredPenetrationDirections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexShape_getPreferredPenetrationDirection(void * jarg1, int jarg2, void * jarg3) {
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AabbExpand(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  AabbExpand(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TestPointAgainstAabb2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)TestPointAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TestAabbAgainstAabb2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)TestAabbAgainstAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TestTriangleAgainstAabb2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)TestTriangleAgainstAabb2((btVector3 const *)arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOutcode(void * jarg1, void * jarg2) {
  int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (int)btOutcode((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRayAabb2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6, float jarg7) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int *arg3 ;
  btVector3 *arg4 ;
  btScalar *arg5 = 0 ;
  btScalar arg6 ;
  btScalar arg7 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (btVector3 *)jarg4; 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  result = (bool)btRayAabb2((btVector3 const &)*arg1,(btVector3 const &)*arg2,(unsigned int const (*))arg3,(btVector3 const (*))arg4,*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRayAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  result = (bool)btRayAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,*arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformAabb__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformAabb((btVector3 const &)*arg1,arg2,(btTransform const &)*arg3,*arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTransformAabb__SWIG_1(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  btTransformAabb((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,*arg5,*arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_BANCHLESS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_testQuantizedAabbAgainstQuantizedAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  unsigned int result;
  
  arg1 = (unsigned short *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  arg4 = (unsigned short *)jarg4; 
  result = (unsigned int)testQuantizedAabbAgainstQuantizedAabb((unsigned short const *)arg1,(unsigned short const *)arg2,(unsigned short const *)arg3,(unsigned short const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexInternalShape(void * jarg1) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexInternalShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexInternalShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexInternalShape_getImplicitShapeDimensions(void * jarg1) {
  void * jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getImplicitShapeDimensions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_setImplicitShapeDimensions(void * jarg1, void * jarg2) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setImplicitShapeDimensions((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_setSafeMargin__SWIG_0(void * jarg1, float jarg2, float jarg3) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setSafeMargin(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_setSafeMargin__SWIG_1(void * jarg1, float jarg2) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSafeMargin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_setSafeMargin__SWIG_2(void * jarg1, void * jarg2, float jarg3) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  (arg1)->setSafeMargin((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_setSafeMargin__SWIG_3(void * jarg1, void * jarg2) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setSafeMargin((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexInternalShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_getAabbSlow(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexInternalShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexInternalShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexInternalShape_getLocalScalingNV(void * jarg1) {
  void * jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  result = (btVector3 *) &((btConvexInternalShape const *)arg1)->getLocalScalingNV();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_setMargin(void * jarg1, float jarg2) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexInternalShape_getMargin(void * jarg1) {
  float jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  result = (btScalar)((btConvexInternalShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexInternalShape_getMarginNV(void * jarg1) {
  float jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  btScalar result;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  result = (btScalar)((btConvexInternalShape const *)arg1)->getMarginNV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexInternalShape_getNumPreferredPenetrationDirections(void * jarg1) {
  int jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int result;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  result = (int)((btConvexInternalShape const *)arg1)->getNumPreferredPenetrationDirections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShape_getPreferredPenetrationDirection(void * jarg1, int jarg2, void * jarg3) {
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexInternalShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexInternalShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  int result;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  result = (int)((btConvexInternalShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexInternalShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btConvexInternalShape *arg1 = (btConvexInternalShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexInternalShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btConvexInternalShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShapeData_m_collisionShapeData_set(void * jarg1, void * jarg2) {
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexInternalShapeData_m_collisionShapeData_get(void * jarg1) {
  void * jresult ;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShapeData_m_localScaling_set(void * jarg1, void * jarg2) {
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_localScaling = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexInternalShapeData_m_localScaling_get(void * jarg1) {
  void * jresult ;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_localScaling);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShapeData_m_implicitShapeDimensions_set(void * jarg1, void * jarg2) {
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_implicitShapeDimensions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexInternalShapeData_m_implicitShapeDimensions_get(void * jarg1) {
  void * jresult ;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_implicitShapeDimensions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShapeData_m_collisionMargin_set(void * jarg1, float jarg2) {
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConvexInternalShapeData_m_collisionMargin_get(void * jarg1) {
  float jresult ;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  float result;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalShapeData_m_padding_set(void * jarg1, int jarg2) {
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_padding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexInternalShapeData_m_padding_get(void * jarg1) {
  int jresult ;
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  int result;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  result = (int) ((arg1)->m_padding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexInternalShapeData() {
  void * jresult ;
  btConvexInternalShapeData *result = 0 ;
  
  result = (btConvexInternalShapeData *)new btConvexInternalShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexInternalShapeData(void * jarg1) {
  btConvexInternalShapeData *arg1 = (btConvexInternalShapeData *) 0 ;
  
  arg1 = (btConvexInternalShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalAabbCachingShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexInternalAabbCachingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalAabbCachingShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexInternalAabbCachingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexInternalAabbCachingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexInternalAabbCachingShape_recalcLocalAabb(void * jarg1) {
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  
  arg1 = (btConvexInternalAabbCachingShape *)jarg1; 
  (arg1)->recalcLocalAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexInternalAabbCachingShape(void * jarg1) {
  btConvexInternalAabbCachingShape *arg1 = (btConvexInternalAabbCachingShape *) 0 ;
  
  arg1 = (btConvexInternalAabbCachingShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPolyhedralConvexShape(void * jarg1) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->initializePolyhedralFeatures(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolyhedralConvexShape_initializePolyhedralFeatures__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  bool result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (bool)(arg1)->initializePolyhedralFeatures();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPolyhedralConvexShape_getConvexPolyhedron(void * jarg1) {
  void * jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btConvexPolyhedron *result = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (btConvexPolyhedron *)((btPolyhedralConvexShape const *)arg1)->getConvexPolyhedron();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btPolyhedralConvexShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btPolyhedralConvexShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPolyhedralConvexShape_getNumVertices(void * jarg1) {
  int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPolyhedralConvexShape_getNumEdges(void * jarg1) {
  int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPolyhedralConvexShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  int result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  result = (int)((btPolyhedralConvexShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btPolyhedralConvexShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPolyhedralConvexShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btPolyhedralConvexShape *arg1 = (btPolyhedralConvexShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btPolyhedralConvexShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btPolyhedralConvexShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_getNonvirtualAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getNonvirtualAabb((btTransform const &)*arg2,*arg3,*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_setLocalScaling(void * jarg1, void * jarg2) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btPolyhedralConvexAabbCachingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_recalcLocalAabb(void * jarg1) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  (arg1)->recalcLocalAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPolyhedralConvexAabbCachingShape(void * jarg1) {
  btPolyhedralConvexAabbCachingShape *arg1 = (btPolyhedralConvexAabbCachingShape *) 0 ;
  
  arg1 = (btPolyhedralConvexAabbCachingShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_getHalfExtentsWithMargin(void * jarg1) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = ((btBoxShape const *)arg1)->getHalfExtentsWithMargin();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_getHalfExtentsWithoutMargin(void * jarg1) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (btVector3 *) &((btBoxShape const *)arg1)->getHalfExtentsWithoutMargin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btBoxShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBoxShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btBoxShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btBoxShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBoxShape(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btBoxShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBoxShape *)new btBoxShape((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_setMargin(void * jarg1, float jarg2) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_setLocalScaling(void * jarg1, void * jarg2) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btBoxShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumVertices(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumEdges(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getPlaneEquation(void * jarg1, void * jarg2, int jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector4 *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector4 & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  ((btBoxShape const *)arg1)->getPlaneEquation(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBoxShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btBoxShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBoxShape_getName(void * jarg1) {
  char * jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (char *)((btBoxShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBoxShape_getNumPreferredPenetrationDirections(void * jarg1) {
  int jresult ;
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int result;
  
  arg1 = (btBoxShape *)jarg1; 
  result = (int)((btBoxShape const *)arg1)->getNumPreferredPenetrationDirections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBoxShape_getPreferredPenetrationDirection(void * jarg1, int jarg2, void * jarg3) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBoxShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBoxShape(void * jarg1) {
  btBoxShape *arg1 = (btBoxShape *) 0 ;
  
  arg1 = (btBoxShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSphereShape(float jarg1) {
  void * jresult ;
  btScalar arg1 ;
  btSphereShape *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  result = (btSphereShape *)new btSphereShape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSphereShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btSphereShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSphereShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSphereShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSphereShape_getRadius(void * jarg1) {
  float jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  arg1 = (btSphereShape *)jarg1; 
  result = (btScalar)((btSphereShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_setUnscaledRadius(void * jarg1, float jarg2) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUnscaledRadius(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSphereShape_getName(void * jarg1) {
  char * jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  result = (char *)((btSphereShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereShape_setMargin(void * jarg1, float jarg2) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSphereShape_getMargin(void * jarg1) {
  float jresult ;
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  btScalar result;
  
  arg1 = (btSphereShape *)jarg1; 
  result = (btScalar)((btSphereShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSphereShape(void * jarg1) {
  btSphereShape *arg1 = (btSphereShape *) 0 ;
  
  arg1 = (btSphereShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShape__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShape *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btCapsuleShape *)new btCapsuleShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCapsuleShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCapsuleShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCapsuleShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCapsuleShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_setMargin(void * jarg1, float jarg2) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCapsuleShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShape_getName(void * jarg1) {
  char * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (char *)((btCapsuleShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCapsuleShape_getUpAxis(void * jarg1) {
  int jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (int)((btCapsuleShape const *)arg1)->getUpAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCapsuleShape_getRadius(void * jarg1) {
  float jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (btScalar)((btCapsuleShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCapsuleShape_getHalfHeight(void * jarg1) {
  float jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btScalar result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (btScalar)((btCapsuleShape const *)arg1)->getHalfHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShape_setLocalScaling(void * jarg1, void * jarg2) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCapsuleShape_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  btVector3 result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = ((btCapsuleShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCapsuleShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  int result;
  
  arg1 = (btCapsuleShape *)jarg1; 
  result = (int)((btCapsuleShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCapsuleShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShape(void * jarg1) {
  btCapsuleShape *arg1 = (btCapsuleShape *) 0 ;
  
  arg1 = (btCapsuleShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShapeX(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeX *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btCapsuleShapeX *)new btCapsuleShapeX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShapeX_getName(void * jarg1) {
  char * jresult ;
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShapeX *)jarg1; 
  result = (char *)((btCapsuleShapeX const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShapeX(void * jarg1) {
  btCapsuleShapeX *arg1 = (btCapsuleShapeX *) 0 ;
  
  arg1 = (btCapsuleShapeX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShapeZ(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btCapsuleShapeZ *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btCapsuleShapeZ *)new btCapsuleShapeZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShapeZ_getName(void * jarg1) {
  char * jresult ;
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShapeZ *)jarg1; 
  result = (char *)((btCapsuleShapeZ const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShapeZ(void * jarg1) {
  btCapsuleShapeZ *arg1 = (btCapsuleShapeZ *) 0 ;
  
  arg1 = (btCapsuleShapeZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  arg2 = (btConvexInternalShapeData *)jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCapsuleShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShapeData_m_upAxis_set(void * jarg1, int jarg2) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upAxis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCapsuleShapeData_m_upAxis_get(void * jarg1) {
  int jresult ;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  int result;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  result = (int) ((arg1)->m_upAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCapsuleShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCapsuleShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCapsuleShapeData() {
  void * jresult ;
  btCapsuleShapeData *result = 0 ;
  
  result = (btCapsuleShapeData *)new btCapsuleShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCapsuleShapeData(void * jarg1) {
  btCapsuleShapeData *arg1 = (btCapsuleShapeData *) 0 ;
  
  arg1 = (btCapsuleShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_getHalfExtentsWithMargin(void * jarg1) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = ((btCylinderShape const *)arg1)->getHalfExtentsWithMargin();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_getHalfExtentsWithoutMargin(void * jarg1) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (btVector3 *) &((btCylinderShape const *)arg1)->getHalfExtentsWithoutMargin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShape(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btCylinderShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCylinderShape *)new btCylinderShape((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCylinderShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCylinderShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCylinderShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_setMargin(void * jarg1, float jarg2) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCylinderShape_getUpAxis(void * jarg1) {
  int jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (int)((btCylinderShape const *)arg1)->getUpAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShape_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = ((btCylinderShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCylinderShape_getRadius(void * jarg1) {
  float jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btScalar result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (btScalar)((btCylinderShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShape_setLocalScaling(void * jarg1, void * jarg2) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShape_getName(void * jarg1) {
  char * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (char *)((btCylinderShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCylinderShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  int result;
  
  arg1 = (btCylinderShape *)jarg1; 
  result = (int)((btCylinderShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCylinderShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShape(void * jarg1) {
  btCylinderShape *arg1 = (btCylinderShape *) 0 ;
  
  arg1 = (btCylinderShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShapeX(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btCylinderShapeX *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCylinderShapeX *)new btCylinderShapeX((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShapeX_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShapeX const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeX_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCylinderShapeX const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShapeX_getName(void * jarg1) {
  char * jresult ;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  result = (char *)((btCylinderShapeX const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCylinderShapeX_getRadius(void * jarg1) {
  float jresult ;
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  btScalar result;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  result = (btScalar)((btCylinderShapeX const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShapeX(void * jarg1) {
  btCylinderShapeX *arg1 = (btCylinderShapeX *) 0 ;
  
  arg1 = (btCylinderShapeX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShapeZ(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btCylinderShapeZ *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btCylinderShapeZ *)new btCylinderShapeZ((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShapeZ_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btCylinderShapeZ const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeZ_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btCylinderShapeZ const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShapeZ_getName(void * jarg1) {
  char * jresult ;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  result = (char *)((btCylinderShapeZ const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCylinderShapeZ_getRadius(void * jarg1) {
  float jresult ;
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  btScalar result;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  result = (btScalar)((btCylinderShapeZ const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShapeZ(void * jarg1) {
  btCylinderShapeZ *arg1 = (btCylinderShapeZ *) 0 ;
  
  arg1 = (btCylinderShapeZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  arg2 = (btConvexInternalShapeData *)jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCylinderShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeData_m_upAxis_set(void * jarg1, int jarg2) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upAxis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCylinderShapeData_m_upAxis_get(void * jarg1) {
  int jresult ;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  int result;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  result = (int) ((arg1)->m_upAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCylinderShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCylinderShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCylinderShapeData() {
  void * jresult ;
  btCylinderShapeData *result = 0 ;
  
  result = (btCylinderShapeData *)new btCylinderShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCylinderShapeData(void * jarg1) {
  btCylinderShapeData *arg1 = (btCylinderShapeData *) 0 ;
  
  arg1 = (btCylinderShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeShape(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShape *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConeShape *)new btConeShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConeShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConeShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btConeShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeShape_getRadius(void * jarg1) {
  float jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  arg1 = (btConeShape *)jarg1; 
  result = (btScalar)((btConeShape const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeShape_getHeight(void * jarg1) {
  float jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar result;
  
  arg1 = (btConeShape *)jarg1; 
  result = (btScalar)((btConeShape const *)arg1)->getHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConeShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeShape_getName(void * jarg1) {
  char * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  result = (char *)((btConeShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_setConeUpIndex(void * jarg1, int jarg2) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  int arg2 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConeUpIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeShape_getConeUpIndex(void * jarg1) {
  int jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  arg1 = (btConeShape *)jarg1; 
  result = (int)((btConeShape const *)arg1)->getConeUpIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShape_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 result;
  
  arg1 = (btConeShape *)jarg1; 
  result = ((btConeShape const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  int result;
  
  arg1 = (btConeShape *)jarg1; 
  result = (int)((btConeShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btConeShape *arg1 = (btConeShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btConeShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeShape(void * jarg1) {
  btConeShape *arg1 = (btConeShape *) 0 ;
  
  arg1 = (btConeShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeShapeX(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeX *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConeShapeX *)new btConeShapeX(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShapeX_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  btVector3 result;
  
  arg1 = (btConeShapeX *)jarg1; 
  result = ((btConeShapeX const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeShapeX_getName(void * jarg1) {
  char * jresult ;
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeShapeX *)jarg1; 
  result = (char *)((btConeShapeX const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeShapeX(void * jarg1) {
  btConeShapeX *arg1 = (btConeShapeX *) 0 ;
  
  arg1 = (btConeShapeX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeShapeZ(float jarg1, float jarg2) {
  void * jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btConeShapeZ *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btConeShapeZ *)new btConeShapeZ(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShapeZ_getAnisotropicRollingFrictionDirection(void * jarg1) {
  void * jresult ;
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  btVector3 result;
  
  arg1 = (btConeShapeZ *)jarg1; 
  result = ((btConeShapeZ const *)arg1)->getAnisotropicRollingFrictionDirection();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeShapeZ_getName(void * jarg1) {
  char * jresult ;
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeShapeZ *)jarg1; 
  result = (char *)((btConeShapeZ const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeShapeZ(void * jarg1) {
  btConeShapeZ *arg1 = (btConeShapeZ *) 0 ;
  
  arg1 = (btConeShapeZ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  arg1 = (btConeShapeData *)jarg1; 
  arg2 = (btConvexInternalShapeData *)jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  arg1 = (btConeShapeData *)jarg1; 
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShapeData_m_upIndex_set(void * jarg1, int jarg2) {
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btConeShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_upIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeShapeData_m_upIndex_get(void * jarg1) {
  int jresult ;
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  int result;
  
  arg1 = (btConeShapeData *)jarg1; 
  result = (int) ((arg1)->m_upIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btConeShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeShapeData() {
  void * jresult ;
  btConeShapeData *result = 0 ;
  
  result = (btConeShapeData *)new btConeShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeShapeData(void * jarg1) {
  btConeShapeData *arg1 = (btConeShapeData *) 0 ;
  
  arg1 = (btConeShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleCallback(void * jarg1) {
  btTriangleCallback *arg1 = (btTriangleCallback *) 0 ;
  
  arg1 = (btTriangleCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleCallback_processTriangle(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btTriangleCallback *arg1 = (btTriangleCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btTriangleCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->processTriangle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btInternalTriangleIndexCallback(void * jarg1) {
  btInternalTriangleIndexCallback *arg1 = (btInternalTriangleIndexCallback *) 0 ;
  
  arg1 = (btInternalTriangleIndexCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btInternalTriangleIndexCallback_internalProcessTriangleIndex(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btInternalTriangleIndexCallback *arg1 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btInternalTriangleIndexCallback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->internalProcessTriangleIndex(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConcaveShape(void * jarg1) {
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  
  arg1 = (btConcaveShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConcaveShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConcaveShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btConcaveShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConcaveShape_getMargin(void * jarg1) {
  float jresult ;
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar result;
  
  arg1 = (btConcaveShape *)jarg1; 
  result = (btScalar)((btConcaveShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConcaveShape_setMargin(void * jarg1, float jarg2) {
  btConcaveShape *arg1 = (btConcaveShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConcaveShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btStaticPlaneShape(void * jarg1, float jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btStaticPlaneShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btScalar)jarg2; 
  result = (btStaticPlaneShape *)new btStaticPlaneShape((btVector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStaticPlaneShape(void * jarg1) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btStaticPlaneShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btStaticPlaneShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btStaticPlaneShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShape_setLocalScaling(void * jarg1, void * jarg2) {
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (btVector3 *) &((btStaticPlaneShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShape_getPlaneNormal(void * jarg1) {
  void * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (btVector3 *) &((btStaticPlaneShape const *)arg1)->getPlaneNormal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btStaticPlaneShape_getPlaneConstant(void * jarg1) {
  float jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (btScalar *) &((btStaticPlaneShape const *)arg1)->getPlaneConstant();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStaticPlaneShape_getName(void * jarg1) {
  char * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (char *)((btStaticPlaneShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStaticPlaneShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  int result;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  result = (int)((btStaticPlaneShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStaticPlaneShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btStaticPlaneShape *arg1 = (btStaticPlaneShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStaticPlaneShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btStaticPlaneShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_collisionShapeData_set(void * jarg1, void * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_collisionShapeData_get(void * jarg1) {
  void * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_localScaling_set(void * jarg1, void * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_localScaling = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_localScaling_get(void * jarg1) {
  void * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_localScaling);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeNormal_set(void * jarg1, void * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_planeNormal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeNormal_get(void * jarg1) {
  void * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_planeNormal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeConstant_set(void * jarg1, float jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_planeConstant = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_planeConstant_get(void * jarg1) {
  float jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  float result;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (float) ((arg1)->m_planeConstant);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_pad_set(void * jarg1, char * jarg2) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStaticPlaneShapeData_m_pad_get(void * jarg1) {
  char * jresult ;
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btStaticPlaneShapeData() {
  void * jresult ;
  btStaticPlaneShapeData *result = 0 ;
  
  result = (btStaticPlaneShapeData *)new btStaticPlaneShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStaticPlaneShapeData(void * jarg1) {
  btStaticPlaneShapeData *arg1 = (btStaticPlaneShapeData *) 0 ;
  
  arg1 = (btStaticPlaneShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  int arg3 ;
  btConvexHullShape *result = 0 ;
  
  arg1 = (btScalar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  btScalar *arg1 = (btScalar *) 0 ;
  int arg2 ;
  btConvexHullShape *result = 0 ;
  
  arg1 = (btScalar *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_2(void * jarg1) {
  void * jresult ;
  btScalar *arg1 = (btScalar *) 0 ;
  btConvexHullShape *result = 0 ;
  
  arg1 = (btScalar *)jarg1; 
  result = (btConvexHullShape *)new btConvexHullShape((btScalar const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShape__SWIG_3() {
  void * jresult ;
  btConvexHullShape *result = 0 ;
  
  result = (btConvexHullShape *)new btConvexHullShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_addPoint__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->addPoint((btVector3 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_addPoint__SWIG_1(void * jarg1, void * jarg2) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addPoint((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_getUnscaledPoints__SWIG_0(void * jarg1) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (btVector3 *)(arg1)->getUnscaledPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_getPoints(void * jarg1) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (btVector3 *)((btConvexHullShape const *)arg1)->getPoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_getScaledPoint(void * jarg1, int jarg2) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((btConvexHullShape const *)arg1)->getScaledPoint(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumPoints(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexHullShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btConvexHullShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_project(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  btScalar *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg5 = (btScalar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexHullShape const *)arg1)->project((btTransform const &)*arg2,(btVector3 const &)*arg3,*arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexHullShape_getName(void * jarg1) {
  char * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (char *)((btConvexHullShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumVertices(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumEdges(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexHullShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexHullShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btConvexHullShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btConvexHullShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btConvexHullShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  int result;
  
  arg1 = (btConvexHullShape *)jarg1; 
  result = (int)((btConvexHullShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexHullShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btConvexHullShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexHullShape(void * jarg1) {
  btConvexHullShape *arg1 = (btConvexHullShape *) 0 ;
  
  arg1 = (btConvexHullShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (btConvexInternalShapeData *)jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsFloatPtr_set(void * jarg1, void * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_unscaledPointsFloatPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsFloatPtr_get(void * jarg1) {
  void * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (btVector3FloatData *) ((arg1)->m_unscaledPointsFloatPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsDoublePtr_set(void * jarg1, void * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_unscaledPointsDoublePtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexHullShapeData_m_unscaledPointsDoublePtr_get(void * jarg1) {
  void * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (btVector3DoubleData *) ((arg1)->m_unscaledPointsDoublePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_numUnscaledPoints_set(void * jarg1, int jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numUnscaledPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexHullShapeData_m_numUnscaledPoints_get(void * jarg1) {
  int jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  int result;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (int) ((arg1)->m_numUnscaledPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexHullShapeData_m_padding3_set(void * jarg1, char * jarg2) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding3, (const char *)arg2, 4-1);
      arg1->m_padding3[4-1] = 0;
    } else {
      arg1->m_padding3[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexHullShapeData_m_padding3_get(void * jarg1) {
  char * jresult ;
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexHullShapeData() {
  void * jresult ;
  btConvexHullShapeData *result = 0 ;
  
  result = (btConvexHullShapeData *)new btConvexHullShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexHullShapeData(void * jarg1) {
  btConvexHullShapeData *arg1 = (btConvexHullShapeData *) 0 ;
  
  arg1 = (btConvexHullShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStridingMeshInterface(void * jarg1) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_InternalProcessAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btInternalTriangleIndexCallback *arg2 = (btInternalTriangleIndexCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (btInternalTriangleIndexCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btStridingMeshInterface const *)arg1)->InternalProcessAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_calculateAabbBruteForce(void * jarg1, void * jarg2, void * jarg3) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->calculateAabbBruteForce(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg10 = (int)jarg10; 
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_getLockedVertexIndexBase__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg10 = (int)jarg10; 
  ((btStridingMeshInterface const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_getLockedReadOnlyVertexIndexBase__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  ((btStridingMeshInterface const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_unLockVertexBase(void * jarg1, int jarg2) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->unLockVertexBase(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_unLockReadOnlyVertexBase(void * jarg1, int jarg2) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (int)jarg2; 
  ((btStridingMeshInterface const *)arg1)->unLockReadOnlyVertexBase(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStridingMeshInterface_getNumSubParts(void * jarg1) {
  int jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int result;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  result = (int)((btStridingMeshInterface const *)arg1)->getNumSubParts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_preallocateVertices(void * jarg1, int jarg2) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateVertices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_preallocateIndices(void * jarg1, int jarg2) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int arg2 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateIndices(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btStridingMeshInterface_hasPremadeAabb(void * jarg1) {
  unsigned int jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool result;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  result = (bool)((btStridingMeshInterface const *)arg1)->hasPremadeAabb();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_setPremadeAabb(void * jarg1, void * jarg2, void * jarg3) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btStridingMeshInterface const *)arg1)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_getPremadeAabb(void * jarg1, void * jarg2, void * jarg3) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  ((btStridingMeshInterface const *)arg1)->getPremadeAabb(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStridingMeshInterface_getScaling(void * jarg1) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  result = (btVector3 *) &((btStridingMeshInterface const *)arg1)->getScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterface_setScaling(void * jarg1, void * jarg2) {
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setScaling((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStridingMeshInterface_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  int result;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  result = (int)((btStridingMeshInterface const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStridingMeshInterface_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btStridingMeshInterface const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIntIndexData_m_value_set(void * jarg1, int jarg2) {
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  int arg2 ;
  
  arg1 = (btIntIndexData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIntIndexData_m_value_get(void * jarg1) {
  int jresult ;
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  int result;
  
  arg1 = (btIntIndexData *)jarg1; 
  result = (int) ((arg1)->m_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btIntIndexData() {
  void * jresult ;
  btIntIndexData *result = 0 ;
  
  result = (btIntIndexData *)new btIntIndexData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btIntIndexData(void * jarg1) {
  btIntIndexData *arg1 = (btIntIndexData *) 0 ;
  
  arg1 = (btIntIndexData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btShortIntIndexData_m_value_set(void * jarg1, short jarg2) {
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  short arg2 ;
  
  arg1 = (btShortIntIndexData *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->m_value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_btShortIntIndexData_m_value_get(void * jarg1) {
  short jresult ;
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  short result;
  
  arg1 = (btShortIntIndexData *)jarg1; 
  result = (short) ((arg1)->m_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btShortIntIndexData_m_pad_set(void * jarg1, char * jarg2) {
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  char *arg2 ;
  
  arg1 = (btShortIntIndexData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btShortIntIndexData_m_pad_get(void * jarg1) {
  char * jresult ;
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btShortIntIndexData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btShortIntIndexData() {
  void * jresult ;
  btShortIntIndexData *result = 0 ;
  
  result = (btShortIntIndexData *)new btShortIntIndexData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btShortIntIndexData(void * jarg1) {
  btShortIntIndexData *arg1 = (btShortIntIndexData *) 0 ;
  
  arg1 = (btShortIntIndexData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btShortIntIndexTripletData_m_values_set(void * jarg1, void * jarg2) {
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  short *arg2 ;
  
  arg1 = (btShortIntIndexTripletData *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->m_values;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btShortIntIndexTripletData_m_values_get(void * jarg1) {
  void * jresult ;
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  short *result = 0 ;
  
  arg1 = (btShortIntIndexTripletData *)jarg1; 
  result = (short *)(short *) ((arg1)->m_values);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btShortIntIndexTripletData_m_pad_set(void * jarg1, char * jarg2) {
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  char *arg2 ;
  
  arg1 = (btShortIntIndexTripletData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 2-1);
      arg1->m_pad[2-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btShortIntIndexTripletData_m_pad_get(void * jarg1) {
  char * jresult ;
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btShortIntIndexTripletData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btShortIntIndexTripletData() {
  void * jresult ;
  btShortIntIndexTripletData *result = 0 ;
  
  result = (btShortIntIndexTripletData *)new btShortIntIndexTripletData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btShortIntIndexTripletData(void * jarg1) {
  btShortIntIndexTripletData *arg1 = (btShortIntIndexTripletData *) 0 ;
  
  arg1 = (btShortIntIndexTripletData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCharIndexTripletData_m_values_set(void * jarg1, void * jarg2) {
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  unsigned char *arg2 ;
  
  arg1 = (btCharIndexTripletData *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->m_values;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCharIndexTripletData_m_values_get(void * jarg1) {
  void * jresult ;
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btCharIndexTripletData *)jarg1; 
  result = (unsigned char *)(unsigned char *) ((arg1)->m_values);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCharIndexTripletData_m_pad_set(void * jarg1, char jarg2) {
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  char arg2 ;
  
  arg1 = (btCharIndexTripletData *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->m_pad = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_btCharIndexTripletData_m_pad_get(void * jarg1) {
  char jresult ;
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  char result;
  
  arg1 = (btCharIndexTripletData *)jarg1; 
  result = (char) ((arg1)->m_pad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCharIndexTripletData() {
  void * jresult ;
  btCharIndexTripletData *result = 0 ;
  
  result = (btCharIndexTripletData *)new btCharIndexTripletData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCharIndexTripletData(void * jarg1) {
  btCharIndexTripletData *arg1 = (btCharIndexTripletData *) 0 ;
  
  arg1 = (btCharIndexTripletData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_vertices3f_set(void * jarg1, void * jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_vertices3f = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMeshPartData_m_vertices3f_get(void * jarg1) {
  void * jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (btVector3FloatData *) ((arg1)->m_vertices3f);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_vertices3d_set(void * jarg1, void * jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_vertices3d = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMeshPartData_m_vertices3d_get(void * jarg1) {
  void * jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (btVector3DoubleData *) ((arg1)->m_vertices3d);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_indices32_set(void * jarg1, void * jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btIntIndexData *arg2 = (btIntIndexData *) 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (btIntIndexData *)jarg2; 
  if (arg1) (arg1)->m_indices32 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMeshPartData_m_indices32_get(void * jarg1) {
  void * jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btIntIndexData *result = 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (btIntIndexData *) ((arg1)->m_indices32);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_3indices16_set(void * jarg1, void * jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexTripletData *arg2 = (btShortIntIndexTripletData *) 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (btShortIntIndexTripletData *)jarg2; 
  if (arg1) (arg1)->m_3indices16 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMeshPartData_m_3indices16_get(void * jarg1) {
  void * jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexTripletData *result = 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (btShortIntIndexTripletData *) ((arg1)->m_3indices16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_3indices8_set(void * jarg1, void * jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btCharIndexTripletData *arg2 = (btCharIndexTripletData *) 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (btCharIndexTripletData *)jarg2; 
  if (arg1) (arg1)->m_3indices8 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMeshPartData_m_3indices8_get(void * jarg1) {
  void * jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btCharIndexTripletData *result = 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (btCharIndexTripletData *) ((arg1)->m_3indices8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_indices16_set(void * jarg1, void * jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexData *arg2 = (btShortIntIndexData *) 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (btShortIntIndexData *)jarg2; 
  if (arg1) (arg1)->m_indices16 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMeshPartData_m_indices16_get(void * jarg1) {
  void * jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  btShortIntIndexData *result = 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (btShortIntIndexData *) ((arg1)->m_indices16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_numTriangles_set(void * jarg1, int jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int arg2 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numTriangles = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMeshPartData_m_numTriangles_get(void * jarg1) {
  int jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int result;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (int) ((arg1)->m_numTriangles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMeshPartData_m_numVertices_set(void * jarg1, int jarg2) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int arg2 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numVertices = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMeshPartData_m_numVertices_get(void * jarg1) {
  int jresult ;
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  int result;
  
  arg1 = (btMeshPartData *)jarg1; 
  result = (int) ((arg1)->m_numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMeshPartData() {
  void * jresult ;
  btMeshPartData *result = 0 ;
  
  result = (btMeshPartData *)new btMeshPartData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMeshPartData(void * jarg1) {
  btMeshPartData *arg1 = (btMeshPartData *) 0 ;
  
  arg1 = (btMeshPartData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_meshPartsPtr_set(void * jarg1, void * jarg2) {
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btMeshPartData *arg2 = (btMeshPartData *) 0 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  arg2 = (btMeshPartData *)jarg2; 
  if (arg1) (arg1)->m_meshPartsPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_meshPartsPtr_get(void * jarg1) {
  void * jresult ;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btMeshPartData *result = 0 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  result = (btMeshPartData *) ((arg1)->m_meshPartsPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_scaling_set(void * jarg1, void * jarg2) {
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_scaling = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_scaling_get(void * jarg1) {
  void * jresult ;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_scaling);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_numMeshParts_set(void * jarg1, int jarg2) {
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  int arg2 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numMeshParts = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_numMeshParts_get(void * jarg1) {
  int jresult ;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  int result;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  result = (int) ((arg1)->m_numMeshParts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_padding_set(void * jarg1, char * jarg2) {
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  char *arg2 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btStridingMeshInterfaceData_m_padding_get(void * jarg1) {
  char * jresult ;
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btStridingMeshInterfaceData() {
  void * jresult ;
  btStridingMeshInterfaceData *result = 0 ;
  
  result = (btStridingMeshInterfaceData *)new btStridingMeshInterfaceData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btStridingMeshInterfaceData(void * jarg1) {
  btStridingMeshInterfaceData *arg1 = (btStridingMeshInterfaceData *) 0 ;
  
  arg1 = (btStridingMeshInterfaceData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_numTriangles_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numTriangles = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_numTriangles_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_numTriangles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexBase_set(void * jarg1, void * jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_triangleIndexBase = (unsigned char const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexBase_get(void * jarg1) {
  void * jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (unsigned char *) ((arg1)->m_triangleIndexBase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexStride_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndexStride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_triangleIndexStride_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_triangleIndexStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_numVertices_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numVertices = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_numVertices_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_numVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_vertexBase_set(void * jarg1, void * jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->m_vertexBase = (unsigned char const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btIndexedMesh_m_vertexBase_get(void * jarg1) {
  void * jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (unsigned char *) ((arg1)->m_vertexBase);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_vertexStride_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_vertexStride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_vertexStride_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  int result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (int) ((arg1)->m_vertexStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_indexType_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (PHY_ScalarType)jarg2; 
  if (arg1) (arg1)->m_indexType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_indexType_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (PHY_ScalarType) ((arg1)->m_indexType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIndexedMesh_m_vertexType_set(void * jarg1, int jarg2) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType arg2 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  arg2 = (PHY_ScalarType)jarg2; 
  if (arg1) (arg1)->m_vertexType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIndexedMesh_m_vertexType_get(void * jarg1) {
  int jresult ;
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  PHY_ScalarType result;
  
  arg1 = (btIndexedMesh *)jarg1; 
  result = (PHY_ScalarType) ((arg1)->m_vertexType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btIndexedMesh() {
  void * jresult ;
  btIndexedMesh *result = 0 ;
  
  result = (btIndexedMesh *)new btIndexedMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btIndexedMesh(void * jarg1) {
  btIndexedMesh *arg1 = (btIndexedMesh *) 0 ;
  
  arg1 = (btIndexedMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleIndexVertexArray__SWIG_0() {
  void * jresult ;
  btTriangleIndexVertexArray *result = 0 ;
  
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleIndexVertexArray(void * jarg1) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleIndexVertexArray__SWIG_1(int jarg1, void * jarg2, int jarg3, int jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  btScalar *arg5 = (btScalar *) 0 ;
  int arg6 ;
  btTriangleIndexVertexArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btScalar *)jarg5; 
  arg6 = (int)jarg6; 
  result = (btTriangleIndexVertexArray *)new btTriangleIndexVertexArray(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_addIndexedMesh__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  PHY_ScalarType arg3 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btIndexedMesh *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btIndexedMesh const & type is null", 0);
    return ;
  } 
  arg3 = (PHY_ScalarType)jarg3; 
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_addIndexedMesh__SWIG_1(void * jarg1, void * jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btIndexedMesh *arg2 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btIndexedMesh *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btIndexedMesh const & type is null", 0);
    return ;
  } 
  (arg1)->addIndexedMesh((btIndexedMesh const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg10 = (int)jarg10; 
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedVertexIndexBase__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  (arg1)->getLockedVertexIndexBase(arg2,*arg3,*arg4,*arg5,arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  int arg10 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg10 = (int)jarg10; 
  ((btTriangleIndexVertexArray const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = 0 ;
  PHY_ScalarType *arg4 = 0 ;
  int *arg5 = 0 ;
  unsigned char **arg6 = (unsigned char **) 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  PHY_ScalarType *arg9 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg4 = (PHY_ScalarType *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg6 = (unsigned char **)jarg6; 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & type is null", 0);
    return ;
  } 
  arg9 = (PHY_ScalarType *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PHY_ScalarType & type is null", 0);
    return ;
  } 
  ((btTriangleIndexVertexArray const *)arg1)->getLockedReadOnlyVertexIndexBase((unsigned char const **)arg2,*arg3,*arg4,*arg5,(unsigned char const **)arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_unLockVertexBase(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->unLockVertexBase(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_unLockReadOnlyVertexBase(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  ((btTriangleIndexVertexArray const *)arg1)->unLockReadOnlyVertexBase(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getNumSubParts(void * jarg1) {
  int jresult ;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int result;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  result = (int)((btTriangleIndexVertexArray const *)arg1)->getNumSubParts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getIndexedMeshArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  IndexedMeshArray *result = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  result = (IndexedMeshArray *) &(arg1)->getIndexedMeshArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_preallocateVertices(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateVertices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_preallocateIndices(void * jarg1, int jarg2) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateIndices(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTriangleIndexVertexArray_hasPremadeAabb(void * jarg1) {
  unsigned int jresult ;
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  bool result;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  result = (bool)((btTriangleIndexVertexArray const *)arg1)->hasPremadeAabb();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_setPremadeAabb(void * jarg1, void * jarg2, void * jarg3) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btTriangleIndexVertexArray const *)arg1)->setPremadeAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleIndexVertexArray_getPremadeAabb(void * jarg1, void * jarg2, void * jarg3) {
  btTriangleIndexVertexArray *arg1 = (btTriangleIndexVertexArray *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  
  arg1 = (btTriangleIndexVertexArray *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  ((btTriangleIndexVertexArray const *)arg1)->getPremadeAabb(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_m_weldingThreshold_set(void * jarg1, float jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_weldingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleMesh_m_weldingThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (btScalar) ((arg1)->m_weldingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMesh__SWIG_0(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  btTriangleMesh *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  result = (btTriangleMesh *)new btTriangleMesh(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMesh__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  btTriangleMesh *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (btTriangleMesh *)new btTriangleMesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMesh__SWIG_2() {
  void * jresult ;
  btTriangleMesh *result = 0 ;
  
  result = (btTriangleMesh *)new btTriangleMesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTriangleMesh_getUse32bitIndices(void * jarg1) {
  unsigned int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  bool result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (bool)((btTriangleMesh const *)arg1)->getUse32bitIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTriangleMesh_getUse4componentVertices(void * jarg1) {
  unsigned int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  bool result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (bool)((btTriangleMesh const *)arg1)->getUse4componentVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_addTriangle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  (arg1)->addTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_addTriangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleMesh_getNumTriangles(void * jarg1) {
  int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  result = (int)((btTriangleMesh const *)arg1)->getNumTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_preallocateVertices(void * jarg1, int jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateVertices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_preallocateIndices(void * jarg1, int jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->preallocateIndices(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleMesh_findOrAddVertex(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  btVector3 *arg2 = 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->findOrAddVertex((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMesh_addIndex(void * jarg1, int jarg2) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleMesh(void * jarg1) {
  btTriangleMesh *arg1 = (btTriangleMesh *) 0 ;
  
  arg1 = (btTriangleMesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexTriangleMeshShape__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btConvexTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (btConvexTriangleMeshShape *)new btConvexTriangleMeshShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConvexTriangleMeshShape__SWIG_1(void * jarg1) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  btConvexTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  result = (btConvexTriangleMeshShape *)new btConvexTriangleMeshShape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getMeshInterface__SWIG_0(void * jarg1) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (btStridingMeshInterface *)(arg1)->getMeshInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexTriangleMeshShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btConvexTriangleMeshShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btConvexTriangleMeshShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (char *)((btConvexTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getNumVertices(void * jarg1) {
  int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getNumEdges(void * jarg1) {
  int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexTriangleMeshShape const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btConvexTriangleMeshShape const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getNumPlanes(void * jarg1) {
  int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (int)((btConvexTriangleMeshShape const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btConvexTriangleMeshShape const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btConvexTriangleMeshShape_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btConvexTriangleMeshShape const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btConvexTriangleMeshShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConvexTriangleMeshShape_calculatePrincipalAxisTransform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar *arg4 = 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btScalar *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btConvexTriangleMeshShape const *)arg1)->calculatePrincipalAxisTransform(*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConvexTriangleMeshShape(void * jarg1) {
  btConvexTriangleMeshShape *arg1 = (btConvexTriangleMeshShape *) 0 ;
  
  arg1 = (btConvexTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleMeshShape(void * jarg1) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btTriangleMeshShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_recalcLocalAabb(void * jarg1) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  (arg1)->recalcLocalAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btTriangleMeshShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btTriangleMeshShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getMeshInterface__SWIG_0(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btStridingMeshInterface *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btStridingMeshInterface *)(arg1)->getMeshInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getLocalAabbMin(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShape_getLocalAabbMax(void * jarg1) {
  void * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btTriangleMeshShape const *)arg1)->getLocalAabbMax();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btTriangleMeshShape *arg1 = (btTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTriangleMeshShape *)jarg1; 
  result = (char *)((btTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btQuantizedBvhDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btQuantizedBvhFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SUBTREE_SIZE_IN_BYTES_get() {
  int jresult ;
  int result;
  
  result = (int)(2048);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_NUM_PARTS_IN_BITS_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhNode_m_quantizedAabbMin_set(void * jarg1, void * jarg2) {
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhNode_m_quantizedAabbMin_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhNode_m_quantizedAabbMax_set(void * jarg1, void * jarg2) {
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhNode_m_quantizedAabbMax_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_set(void * jarg1, int jarg2) {
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndexOrTriangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  result = (int) ((arg1)->m_escapeIndexOrTriangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btQuantizedBvhNode_isLeafNode(void * jarg1) {
  unsigned int jresult ;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  bool result;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  result = (bool)((btQuantizedBvhNode const *)arg1)->isLeafNode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhNode_getEscapeIndex(void * jarg1) {
  int jresult ;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  result = (int)((btQuantizedBvhNode const *)arg1)->getEscapeIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhNode_getTriangleIndex(void * jarg1) {
  int jresult ;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  result = (int)((btQuantizedBvhNode const *)arg1)->getTriangleIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhNode_getPartId(void * jarg1) {
  int jresult ;
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  result = (int)((btQuantizedBvhNode const *)arg1)->getPartId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuantizedBvhNode() {
  void * jresult ;
  btQuantizedBvhNode *result = 0 ;
  
  result = (btQuantizedBvhNode *)new btQuantizedBvhNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuantizedBvhNode(void * jarg1) {
  btQuantizedBvhNode *arg1 = (btQuantizedBvhNode *) 0 ;
  
  arg1 = (btQuantizedBvhNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNode_m_aabbMinOrg_set(void * jarg1, void * jarg2) {
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOptimizedBvhNode_m_aabbMinOrg_get(void * jarg1) {
  void * jresult ;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_aabbMinOrg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNode_m_aabbMaxOrg_set(void * jarg1, void * jarg2) {
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOptimizedBvhNode_m_aabbMaxOrg_get(void * jarg1) {
  void * jresult ;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_aabbMaxOrg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNode_m_escapeIndex_set(void * jarg1, int jarg2) {
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNode_m_escapeIndex_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  result = (int) ((arg1)->m_escapeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNode_m_subPart_set(void * jarg1, int jarg2) {
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subPart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNode_m_subPart_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  result = (int) ((arg1)->m_subPart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNode_m_triangleIndex_set(void * jarg1, int jarg2) {
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNode_m_triangleIndex_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNode_m_padding_set(void * jarg1, char * jarg2) {
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  char *arg2 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 20-1);
      arg1->m_padding[20-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btOptimizedBvhNode_m_padding_get(void * jarg1) {
  char * jresult ;
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btOptimizedBvhNode() {
  void * jresult ;
  btOptimizedBvhNode *result = 0 ;
  
  result = (btOptimizedBvhNode *)new btOptimizedBvhNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOptimizedBvhNode(void * jarg1) {
  btOptimizedBvhNode *arg1 = (btOptimizedBvhNode *) 0 ;
  
  arg1 = (btOptimizedBvhNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_quantizedAabbMin_set(void * jarg1, void * jarg2) {
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_quantizedAabbMin_get(void * jarg1) {
  void * jresult ;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_quantizedAabbMax_set(void * jarg1, void * jarg2) {
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_quantizedAabbMax_get(void * jarg1) {
  void * jresult ;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_rootNodeIndex_set(void * jarg1, int jarg2) {
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_rootNodeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_rootNodeIndex_get(void * jarg1) {
  int jresult ;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int result;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  result = (int) ((arg1)->m_rootNodeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_subtreeSize_set(void * jarg1, int jarg2) {
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subtreeSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_subtreeSize_get(void * jarg1) {
  int jresult ;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int result;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  result = (int) ((arg1)->m_subtreeSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_padding_set(void * jarg1, void * jarg2) {
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int *arg2 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_padding;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhSubtreeInfo_m_padding_get(void * jarg1) {
  void * jresult ;
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  result = (int *)(int *) ((arg1)->m_padding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhSubtreeInfo() {
  void * jresult ;
  btBvhSubtreeInfo *result = 0 ;
  
  result = (btBvhSubtreeInfo *)new btBvhSubtreeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfo_setAabbFromQuantizeNode(void * jarg1, void * jarg2) {
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  btQuantizedBvhNode *arg2 = 0 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  arg2 = (btQuantizedBvhNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuantizedBvhNode const & type is null", 0);
    return ;
  } 
  (arg1)->setAabbFromQuantizeNode((btQuantizedBvhNode const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBvhSubtreeInfo(void * jarg1) {
  btBvhSubtreeInfo *arg1 = (btBvhSubtreeInfo *) 0 ;
  
  arg1 = (btBvhSubtreeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btNodeOverlapCallback(void * jarg1) {
  btNodeOverlapCallback *arg1 = (btNodeOverlapCallback *) 0 ;
  
  arg1 = (btNodeOverlapCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btNodeOverlapCallback_processNode(void * jarg1, int jarg2, int jarg3) {
  btNodeOverlapCallback *arg1 = (btNodeOverlapCallback *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btNodeOverlapCallback *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->processNode(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuantizedBvh() {
  void * jresult ;
  btQuantizedBvh *result = 0 ;
  
  result = (btQuantizedBvh *)new btQuantizedBvh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuantizedBvh(void * jarg1) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_setQuantizationValues__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_setQuantizationValues__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setQuantizationValues((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvh_getLeafNodeArray(void * jarg1) {
  void * jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  result = (QuantizedNodeArray *) &(arg1)->getLeafNodeArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_buildInternal(void * jarg1) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  (arg1)->buildInternal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_reportAabbOverlappingNodex(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btNodeOverlapCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btQuantizedBvh const *)arg1)->reportAabbOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_reportRayOverlappingNodex(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btNodeOverlapCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btQuantizedBvh const *)arg1)->reportRayOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_reportBoxCastOverlappingNodex(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btNodeOverlapCallback *arg2 = (btNodeOverlapCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btNodeOverlapCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btQuantizedBvh const *)arg1)->reportBoxCastOverlappingNodex(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_quantize(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btQuantizedBvh const *)arg1)->quantize(arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_quantizeWithClamp(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btQuantizedBvh const *)arg1)->quantizeWithClamp(arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvh_unQuantize(void * jarg1, void * jarg2) {
  void * jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  btVector3 result;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  result = ((btQuantizedBvh const *)arg1)->unQuantize((unsigned short const *)arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_setTraversalMode(void * jarg1, int jarg2) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvh::btTraversalMode arg2 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btQuantizedBvh::btTraversalMode)jarg2; 
  (arg1)->setTraversalMode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvh_getQuantizedNodeArray(void * jarg1) {
  void * jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  QuantizedNodeArray *result = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  result = (QuantizedNodeArray *) &(arg1)->getQuantizedNodeArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvh_getSubtreeInfoArray(void * jarg1) {
  void * jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  BvhSubtreeInfoArray *result = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  result = (BvhSubtreeInfoArray *) &(arg1)->getSubtreeInfoArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btQuantizedBvh_calculateSerializeBufferSize(void * jarg1) {
  unsigned int jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  unsigned int result;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  result = (unsigned int)((btQuantizedBvh const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btQuantizedBvh_serialize__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)((btQuantizedBvh const *)arg1)->serialize(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvh_deSerializeInPlace(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  btQuantizedBvh *result = 0 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (btQuantizedBvh *)btQuantizedBvh::deSerializeInPlace(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btQuantizedBvh_getAlignmentSerializationPadding() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)btQuantizedBvh::getAlignmentSerializationPadding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvh_calculateSerializeBufferSizeNew(void * jarg1) {
  int jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  result = (int)((btQuantizedBvh const *)arg1)->calculateSerializeBufferSizeNew();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btQuantizedBvh_serialize__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btQuantizedBvh const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_deSerializeFloat(void * jarg1, void * jarg2) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvhFloatData *arg2 = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btQuantizedBvhFloatData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuantizedBvhFloatData & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeFloat(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvh_deSerializeDouble(void * jarg1, void * jarg2) {
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  btQuantizedBvhDoubleData *arg2 = 0 ;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  arg2 = (btQuantizedBvhDoubleData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuantizedBvhDoubleData & type is null", 0);
    return ;
  } 
  (arg1)->deSerializeDouble(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btQuantizedBvh_isQuantized(void * jarg1) {
  unsigned int jresult ;
  btQuantizedBvh *arg1 = (btQuantizedBvh *) 0 ;
  bool result;
  
  arg1 = (btQuantizedBvh *)jarg1; 
  result = (bool)(arg1)->isQuantized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_rootNodeIndex_set(void * jarg1, int jarg2) {
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_rootNodeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_rootNodeIndex_get(void * jarg1) {
  int jresult ;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int result;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  result = (int) ((arg1)->m_rootNodeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_subtreeSize_set(void * jarg1, int jarg2) {
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subtreeSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_subtreeSize_get(void * jarg1) {
  int jresult ;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  int result;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  result = (int) ((arg1)->m_subtreeSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_quantizedAabbMin_set(void * jarg1, void * jarg2) {
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_quantizedAabbMin_get(void * jarg1) {
  void * jresult ;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_quantizedAabbMax_set(void * jarg1, void * jarg2) {
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhSubtreeInfoData_m_quantizedAabbMax_get(void * jarg1) {
  void * jresult ;
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhSubtreeInfoData() {
  void * jresult ;
  btBvhSubtreeInfoData *result = 0 ;
  
  result = (btBvhSubtreeInfoData *)new btBvhSubtreeInfoData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBvhSubtreeInfoData(void * jarg1) {
  btBvhSubtreeInfoData *arg1 = (btBvhSubtreeInfoData *) 0 ;
  
  arg1 = (btBvhSubtreeInfoData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_aabbMinOrg_set(void * jarg1, void * jarg2) {
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_aabbMinOrg_get(void * jarg1) {
  void * jresult ;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_aabbMinOrg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set(void * jarg1, void * jarg2) {
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_aabbMaxOrg_get(void * jarg1) {
  void * jresult ;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_aabbMaxOrg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_escapeIndex_set(void * jarg1, int jarg2) {
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_escapeIndex_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  result = (int) ((arg1)->m_escapeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_subPart_set(void * jarg1, int jarg2) {
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subPart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_subPart_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  result = (int) ((arg1)->m_subPart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_triangleIndex_set(void * jarg1, int jarg2) {
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_triangleIndex_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_pad_set(void * jarg1, char * jarg2) {
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  char *arg2 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btOptimizedBvhNodeFloatData_m_pad_get(void * jarg1) {
  char * jresult ;
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btOptimizedBvhNodeFloatData() {
  void * jresult ;
  btOptimizedBvhNodeFloatData *result = 0 ;
  
  result = (btOptimizedBvhNodeFloatData *)new btOptimizedBvhNodeFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOptimizedBvhNodeFloatData(void * jarg1) {
  btOptimizedBvhNodeFloatData *arg1 = (btOptimizedBvhNodeFloatData *) 0 ;
  
  arg1 = (btOptimizedBvhNodeFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set(void * jarg1, void * jarg2) {
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_aabbMinOrg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_aabbMinOrg_get(void * jarg1) {
  void * jresult ;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_aabbMinOrg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set(void * jarg1, void * jarg2) {
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_aabbMaxOrg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_get(void * jarg1) {
  void * jresult ;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_aabbMaxOrg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_escapeIndex_set(void * jarg1, int jarg2) {
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_escapeIndex_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  result = (int) ((arg1)->m_escapeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_subPart_set(void * jarg1, int jarg2) {
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_subPart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_subPart_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  result = (int) ((arg1)->m_subPart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_triangleIndex_set(void * jarg1, int jarg2) {
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_triangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_triangleIndex_get(void * jarg1) {
  int jresult ;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  int result;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  result = (int) ((arg1)->m_triangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_pad_set(void * jarg1, char * jarg2) {
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btOptimizedBvhNodeDoubleData_m_pad_get(void * jarg1) {
  char * jresult ;
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btOptimizedBvhNodeDoubleData() {
  void * jresult ;
  btOptimizedBvhNodeDoubleData *result = 0 ;
  
  result = (btOptimizedBvhNodeDoubleData *)new btOptimizedBvhNodeDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOptimizedBvhNodeDoubleData(void * jarg1) {
  btOptimizedBvhNodeDoubleData *arg1 = (btOptimizedBvhNodeDoubleData *) 0 ;
  
  arg1 = (btOptimizedBvhNodeDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhNodeData_m_quantizedAabbMin_set(void * jarg1, void * jarg2) {
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btQuantizedBvhNodeData *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMin;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhNodeData_m_quantizedAabbMin_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btQuantizedBvhNodeData *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhNodeData_m_quantizedAabbMax_set(void * jarg1, void * jarg2) {
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *arg2 ;
  
  arg1 = (btQuantizedBvhNodeData *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  {
    size_t ii;
    unsigned short *b = (unsigned short *) arg1->m_quantizedAabbMax;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((unsigned short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhNodeData_m_quantizedAabbMax_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (btQuantizedBvhNodeData *)jarg1; 
  result = (unsigned short *)(unsigned short *) ((arg1)->m_quantizedAabbMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_set(void * jarg1, int jarg2) {
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhNodeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_escapeIndexOrTriangleIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhNodeData *)jarg1; 
  result = (int) ((arg1)->m_escapeIndexOrTriangleIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuantizedBvhNodeData() {
  void * jresult ;
  btQuantizedBvhNodeData *result = 0 ;
  
  result = (btQuantizedBvhNodeData *)new btQuantizedBvhNodeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuantizedBvhNodeData(void * jarg1) {
  btQuantizedBvhNodeData *arg1 = (btQuantizedBvhNodeData *) 0 ;
  
  arg1 = (btQuantizedBvhNodeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_bvhAabbMin_set(void * jarg1, void * jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_bvhAabbMin_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_bvhAabbMin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_bvhAabbMax_set(void * jarg1, void * jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_bvhAabbMax_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_bvhAabbMax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_bvhQuantization_set(void * jarg1, void * jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_bvhQuantization_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_bvhQuantization);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_curNodeIndex_set(void * jarg1, int jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_curNodeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_curNodeIndex_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (int) ((arg1)->m_curNodeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_useQuantization_set(void * jarg1, int jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useQuantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_useQuantization_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (int) ((arg1)->m_useQuantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_numContiguousLeafNodes_set(void * jarg1, int jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_numContiguousLeafNodes_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_set(void * jarg1, int jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_contiguousNodesPtr_set(void * jarg1, void * jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btOptimizedBvhNodeFloatData *arg2 = (btOptimizedBvhNodeFloatData *) 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (btOptimizedBvhNodeFloatData *)jarg2; 
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_contiguousNodesPtr_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btOptimizedBvhNodeFloatData *result = 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (btOptimizedBvhNodeFloatData *) ((arg1)->m_contiguousNodesPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set(void * jarg1, void * jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btQuantizedBvhNodeData *arg2 = (btQuantizedBvhNodeData *) 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (btQuantizedBvhNodeData *)jarg2; 
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btQuantizedBvhNodeData *result = 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_subTreeInfoPtr_set(void * jarg1, void * jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btBvhSubtreeInfoData *arg2 = (btBvhSubtreeInfoData *) 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (btBvhSubtreeInfoData *)jarg2; 
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_subTreeInfoPtr_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  btBvhSubtreeInfoData *result = 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_traversalMode_set(void * jarg1, int jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_traversalMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_traversalMode_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (int) ((arg1)->m_traversalMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_numSubtreeHeaders_set(void * jarg1, int jarg2) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhFloatData_m_numSubtreeHeaders_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  result = (int) ((arg1)->m_numSubtreeHeaders);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuantizedBvhFloatData() {
  void * jresult ;
  btQuantizedBvhFloatData *result = 0 ;
  
  result = (btQuantizedBvhFloatData *)new btQuantizedBvhFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuantizedBvhFloatData(void * jarg1) {
  btQuantizedBvhFloatData *arg1 = (btQuantizedBvhFloatData *) 0 ;
  
  arg1 = (btQuantizedBvhFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_bvhAabbMin_set(void * jarg1, void * jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_bvhAabbMin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_bvhAabbMin_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_bvhAabbMin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_bvhAabbMax_set(void * jarg1, void * jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_bvhAabbMax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_bvhAabbMax_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_bvhAabbMax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_bvhQuantization_set(void * jarg1, void * jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_bvhQuantization = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_bvhQuantization_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_bvhQuantization);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_curNodeIndex_set(void * jarg1, int jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_curNodeIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_curNodeIndex_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (int) ((arg1)->m_curNodeIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_useQuantization_set(void * jarg1, int jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useQuantization = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_useQuantization_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (int) ((arg1)->m_useQuantization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_set(void * jarg1, int jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numContiguousLeafNodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_numContiguousLeafNodes_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (int) ((arg1)->m_numContiguousLeafNodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_set(void * jarg1, int jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numQuantizedContiguousNodes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (int) ((arg1)->m_numQuantizedContiguousNodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_contiguousNodesPtr_set(void * jarg1, void * jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btOptimizedBvhNodeDoubleData *arg2 = (btOptimizedBvhNodeDoubleData *) 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (btOptimizedBvhNodeDoubleData *)jarg2; 
  if (arg1) (arg1)->m_contiguousNodesPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_contiguousNodesPtr_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btOptimizedBvhNodeDoubleData *result = 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (btOptimizedBvhNodeDoubleData *) ((arg1)->m_contiguousNodesPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set(void * jarg1, void * jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btQuantizedBvhNodeData *arg2 = (btQuantizedBvhNodeData *) 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (btQuantizedBvhNodeData *)jarg2; 
  if (arg1) (arg1)->m_quantizedContiguousNodesPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btQuantizedBvhNodeData *result = 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (btQuantizedBvhNodeData *) ((arg1)->m_quantizedContiguousNodesPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_traversalMode_set(void * jarg1, int jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_traversalMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_traversalMode_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (int) ((arg1)->m_traversalMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_numSubtreeHeaders_set(void * jarg1, int jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numSubtreeHeaders = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_numSubtreeHeaders_get(void * jarg1) {
  int jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  int result;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (int) ((arg1)->m_numSubtreeHeaders);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_subTreeInfoPtr_set(void * jarg1, void * jarg2) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btBvhSubtreeInfoData *arg2 = (btBvhSubtreeInfoData *) 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  arg2 = (btBvhSubtreeInfoData *)jarg2; 
  if (arg1) (arg1)->m_subTreeInfoPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btQuantizedBvhDoubleData_m_subTreeInfoPtr_get(void * jarg1) {
  void * jresult ;
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  btBvhSubtreeInfoData *result = 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  result = (btBvhSubtreeInfoData *) ((arg1)->m_subTreeInfoPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btQuantizedBvhDoubleData() {
  void * jresult ;
  btQuantizedBvhDoubleData *result = 0 ;
  
  result = (btQuantizedBvhDoubleData *)new btQuantizedBvhDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btQuantizedBvhDoubleData(void * jarg1) {
  btQuantizedBvhDoubleData *arg1 = (btQuantizedBvhDoubleData *) 0 ;
  
  arg1 = (btQuantizedBvhDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btOptimizedBvh() {
  void * jresult ;
  btOptimizedBvh *result = 0 ;
  
  result = (btOptimizedBvh *)new btOptimizedBvh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btOptimizedBvh(void * jarg1) {
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  
  arg1 = (btOptimizedBvh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvh_build(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  bool arg3 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btOptimizedBvh *)jarg1; 
  arg2 = (btStridingMeshInterface *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->build(arg2,arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvh_refit(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btOptimizedBvh *)jarg1; 
  arg2 = (btStridingMeshInterface *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->refit(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvh_refitPartial(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btOptimizedBvh *)jarg1; 
  arg2 = (btStridingMeshInterface *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->refitPartial(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btOptimizedBvh_updateBvhNodes(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  btStridingMeshInterface *arg2 = (btStridingMeshInterface *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (btOptimizedBvh *)jarg1; 
  arg2 = (btStridingMeshInterface *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->updateBvhNodes(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btOptimizedBvh_serializeInPlace(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  btOptimizedBvh *arg1 = (btOptimizedBvh *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (btOptimizedBvh *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)((btOptimizedBvh const *)arg1)->serializeInPlace(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btOptimizedBvh_deSerializeInPlace(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  btOptimizedBvh *result = 0 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (btOptimizedBvh *)btOptimizedBvh::deSerializeInPlace(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashString_m_string_set(void * jarg1, char * jarg2) {
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->m_string = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_string, (const char *)arg2);
    } else {
      arg1->m_string = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btHashString_m_string_get(void * jarg1) {
  char * jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  char *result = 0 ;
  
  arg1 = (btHashString *)jarg1; 
  result = (char *) ((arg1)->m_string);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashString_m_hash_set(void * jarg1, unsigned int jarg2) {
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_hash = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashString_m_hash_get(void * jarg1) {
  unsigned int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  arg1 = (btHashString *)jarg1; 
  result = (unsigned int) ((arg1)->m_hash);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashString_getHash(void * jarg1) {
  unsigned int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  unsigned int result;
  
  arg1 = (btHashString *)jarg1; 
  result = (unsigned int)((btHashString const *)arg1)->getHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHashString(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  btHashString *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (btHashString *)new btHashString((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHashString_portableStringCompare(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)((btHashString const *)arg1)->portableStringCompare((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashString_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btHashString *arg1 = (btHashString *) 0 ;
  btHashString *arg2 = 0 ;
  bool result;
  
  arg1 = (btHashString *)jarg1; 
  arg2 = (btHashString *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btHashString const & type is null", 0);
    return 0;
  } 
  result = (bool)((btHashString const *)arg1)->equals((btHashString const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHashString(void * jarg1) {
  btHashString *arg1 = (btHashString *) 0 ;
  
  arg1 = (btHashString *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_HASH_NULL_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BT_HASH_NULL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHashInt(int jarg1) {
  void * jresult ;
  int arg1 ;
  btHashInt *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btHashInt *)new btHashInt(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHashInt_getUid1(void * jarg1) {
  int jresult ;
  btHashInt *arg1 = (btHashInt *) 0 ;
  int result;
  
  arg1 = (btHashInt *)jarg1; 
  result = (int)((btHashInt const *)arg1)->getUid1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHashInt_setUid1(void * jarg1, int jarg2) {
  btHashInt *arg1 = (btHashInt *) 0 ;
  int arg2 ;
  
  arg1 = (btHashInt *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUid1(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashInt_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btHashInt *arg1 = (btHashInt *) 0 ;
  btHashInt *arg2 = 0 ;
  bool result;
  
  arg1 = (btHashInt *)jarg1; 
  arg2 = (btHashInt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btHashInt const & type is null", 0);
    return 0;
  } 
  result = (bool)((btHashInt const *)arg1)->equals((btHashInt const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashInt_getHash(void * jarg1) {
  unsigned int jresult ;
  btHashInt *arg1 = (btHashInt *) 0 ;
  unsigned int result;
  
  arg1 = (btHashInt *)jarg1; 
  result = (unsigned int)((btHashInt const *)arg1)->getHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHashInt(void * jarg1) {
  btHashInt *arg1 = (btHashInt *) 0 ;
  
  arg1 = (btHashInt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHashPtr(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  btHashPtr *result = 0 ;
  
  arg1 = (void *)jarg1; 
  result = (btHashPtr *)new btHashPtr((void const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHashPtr_getPointer(void * jarg1) {
  void * jresult ;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  void *result = 0 ;
  
  arg1 = (btHashPtr *)jarg1; 
  result = (void *)((btHashPtr const *)arg1)->getPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashPtr_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  btHashPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (btHashPtr *)jarg1; 
  arg2 = (btHashPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btHashPtr const & type is null", 0);
    return 0;
  } 
  result = (bool)((btHashPtr const *)arg1)->equals((btHashPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHashPtr_getHash(void * jarg1) {
  unsigned int jresult ;
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  unsigned int result;
  
  arg1 = (btHashPtr *)jarg1; 
  result = (unsigned int)((btHashPtr const *)arg1)->getHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHashPtr(void * jarg1) {
  btHashPtr *arg1 = (btHashPtr *) 0 ;
  
  arg1 = (btHashPtr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAstr_set(char * jarg1) {
  char *arg1 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) strcpy((char *)sBulletDNAstr, (const char *)arg1);
    else sBulletDNAstr[0] = 0;
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sBulletDNAstr_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)sBulletDNAstr;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAlen_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  sBulletDNAlen = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sBulletDNAlen_get() {
  int jresult ;
  int result;
  
  result = (int)sBulletDNAlen;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAstr64_set(char * jarg1) {
  char *arg1 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) strcpy((char *)sBulletDNAstr64, (const char *)arg1);
    else sBulletDNAstr64[0] = 0;
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sBulletDNAstr64_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)sBulletDNAstr64;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sBulletDNAlen64_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  sBulletDNAlen64 = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sBulletDNAlen64_get() {
  int jresult ;
  int result;
  
  result = (int)sBulletDNAlen64;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btStrLen(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)btStrLen((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_chunkCode_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_chunkCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_chunkCode_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_chunkCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_length_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_length = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_length_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_oldPtr_set(void * jarg1, void * jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_oldPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btChunk_m_oldPtr_get(void * jarg1) {
  void * jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  void *result = 0 ;
  
  arg1 = (btChunk *)jarg1; 
  result = (void *) ((arg1)->m_oldPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_dna_nr_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dna_nr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_dna_nr_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_dna_nr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btChunk_m_number_set(void * jarg1, int jarg2) {
  btChunk *arg1 = (btChunk *) 0 ;
  int arg2 ;
  
  arg1 = (btChunk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_number = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btChunk_m_number_get(void * jarg1) {
  int jresult ;
  btChunk *arg1 = (btChunk *) 0 ;
  int result;
  
  arg1 = (btChunk *)jarg1; 
  result = (int) ((arg1)->m_number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btChunk() {
  void * jresult ;
  btChunk *result = 0 ;
  
  result = (btChunk *)new btChunk();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btChunk(void * jarg1) {
  btChunk *arg1 = (btChunk *) 0 ;
  
  arg1 = (btChunk *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSerializer(void * jarg1) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_getBufferPointer(void * jarg1) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  result = (unsigned char *)((btSerializer const *)arg1)->getBufferPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSerializer_getCurrentBufferSize(void * jarg1) {
  int jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  arg1 = (btSerializer *)jarg1; 
  result = (int)((btSerializer const *)arg1)->getCurrentBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_allocate(void * jarg1, unsigned long jarg2, int jarg3) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_finalizeChunk(void * jarg1, void * jarg2, char * jarg3, int jarg4, void * jarg5) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (btChunk *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_findPointer(void * jarg1, void * jarg2) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->findPointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSerializer_getUniquePointer(void * jarg1, void * jarg2) {
  void * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->getUniquePointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_startSerialization(void * jarg1) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  (arg1)->startSerialization();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_finishSerialization(void * jarg1) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  (arg1)->finishSerialization();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSerializer_findNameForPointer(void * jarg1, void * jarg2) {
  char * jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (char *)((btSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_registerNameForPointer(void * jarg1, void * jarg2, char * jarg3) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_serializeName(void * jarg1, char * jarg2) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->serializeName((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSerializer_getSerializationFlags(void * jarg1) {
  int jresult ;
  btSerializer *arg1 = (btSerializer *) 0 ;
  int result;
  
  arg1 = (btSerializer *)jarg1; 
  result = (int)((btSerializer const *)arg1)->getSerializationFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSerializer_setSerializationFlags(void * jarg1, int jarg2) {
  btSerializer *arg1 = (btSerializer *) 0 ;
  int arg2 ;
  
  arg1 = (btSerializer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSerializationFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_HEADER_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPointerUid_m_ptr_set(void * jarg1, void * jarg2) {
  btPointerUid *arg1 = (btPointerUid *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btPointerUid *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_ptr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPointerUid_m_ptr_get(void * jarg1) {
  void * jresult ;
  btPointerUid *arg1 = (btPointerUid *) 0 ;
  void *result = 0 ;
  
  arg1 = (btPointerUid *)jarg1; 
  result = (void *) ((arg1)->m_ptr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPointerUid_m_uniqueIds_set(void * jarg1, void * jarg2) {
  btPointerUid *arg1 = (btPointerUid *) 0 ;
  int *arg2 ;
  
  arg1 = (btPointerUid *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_uniqueIds;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPointerUid_m_uniqueIds_get(void * jarg1) {
  void * jresult ;
  btPointerUid *arg1 = (btPointerUid *) 0 ;
  int *result = 0 ;
  
  arg1 = (btPointerUid *)jarg1; 
  result = (int *)(int *) ((arg1)->m_uniqueIds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPointerUid() {
  void * jresult ;
  btPointerUid *result = 0 ;
  
  result = (btPointerUid *)new btPointerUid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPointerUid(void * jarg1) {
  btPointerUid *arg1 = (btPointerUid *) 0 ;
  
  arg1 = (btPointerUid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultSerializer__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  btDefaultSerializer *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btDefaultSerializer *)new btDefaultSerializer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultSerializer__SWIG_1() {
  void * jresult ;
  btDefaultSerializer *result = 0 ;
  
  result = (btDefaultSerializer *)new btDefaultSerializer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultSerializer(void * jarg1) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_writeHeader(void * jarg1, void * jarg2) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  ((btDefaultSerializer const *)arg1)->writeHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_startSerialization(void * jarg1) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  (arg1)->startSerialization();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_finishSerialization(void * jarg1) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  (arg1)->finishSerialization();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_getUniquePointer(void * jarg1, void * jarg2) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (void *)(arg1)->getUniquePointer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_getBufferPointer(void * jarg1) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  result = (unsigned char *)((btDefaultSerializer const *)arg1)->getBufferPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultSerializer_getCurrentBufferSize(void * jarg1) {
  int jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  result = (int)((btDefaultSerializer const *)arg1)->getCurrentBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_finalizeChunk(void * jarg1, void * jarg2, char * jarg3, int jarg4, void * jarg5) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  btChunk *arg2 = (btChunk *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (btChunk *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  (arg1)->finalizeChunk(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_internalAlloc(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (unsigned char *)(arg1)->internalAlloc(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultSerializer_allocate(void * jarg1, unsigned long jarg2, int jarg3) {
  void * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  size_t arg2 ;
  int arg3 ;
  btChunk *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (btChunk *)(arg1)->allocate(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btDefaultSerializer_findNameForPointer(void * jarg1, void * jarg2) {
  char * jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *result = 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (char *)((btDefaultSerializer const *)arg1)->findNameForPointer((void const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_registerNameForPointer(void * jarg1, void * jarg2, char * jarg3) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->registerNameForPointer((void const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_serializeName(void * jarg1, char * jarg2) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->serializeName((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultSerializer_getSerializationFlags(void * jarg1) {
  int jresult ;
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int result;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  result = (int)((btDefaultSerializer const *)arg1)->getSerializationFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultSerializer_setSerializationFlags(void * jarg1, int jarg2) {
  btDefaultSerializer *arg1 = (btDefaultSerializer *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultSerializer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSerializationFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRI_INFO_V0V1_CONVEX_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRI_INFO_V1V2_CONVEX_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRI_INFO_V2V0_CONVEX_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRI_INFO_V0V1_SWAP_NORMALB_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRI_INFO_V1V2_SWAP_NORMALB_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRI_INFO_V2V0_SWAP_NORMALB_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleInfo() {
  void * jresult ;
  btTriangleInfo *result = 0 ;
  
  result = (btTriangleInfo *)new btTriangleInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfo_m_flags_set(void * jarg1, int jarg2) {
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleInfo_m_flags_get(void * jarg1) {
  int jresult ;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  int result;
  
  arg1 = (btTriangleInfo *)jarg1; 
  result = (int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfo_m_edgeV0V1Angle_set(void * jarg1, float jarg2) {
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_edgeV0V1Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfo_m_edgeV0V1Angle_get(void * jarg1) {
  float jresult ;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_edgeV0V1Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfo_m_edgeV1V2Angle_set(void * jarg1, float jarg2) {
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_edgeV1V2Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfo_m_edgeV1V2Angle_get(void * jarg1) {
  float jresult ;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_edgeV1V2Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfo_m_edgeV2V0Angle_set(void * jarg1, float jarg2) {
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_edgeV2V0Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfo_m_edgeV2V0Angle_get(void * jarg1) {
  float jresult ;
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_edgeV2V0Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleInfo(void * jarg1) {
  btTriangleInfo *arg1 = (btTriangleInfo *) 0 ;
  
  arg1 = (btTriangleInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMap_m_convexEpsilon_set(void * jarg1, float jarg2) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_convexEpsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMap_m_convexEpsilon_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  result = (btScalar) ((arg1)->m_convexEpsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMap_m_planarEpsilon_set(void * jarg1, float jarg2) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_planarEpsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMap_m_planarEpsilon_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  result = (btScalar) ((arg1)->m_planarEpsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMap_m_equalVertexThreshold_set(void * jarg1, float jarg2) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMap_m_equalVertexThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  result = (btScalar) ((arg1)->m_equalVertexThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMap_m_edgeDistanceThreshold_set(void * jarg1, float jarg2) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_edgeDistanceThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMap_m_edgeDistanceThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  result = (btScalar) ((arg1)->m_edgeDistanceThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMap_m_maxEdgeAngleThreshold_set(void * jarg1, float jarg2) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxEdgeAngleThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMap_m_maxEdgeAngleThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  result = (btScalar) ((arg1)->m_maxEdgeAngleThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMap_m_zeroAreaThreshold_set(void * jarg1, float jarg2) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_zeroAreaThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMap_m_zeroAreaThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btScalar result;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  result = (btScalar) ((arg1)->m_zeroAreaThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleInfoMap() {
  void * jresult ;
  btTriangleInfoMap *result = 0 ;
  
  result = (btTriangleInfoMap *)new btTriangleInfoMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleInfoMap(void * jarg1) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleInfoMap_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  int result;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  result = (int)((btTriangleInfoMap const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTriangleInfoMap_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btTriangleInfoMap const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMap_deSerialize(void * jarg1, void * jarg2) {
  btTriangleInfoMap *arg1 = (btTriangleInfoMap *) 0 ;
  btTriangleInfoMapData *arg2 = 0 ;
  
  arg1 = (btTriangleInfoMap *)jarg1; 
  arg2 = (btTriangleInfoMapData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTriangleInfoMapData & type is null", 0);
    return ;
  } 
  (arg1)->deSerialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoData_m_flags_set(void * jarg1, int jarg2) {
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleInfoData_m_flags_get(void * jarg1) {
  int jresult ;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  int result;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  result = (int) ((arg1)->m_flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoData_m_edgeV0V1Angle_set(void * jarg1, float jarg2) {
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeV0V1Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoData_m_edgeV0V1Angle_get(void * jarg1) {
  float jresult ;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  result = (float) ((arg1)->m_edgeV0V1Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoData_m_edgeV1V2Angle_set(void * jarg1, float jarg2) {
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeV1V2Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoData_m_edgeV1V2Angle_get(void * jarg1) {
  float jresult ;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  result = (float) ((arg1)->m_edgeV1V2Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoData_m_edgeV2V0Angle_set(void * jarg1, float jarg2) {
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeV2V0Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoData_m_edgeV2V0Angle_get(void * jarg1) {
  float jresult ;
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  result = (float) ((arg1)->m_edgeV2V0Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleInfoData() {
  void * jresult ;
  btTriangleInfoData *result = 0 ;
  
  result = (btTriangleInfoData *)new btTriangleInfoData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleInfoData(void * jarg1) {
  btTriangleInfoData *arg1 = (btTriangleInfoData *) 0 ;
  
  arg1 = (btTriangleInfoData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_hashTablePtr_set(void * jarg1, void * jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_hashTablePtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleInfoMapData_m_hashTablePtr_get(void * jarg1) {
  void * jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (int *) ((arg1)->m_hashTablePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_nextPtr_set(void * jarg1, void * jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_nextPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleInfoMapData_m_nextPtr_get(void * jarg1) {
  void * jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (int *) ((arg1)->m_nextPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_valueArrayPtr_set(void * jarg1, void * jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  btTriangleInfoData *arg2 = (btTriangleInfoData *) 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (btTriangleInfoData *)jarg2; 
  if (arg1) (arg1)->m_valueArrayPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleInfoMapData_m_valueArrayPtr_get(void * jarg1) {
  void * jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  btTriangleInfoData *result = 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (btTriangleInfoData *) ((arg1)->m_valueArrayPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_keyArrayPtr_set(void * jarg1, void * jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->m_keyArrayPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleInfoMapData_m_keyArrayPtr_get(void * jarg1) {
  void * jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int *result = 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (int *) ((arg1)->m_keyArrayPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_convexEpsilon_set(void * jarg1, float jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_convexEpsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMapData_m_convexEpsilon_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (float) ((arg1)->m_convexEpsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_planarEpsilon_set(void * jarg1, float jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_planarEpsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMapData_m_planarEpsilon_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (float) ((arg1)->m_planarEpsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_equalVertexThreshold_set(void * jarg1, float jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_equalVertexThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMapData_m_equalVertexThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (float) ((arg1)->m_equalVertexThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_edgeDistanceThreshold_set(void * jarg1, float jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_edgeDistanceThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMapData_m_edgeDistanceThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (float) ((arg1)->m_edgeDistanceThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_zeroAreaThreshold_set(void * jarg1, float jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_zeroAreaThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleInfoMapData_m_zeroAreaThreshold_get(void * jarg1) {
  float jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  float result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (float) ((arg1)->m_zeroAreaThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_nextSize_set(void * jarg1, int jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nextSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleInfoMapData_m_nextSize_get(void * jarg1) {
  int jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (int) ((arg1)->m_nextSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_hashTableSize_set(void * jarg1, int jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_hashTableSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleInfoMapData_m_hashTableSize_get(void * jarg1) {
  int jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (int) ((arg1)->m_hashTableSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_numValues_set(void * jarg1, int jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numValues = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleInfoMapData_m_numValues_get(void * jarg1) {
  int jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (int) ((arg1)->m_numValues);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_numKeys_set(void * jarg1, int jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numKeys = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTriangleInfoMapData_m_numKeys_get(void * jarg1) {
  int jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  int result;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (int) ((arg1)->m_numKeys);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleInfoMapData_m_padding_set(void * jarg1, char * jarg2) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  char *arg2 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTriangleInfoMapData_m_padding_get(void * jarg1) {
  char * jresult ;
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleInfoMapData() {
  void * jresult ;
  btTriangleInfoMapData *result = 0 ;
  
  result = (btTriangleInfoMapData *)new btTriangleInfoMapData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleInfoMapData(void * jarg1) {
  btTriangleInfoMapData *arg1 = (btTriangleInfoMapData *) 0 ;
  
  arg1 = (btTriangleInfoMapData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  bool arg3 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_2(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool arg5 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBvhTriangleMeshShape__SWIG_3(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btStridingMeshInterface *arg1 = (btStridingMeshInterface *) 0 ;
  bool arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btStridingMeshInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBvhTriangleMeshShape *)new btBvhTriangleMeshShape(arg1,arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBvhTriangleMeshShape(void * jarg1) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getOwnsBvh(void * jarg1) {
  unsigned int jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->getOwnsBvh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_performRaycast(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->performRaycast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_performConvexcast(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->performConvexcast(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btBvhTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_refitTree(void * jarg1, void * jarg2, void * jarg3) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->refitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_partialRefitTree(void * jarg1, void * jarg2, void * jarg3) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->partialRefitTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getOptimizedBvh(void * jarg1) {
  void * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (btOptimizedBvh *)(arg1)->getOptimizedBvh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btOptimizedBvh *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setOptimizedBvh(arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setOptimizedBvh__SWIG_1(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btOptimizedBvh *arg2 = (btOptimizedBvh *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btOptimizedBvh *)jarg2; 
  (arg1)->setOptimizedBvh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_buildOptimizedBvh(void * jarg1) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  (arg1)->buildOptimizedBvh();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBvhTriangleMeshShape_usesQuantizedAabbCompression(void * jarg1) {
  unsigned int jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  bool result;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (bool)((btBvhTriangleMeshShape const *)arg1)->usesQuantizedAabbCompression();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_setTriangleInfoMap(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *arg2 = (btTriangleInfoMap *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleInfoMap *)jarg2; 
  (arg1)->setTriangleInfoMap(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_getTriangleInfoMap__SWIG_0(void * jarg1) {
  void * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btTriangleInfoMap *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (btTriangleInfoMap *)((btBvhTriangleMeshShape const *)arg1)->getTriangleInfoMap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBvhTriangleMeshShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  result = (int)((btBvhTriangleMeshShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btBvhTriangleMeshShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_serializeSingleBvh(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleBvh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBvhTriangleMeshShape_serializeSingleTriangleInfoMap(void * jarg1, void * jarg2) {
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btBvhTriangleMeshShape const *)arg1)->serializeSingleTriangleInfoMap(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionShapeData_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionShapeData_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_meshInterface_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData *arg2 = (btStridingMeshInterfaceData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btStridingMeshInterfaceData *)jarg2; 
  if (arg1) (arg1)->m_meshInterface = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_meshInterface_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btStridingMeshInterfaceData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btStridingMeshInterfaceData *)& ((arg1)->m_meshInterface);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedFloatBvh_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *arg2 = (btQuantizedBvhFloatData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btQuantizedBvhFloatData *)jarg2; 
  if (arg1) (arg1)->m_quantizedFloatBvh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedFloatBvh_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhFloatData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btQuantizedBvhFloatData *) ((arg1)->m_quantizedFloatBvh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedDoubleBvh_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *arg2 = (btQuantizedBvhDoubleData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btQuantizedBvhDoubleData *)jarg2; 
  if (arg1) (arg1)->m_quantizedDoubleBvh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_quantizedDoubleBvh_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btQuantizedBvhDoubleData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btQuantizedBvhDoubleData *) ((arg1)->m_quantizedDoubleBvh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_triangleInfoMap_set(void * jarg1, void * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *arg2 = (btTriangleInfoMapData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (btTriangleInfoMapData *)jarg2; 
  if (arg1) (arg1)->m_triangleInfoMap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_triangleInfoMap_get(void * jarg1) {
  void * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  btTriangleInfoMapData *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (btTriangleInfoMapData *) ((arg1)->m_triangleInfoMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionMargin_set(void * jarg1, float jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_collisionMargin_get(void * jarg1) {
  float jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  float result;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_pad3_set(void * jarg1, char * jarg2) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad3, (const char *)arg2, 4-1);
      arg1->m_pad3[4-1] = 0;
    } else {
      arg1->m_pad3[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTriangleMeshShapeData_m_pad3_get(void * jarg1) {
  char * jresult ;
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTriangleMeshShapeData() {
  void * jresult ;
  btTriangleMeshShapeData *result = 0 ;
  
  result = (btTriangleMeshShapeData *)new btTriangleMeshShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTriangleMeshShapeData(void * jarg1) {
  btTriangleMeshShapeData *arg1 = (btTriangleMeshShapeData *) 0 ;
  
  arg1 = (btTriangleMeshShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btScaledBvhTriangleMeshShape(void * jarg1, void * jarg2) {
  void * jresult ;
  btBvhTriangleMeshShape *arg1 = (btBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btScaledBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScaledBvhTriangleMeshShape *)new btScaledBvhTriangleMeshShape(arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btScaledBvhTriangleMeshShape(void * jarg1) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btScaledBvhTriangleMeshShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_setLocalScaling(void * jarg1, void * jarg2) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (btVector3 *) &((btScaledBvhTriangleMeshShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btScaledBvhTriangleMeshShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btScaledBvhTriangleMeshShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getChildShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  btBvhTriangleMeshShape *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (btBvhTriangleMeshShape *)(arg1)->getChildShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_getName(void * jarg1) {
  char * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (char *)((btScaledBvhTriangleMeshShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  int result;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  result = (int)((btScaledBvhTriangleMeshShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btScaledBvhTriangleMeshShape *arg1 = (btScaledBvhTriangleMeshShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btScaledBvhTriangleMeshShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btScaledBvhTriangleMeshShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_trimeshShapeData_set(void * jarg1, void * jarg2) {
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btTriangleMeshShapeData *arg2 = (btTriangleMeshShapeData *) 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  arg2 = (btTriangleMeshShapeData *)jarg2; 
  if (arg1) (arg1)->m_trimeshShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_trimeshShapeData_get(void * jarg1) {
  void * jresult ;
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btTriangleMeshShapeData *result = 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  result = (btTriangleMeshShapeData *)& ((arg1)->m_trimeshShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_localScaling_set(void * jarg1, void * jarg2) {
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_localScaling = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btScaledTriangleMeshShapeData_m_localScaling_get(void * jarg1) {
  void * jresult ;
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_localScaling);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btScaledTriangleMeshShapeData() {
  void * jresult ;
  btScaledTriangleMeshShapeData *result = 0 ;
  
  result = (btScaledTriangleMeshShapeData *)new btScaledTriangleMeshShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btScaledTriangleMeshShapeData(void * jarg1) {
  btScaledTriangleMeshShapeData *arg1 = (btScaledTriangleMeshShapeData *) 0 ;
  
  arg1 = (btScaledTriangleMeshShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_transform_set(void * jarg1, void * jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_transform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChild_m_transform_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (btTransform *)& ((arg1)->m_transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShape_set(void * jarg1, void * jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  if (arg1) (arg1)->m_childShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShape_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (btCollisionShape *) ((arg1)->m_childShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShapeType_set(void * jarg1, int jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_childShapeType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShapeChild_m_childShapeType_get(void * jarg1) {
  int jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  int result;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (int) ((arg1)->m_childShapeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_childMargin_set(void * jarg1, float jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_childMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShapeChild_m_childMargin_get(void * jarg1) {
  float jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btScalar result;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (btScalar) ((arg1)->m_childMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChild_m_node_set(void * jarg1, void * jarg2) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->m_node = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChild_m_node_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  result = (btDbvtNode *) ((arg1)->m_node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShapeChild() {
  void * jresult ;
  btCompoundShapeChild *result = 0 ;
  
  result = (btCompoundShapeChild *)new btCompoundShapeChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShapeChild(void * jarg1) {
  btCompoundShapeChild *arg1 = (btCompoundShapeChild *) 0 ;
  
  arg1 = (btCompoundShapeChild *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShape__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  btCompoundShape *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (btCompoundShape *)new btCompoundShape(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShape__SWIG_1() {
  void * jresult ;
  btCompoundShape *result = 0 ;
  
  result = (btCompoundShape *)new btCompoundShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShape(void * jarg1) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_addChildShape(void * jarg1, void * jarg2, void * jarg3) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btCollisionShape *)jarg3; 
  (arg1)->addChildShape((btTransform const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_removeChildShape(void * jarg1, void * jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  (arg1)->removeChildShape(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_removeChildShapeByIndex(void * jarg1, int jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeChildShapeByIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShape_getNumChildShapes(void * jarg1) {
  int jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (int)((btCompoundShape const *)arg1)->getNumChildShapes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getChildShape__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btCollisionShape *)(arg1)->getChildShape(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getChildTransform__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTransform *) &(arg1)->getChildTransform(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_updateChildTransform__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->updateChildTransform(arg2,(btTransform const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_updateChildTransform__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int arg2 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->updateChildTransform(arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getChildList(void * jarg1) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btCompoundShapeChild *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btCompoundShapeChild *)(arg1)->getChildList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCompoundShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_recalculateLocalAabb(void * jarg1) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  (arg1)->recalculateLocalAabb();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_setLocalScaling(void * jarg1, void * jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btVector3 *) &((btCompoundShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCompoundShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_setMargin(void * jarg1, float jarg2) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShape_getMargin(void * jarg1) {
  float jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btScalar)((btCompoundShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCompoundShape_getName(void * jarg1) {
  char * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (char *)((btCompoundShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShape_getDynamicAabbTree__SWIG_0(void * jarg1) {
  void * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btDbvt *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (btDbvt *)((btCompoundShape const *)arg1)->getDynamicAabbTree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_createAabbTreeFromChildren(void * jarg1) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  (arg1)->createAabbTreeFromChildren();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShape_calculatePrincipalAxisTransform(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btCompoundShape const *)arg1)->calculatePrincipalAxisTransform(arg2,*arg3,*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShape_getUpdateRevision(void * jarg1) {
  int jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (int)((btCompoundShape const *)arg1)->getUpdateRevision();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  int result;
  
  arg1 = (btCompoundShape *)jarg1; 
  result = (int)((btCompoundShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btCompoundShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btCompoundShape *arg1 = (btCompoundShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btCompoundShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btCompoundShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_transform_set(void * jarg1, void * jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_transform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChildData_m_transform_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShape_set(void * jarg1, void * jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_childShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShape_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result = (btCollisionShapeData *) ((arg1)->m_childShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShapeType_set(void * jarg1, int jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_childShapeType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childShapeType_get(void * jarg1) {
  int jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  int result;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result = (int) ((arg1)->m_childShapeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childMargin_set(void * jarg1, float jarg2) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float arg2 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_childMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShapeChildData_m_childMargin_get(void * jarg1) {
  float jresult ;
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  float result;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  result = (float) ((arg1)->m_childMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShapeChildData() {
  void * jresult ;
  btCompoundShapeChildData *result = 0 ;
  
  result = (btCompoundShapeChildData *)new btCompoundShapeChildData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShapeChildData(void * jarg1) {
  btCompoundShapeChildData *arg1 = (btCompoundShapeChildData *) 0 ;
  
  arg1 = (btCompoundShapeChildData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionShapeData_set(void * jarg1, void * jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *arg2 = (btCollisionShapeData *) 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (btCollisionShapeData *)jarg2; 
  if (arg1) (arg1)->m_collisionShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionShapeData_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCollisionShapeData *result = 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (btCollisionShapeData *)& ((arg1)->m_collisionShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_childShapePtr_set(void * jarg1, void * jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *arg2 = (btCompoundShapeChildData *) 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (btCompoundShapeChildData *)jarg2; 
  if (arg1) (arg1)->m_childShapePtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCompoundShapeData_m_childShapePtr_get(void * jarg1) {
  void * jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  btCompoundShapeChildData *result = 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (btCompoundShapeChildData *) ((arg1)->m_childShapePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_numChildShapes_set(void * jarg1, int jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numChildShapes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btCompoundShapeData_m_numChildShapes_get(void * jarg1) {
  int jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  int result;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (int) ((arg1)->m_numChildShapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionMargin_set(void * jarg1, float jarg2) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float arg2 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_collisionMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCompoundShapeData_m_collisionMargin_get(void * jarg1) {
  float jresult ;
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  float result;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  result = (float) ((arg1)->m_collisionMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCompoundShapeData() {
  void * jresult ;
  btCompoundShapeData *result = 0 ;
  
  result = (btCompoundShapeData *)new btCompoundShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCompoundShapeData(void * jarg1) {
  btCompoundShapeData *arg1 = (btCompoundShapeData *) 0 ;
  
  arg1 = (btCompoundShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_0() {
  void * jresult ;
  btBU_Simplex1to4 *result = 0 ;
  
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_1(void * jarg1) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btBU_Simplex1to4__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btBU_Simplex1to4 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btBU_Simplex1to4 *)new btBU_Simplex1to4((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_reset(void * jarg1) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBU_Simplex1to4 const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_addVertex(void * jarg1, void * jarg2) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->addVertex((btVector3 const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getNumVertices(void * jarg1) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getNumEdges(void * jarg1) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getEdge(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBU_Simplex1to4 const *)arg1)->getEdge(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getVertex(void * jarg1, int jarg2, void * jarg3) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btBU_Simplex1to4 const *)arg1)->getVertex(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getNumPlanes(void * jarg1) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getNumPlanes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btBU_Simplex1to4_getPlane(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  ((btBU_Simplex1to4 const *)arg1)->getPlane(*arg2,*arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btBU_Simplex1to4_getIndex(void * jarg1, int jarg2) {
  int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((btBU_Simplex1to4 const *)arg1)->getIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btBU_Simplex1to4_isInside(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  bool result;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (bool)((btBU_Simplex1to4 const *)arg1)->isInside((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btBU_Simplex1to4_getName(void * jarg1) {
  char * jresult ;
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  char *result = 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  result = (char *)((btBU_Simplex1to4 const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btBU_Simplex1to4(void * jarg1) {
  btBU_Simplex1to4 *arg1 = (btBU_Simplex1to4 *) 0 ;
  
  arg1 = (btBU_Simplex1to4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btEmptyShape() {
  void * jresult ;
  btEmptyShape *result = 0 ;
  
  result = (btEmptyShape *)new btEmptyShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btEmptyShape(void * jarg1) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btEmptyShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_setLocalScaling(void * jarg1, void * jarg2) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btEmptyShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  result = (btVector3 *) &((btEmptyShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btEmptyShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btEmptyShape_getName(void * jarg1) {
  char * jresult ;
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  result = (char *)((btEmptyShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btEmptyShape_processAllTriangles(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btEmptyShape *arg1 = (btEmptyShape *) 0 ;
  btTriangleCallback *arg2 = (btTriangleCallback *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btEmptyShape *)jarg1; 
  arg2 = (btTriangleCallback *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  ((btEmptyShape const *)arg1)->processAllTriangles(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMultiSphereShape(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  int arg3 ;
  btMultiSphereShape *result = 0 ;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  arg3 = (int)jarg3; 
  result = (btMultiSphereShape *)new btMultiSphereShape((btVector3 const *)arg1,(btScalar const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btMultiSphereShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btMultiSphereShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btMultiSphereShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMultiSphereShape_getSphereCount(void * jarg1) {
  int jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  result = (int)((btMultiSphereShape const *)arg1)->getSphereCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShape_getSpherePosition(void * jarg1, int jarg2) {
  void * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btVector3 *result = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btVector3 *) &((btMultiSphereShape const *)arg1)->getSpherePosition(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btMultiSphereShape_getSphereRadius(void * jarg1, int jarg2) {
  float jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btMultiSphereShape const *)arg1)->getSphereRadius(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btMultiSphereShape_getName(void * jarg1) {
  char * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  result = (char *)((btMultiSphereShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMultiSphereShape_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  int result;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  result = (int)((btMultiSphereShape const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btMultiSphereShape_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btMultiSphereShape const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMultiSphereShape(void * jarg1) {
  btMultiSphereShape *arg1 = (btMultiSphereShape *) 0 ;
  
  arg1 = (btMultiSphereShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPositionAndRadius_m_pos_set(void * jarg1, void * jarg2) {
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPositionAndRadius_m_pos_get(void * jarg1) {
  void * jresult ;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPositionAndRadius_m_radius_set(void * jarg1, float jarg2) {
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float arg2 ;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPositionAndRadius_m_radius_get(void * jarg1) {
  float jresult ;
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  float result;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  result = (float) ((arg1)->m_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPositionAndRadius() {
  void * jresult ;
  btPositionAndRadius *result = 0 ;
  
  result = (btPositionAndRadius *)new btPositionAndRadius();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPositionAndRadius(void * jarg1) {
  btPositionAndRadius *arg1 = (btPositionAndRadius *) 0 ;
  
  arg1 = (btPositionAndRadius *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_convexInternalShapeData_set(void * jarg1, void * jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData *arg2 = (btConvexInternalShapeData *) 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  arg2 = (btConvexInternalShapeData *)jarg2; 
  if (arg1) (arg1)->m_convexInternalShapeData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShapeData_m_convexInternalShapeData_get(void * jarg1) {
  void * jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btConvexInternalShapeData *result = 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result = (btConvexInternalShapeData *)& ((arg1)->m_convexInternalShapeData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArrayPtr_set(void * jarg1, void * jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *arg2 = (btPositionAndRadius *) 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  arg2 = (btPositionAndRadius *)jarg2; 
  if (arg1) (arg1)->m_localPositionArrayPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArrayPtr_get(void * jarg1) {
  void * jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  btPositionAndRadius *result = 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result = (btPositionAndRadius *) ((arg1)->m_localPositionArrayPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArraySize_set(void * jarg1, int jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int arg2 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_localPositionArraySize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMultiSphereShapeData_m_localPositionArraySize_get(void * jarg1) {
  int jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  int result;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result = (int) ((arg1)->m_localPositionArraySize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSphereShapeData_m_padding_set(void * jarg1, char * jarg2) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *arg2 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btMultiSphereShapeData_m_padding_get(void * jarg1) {
  char * jresult ;
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMultiSphereShapeData() {
  void * jresult ;
  btMultiSphereShapeData *result = 0 ;
  
  result = (btMultiSphereShapeData *)new btMultiSphereShapeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMultiSphereShapeData(void * jarg1) {
  btMultiSphereShapeData *arg1 = (btMultiSphereShapeData *) 0 ;
  
  arg1 = (btMultiSphereShapeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btUniformScalingShape(void * jarg1, float jarg2) {
  void * jresult ;
  btConvexShape *arg1 = (btConvexShape *) 0 ;
  btScalar arg2 ;
  btUniformScalingShape *result = 0 ;
  
  arg1 = (btConvexShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (btUniformScalingShape *)new btUniformScalingShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btUniformScalingShape(void * jarg1) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_localGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btUniformScalingShape const *)arg1)->localGetSupportingVertexWithoutMargin((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_localGetSupportingVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btUniformScalingShape const *)arg1)->localGetSupportingVertex((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_batchedUnitVectorGetSupportingVertexWithoutMargin(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btVector3 *arg3 = (btVector3 *) 0 ;
  int arg4 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btVector3 *)jarg3; 
  arg4 = (int)jarg4; 
  ((btUniformScalingShape const *)arg1)->batchedUnitVectorGetSupportingVertexWithoutMargin((btVector3 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_calculateLocalInertia(void * jarg1, float jarg2, void * jarg3) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->calculateLocalInertia(arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniformScalingShape_getUniformScalingFactor(void * jarg1) {
  float jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btScalar)((btUniformScalingShape const *)arg1)->getUniformScalingFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_getChildShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btConvexShape *result = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btConvexShape *)(arg1)->getChildShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btUniformScalingShape_getName(void * jarg1) {
  char * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (char *)((btUniformScalingShape const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->getAabb((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_getAabbSlow(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btTransform *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->getAabbSlow((btTransform const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_setLocalScaling(void * jarg1, void * jarg2) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLocalScaling((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniformScalingShape_getLocalScaling(void * jarg1) {
  void * jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btVector3 *) &((btUniformScalingShape const *)arg1)->getLocalScaling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_setMargin(void * jarg1, float jarg2) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniformScalingShape_getMargin(void * jarg1) {
  float jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  btScalar result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (btScalar)((btUniformScalingShape const *)arg1)->getMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btUniformScalingShape_getNumPreferredPenetrationDirections(void * jarg1) {
  int jresult ;
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int result;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  result = (int)((btUniformScalingShape const *)arg1)->getNumPreferredPenetrationDirections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniformScalingShape_getPreferredPenetrationDirection(void * jarg1, int jarg2, void * jarg3) {
  btUniformScalingShape *arg1 = (btUniformScalingShape *) 0 ;
  int arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btUniformScalingShape *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btUniformScalingShape const *)arg1)->getPreferredPenetrationDirection(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionAlgorithmConstructionInfo__SWIG_0() {
  void * jresult ;
  btCollisionAlgorithmConstructionInfo *result = 0 ;
  
  result = (btCollisionAlgorithmConstructionInfo *)new btCollisionAlgorithmConstructionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btCollisionAlgorithmConstructionInfo__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  int arg2 ;
  btCollisionAlgorithmConstructionInfo *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btCollisionAlgorithmConstructionInfo *)new btCollisionAlgorithmConstructionInfo(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionAlgorithmConstructionInfo_m_dispatcher1_set(void * jarg1, void * jarg2) {
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  if (arg1) (arg1)->m_dispatcher1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionAlgorithmConstructionInfo_m_dispatcher1_get(void * jarg1) {
  void * jresult ;
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btDispatcher *result = 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1; 
  result = (btDispatcher *) ((arg1)->m_dispatcher1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionAlgorithmConstructionInfo_m_manifold_set(void * jarg1, void * jarg2) {
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btPersistentManifold *arg2 = (btPersistentManifold *) 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1; 
  arg2 = (btPersistentManifold *)jarg2; 
  if (arg1) (arg1)->m_manifold = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionAlgorithmConstructionInfo_m_manifold_get(void * jarg1) {
  void * jresult ;
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  btPersistentManifold *result = 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1; 
  result = (btPersistentManifold *) ((arg1)->m_manifold);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionAlgorithmConstructionInfo(void * jarg1) {
  btCollisionAlgorithmConstructionInfo *arg1 = (btCollisionAlgorithmConstructionInfo *) 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionAlgorithm(void * jarg1) {
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  
  arg1 = (btCollisionAlgorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionAlgorithm_processCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  arg1 = (btCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btCollisionAlgorithm_calculateTimeOfImpact(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  arg1 = (btCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return 0;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btCollisionAlgorithm_getAllContactManifolds(void * jarg1, void * jarg2) {
  btCollisionAlgorithm *arg1 = (btCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  arg1 = (btCollisionAlgorithm *)jarg1; 
  arg2 = (btManifoldArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldArray & type is null", 0);
    return ;
  } 
  (arg1)->getAllContactManifolds(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btActivatingCollisionAlgorithm(void * jarg1) {
  btActivatingCollisionAlgorithm *arg1 = (btActivatingCollisionAlgorithm *) 0 ;
  
  arg1 = (btActivatingCollisionAlgorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSphereSphereCollisionAlgorithm__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btPersistentManifold *arg1 = (btPersistentManifold *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btSphereSphereCollisionAlgorithm *result = 0 ;
  
  arg1 = (btPersistentManifold *)jarg1; 
  arg2 = (btCollisionAlgorithmConstructionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  result = (btSphereSphereCollisionAlgorithm *)new btSphereSphereCollisionAlgorithm(arg1,(btCollisionAlgorithmConstructionInfo const &)*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSphereSphereCollisionAlgorithm__SWIG_1(void * jarg1) {
  void * jresult ;
  btCollisionAlgorithmConstructionInfo *arg1 = 0 ;
  btSphereSphereCollisionAlgorithm *result = 0 ;
  
  arg1 = (btCollisionAlgorithmConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btSphereSphereCollisionAlgorithm *)new btSphereSphereCollisionAlgorithm((btCollisionAlgorithmConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_processCollision(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObjectWrapper *arg2 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObjectWrapper *)jarg2; 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return ;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  (arg1)->processCollision((btCollisionObjectWrapper const *)arg2,(btCollisionObjectWrapper const *)arg3,(btDispatcherInfo const &)*arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_calculateTimeOfImpact(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  btCollisionObject *arg3 = (btCollisionObject *) 0 ;
  btDispatcherInfo *arg4 = 0 ;
  btManifoldResult *arg5 = (btManifoldResult *) 0 ;
  btScalar result;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (btCollisionObject *)jarg3; 
  arg4 = (btDispatcherInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDispatcherInfo const & type is null", 0);
    return 0;
  } 
  arg5 = (btManifoldResult *)jarg5; 
  result = (btScalar)(arg1)->calculateTimeOfImpact(arg2,arg3,(btDispatcherInfo const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_getAllContactManifolds(void * jarg1, void * jarg2) {
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  btManifoldArray *arg2 = 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  arg2 = (btManifoldArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btManifoldArray & type is null", 0);
    return ;
  } 
  (arg1)->getAllContactManifolds(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSphereSphereCollisionAlgorithm(void * jarg1) {
  btSphereSphereCollisionAlgorithm *arg1 = (btSphereSphereCollisionAlgorithm *) 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_CreateFunc_CreateCollisionAlgorithm(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btSphereSphereCollisionAlgorithm::CreateFunc *arg1 = (btSphereSphereCollisionAlgorithm::CreateFunc *) 0 ;
  btCollisionAlgorithmConstructionInfo *arg2 = 0 ;
  btCollisionObjectWrapper *arg3 = (btCollisionObjectWrapper *) 0 ;
  btCollisionObjectWrapper *arg4 = (btCollisionObjectWrapper *) 0 ;
  btCollisionAlgorithm *result = 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm::CreateFunc *)jarg1; 
  arg2 = (btCollisionAlgorithmConstructionInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btCollisionAlgorithmConstructionInfo & type is null", 0);
    return 0;
  } 
  arg3 = (btCollisionObjectWrapper *)jarg3; 
  arg4 = (btCollisionObjectWrapper *)jarg4; 
  result = (btCollisionAlgorithm *)(arg1)->CreateCollisionAlgorithm(*arg2,(btCollisionObjectWrapper const *)arg3,(btCollisionObjectWrapper const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSphereSphereCollisionAlgorithm_CreateFunc() {
  void * jresult ;
  btSphereSphereCollisionAlgorithm::CreateFunc *result = 0 ;
  
  result = (btSphereSphereCollisionAlgorithm::CreateFunc *)new btSphereSphereCollisionAlgorithm::CreateFunc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSphereSphereCollisionAlgorithm_CreateFunc(void * jarg1) {
  btSphereSphereCollisionAlgorithm::CreateFunc *arg1 = (btSphereSphereCollisionAlgorithm::CreateFunc *) 0 ;
  
  arg1 = (btSphereSphereCollisionAlgorithm::CreateFunc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btCollisionConfiguration(void * jarg1) {
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  
  arg1 = (btCollisionConfiguration *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionConfiguration_getPersistentManifoldPool(void * jarg1) {
  void * jresult ;
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btCollisionConfiguration *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getPersistentManifoldPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionConfiguration_getCollisionAlgorithmPool(void * jarg1) {
  void * jresult ;
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btCollisionConfiguration *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getCollisionAlgorithmPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btCollisionConfiguration_getCollisionAlgorithmCreateFunc(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  btCollisionConfiguration *arg1 = (btCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  arg1 = (btCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btCollisionAlgorithmCreateFunc *)(arg1)->getCollisionAlgorithmCreateFunc(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set(void * jarg1, void * jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *arg2 = (btPoolAllocator *) 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (btPoolAllocator *)jarg2; 
  if (arg1) (arg1)->m_persistentManifoldPool = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (btPoolAllocator *) ((arg1)->m_persistentManifoldPool);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set(void * jarg1, void * jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *arg2 = (btPoolAllocator *) 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (btPoolAllocator *)jarg2; 
  if (arg1) (arg1)->m_collisionAlgorithmPool = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (btPoolAllocator *) ((arg1)->m_collisionAlgorithmPool);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_defaultMaxPersistentManifoldPoolSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_defaultMaxPersistentManifoldPoolSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_defaultMaxCollisionAlgorithmPoolSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_defaultMaxCollisionAlgorithmPoolSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_customCollisionAlgorithmMaxElementSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_customCollisionAlgorithmMaxElementSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set(void * jarg1, int jarg2) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useEpaPenetrationAlgorithm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get(void * jarg1) {
  int jresult ;
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  int result;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  result = (int) ((arg1)->m_useEpaPenetrationAlgorithm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultCollisionConstructionInfo() {
  void * jresult ;
  btDefaultCollisionConstructionInfo *result = 0 ;
  
  result = (btDefaultCollisionConstructionInfo *)new btDefaultCollisionConstructionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultCollisionConstructionInfo(void * jarg1) {
  btDefaultCollisionConstructionInfo *arg1 = (btDefaultCollisionConstructionInfo *) 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultCollisionConfiguration__SWIG_0(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConstructionInfo *arg1 = 0 ;
  btDefaultCollisionConfiguration *result = 0 ;
  
  arg1 = (btDefaultCollisionConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDefaultCollisionConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btDefaultCollisionConfiguration *)new btDefaultCollisionConfiguration((btDefaultCollisionConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultCollisionConfiguration__SWIG_1() {
  void * jresult ;
  btDefaultCollisionConfiguration *result = 0 ;
  
  result = (btDefaultCollisionConfiguration *)new btDefaultCollisionConfiguration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultCollisionConfiguration(void * jarg1) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getPersistentManifoldPool(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getPersistentManifoldPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getCollisionAlgorithmPool(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btPoolAllocator *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  result = (btPoolAllocator *)(arg1)->getCollisionAlgorithmPool();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getSimplexSolver(void * jarg1) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  btVoronoiSimplexSolver *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  result = (btVoronoiSimplexSolver *)(arg1)->getSimplexSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  btCollisionAlgorithmCreateFunc *result = 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btCollisionAlgorithmCreateFunc *)(arg1)->getCollisionAlgorithmCreateFunc(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setConvexConvexMultipointIterations(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_1(void * jarg1, int jarg2) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConvexConvexMultipointIterations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setConvexConvexMultipointIterations__SWIG_2(void * jarg1) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  (arg1)->setConvexConvexMultipointIterations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setPlaneConvexMultipointIterations(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_1(void * jarg1, int jarg2) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  int arg2 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPlaneConvexMultipointIterations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations__SWIG_2(void * jarg1) {
  btDefaultCollisionConfiguration *arg1 = (btDefaultCollisionConfiguration *) 0 ;
  
  arg1 = (btDefaultCollisionConfiguration *)jarg1; 
  (arg1)->setPlaneConvexMultipointIterations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_m_nextFree_set(void * jarg1, int jarg2) {
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nextFree = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_m_nextFree_get(void * jarg1) {
  int jresult ;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  result = (int) ((arg1)->m_nextFree);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphaseProxy__SWIG_0() {
  void * jresult ;
  btSimpleBroadphaseProxy *result = 0 ;
  
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphaseProxy__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, short jarg5, short jarg6, void * jarg7) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  short arg5 ;
  short arg6 ;
  void *arg7 = (void *) 0 ;
  btSimpleBroadphaseProxy *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (short)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (void *)jarg7; 
  result = (btSimpleBroadphaseProxy *)new btSimpleBroadphaseProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_SetNextFree(void * jarg1, int jarg2) {
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNextFree(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_GetNextFree(void * jarg1) {
  int jresult ;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  int result;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  result = (int)((btSimpleBroadphaseProxy const *)arg1)->GetNextFree();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSimpleBroadphaseProxy(void * jarg1) {
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphase__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  int arg1 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  btSimpleBroadphase *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (btOverlappingPairCache *)jarg2; 
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphase__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  btSimpleBroadphase *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (btSimpleBroadphase *)new btSimpleBroadphase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleBroadphase__SWIG_2() {
  void * jresult ;
  btSimpleBroadphase *result = 0 ;
  
  result = (btSimpleBroadphase *)new btSimpleBroadphase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSimpleBroadphase(void * jarg1) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSimpleBroadphase_aabbOverlap(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btSimpleBroadphaseProxy *arg1 = (btSimpleBroadphaseProxy *) 0 ;
  btSimpleBroadphaseProxy *arg2 = (btSimpleBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btSimpleBroadphaseProxy *)jarg1; 
  arg2 = (btSimpleBroadphaseProxy *)jarg2; 
  result = (bool)btSimpleBroadphase::aabbOverlap(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleBroadphase_createProxy(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, short jarg6, short jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (short)jarg7; 
  arg8 = (btDispatcher *)jarg8; 
  arg9 = (void *)jarg9; 
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_calculateOverlappingPairs(void * jarg1, void * jarg2) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->calculateOverlappingPairs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_destroyProxy(void * jarg1, void * jarg2, void * jarg3) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->destroyProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_setAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSimpleBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_rayTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_rayTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_rayTest__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_aabbTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseAabbCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseAabbCallback & type is null", 0);
    return ;
  } 
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleBroadphase_getOverlappingPairCache__SWIG_0(void * jarg1) {
  void * jresult ;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSimpleBroadphase_testAabbOverlap(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (bool)(arg1)->testAabbOverlap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_getBroadphaseAabb(void * jarg1, void * jarg2, void * jarg3) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSimpleBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleBroadphase_printStats(void * jarg1) {
  btSimpleBroadphase *arg1 = (btSimpleBroadphase *) 0 ;
  
  arg1 = (btSimpleBroadphase *)jarg1; 
  (arg1)->printStats();
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_IMPL_GENERIC_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_IMPL_SSE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_USE_TEMPLATE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_USE_INTRINSIC_SSE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_USE_MEMMOVE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_ENABLE_BENCHMARK_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_SELECT_IMPL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_MERGE_IMPL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_INT0_IMPL_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_Center(void * jarg1) {
  void * jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 result;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  result = ((btDbvtAabbMm const *)arg1)->Center();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_Lengths(void * jarg1) {
  void * jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 result;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  result = ((btDbvtAabbMm const *)arg1)->Lengths();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_Extents(void * jarg1) {
  void * jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 result;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  result = ((btDbvtAabbMm const *)arg1)->Extents();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_Mins(void * jarg1) {
  void * jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  result = (btVector3 *) &((btDbvtAabbMm const *)arg1)->Mins();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_Maxs(void * jarg1) {
  void * jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  result = (btVector3 *) &((btDbvtAabbMm const *)arg1)->Maxs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_FromCE(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btDbvtAabbMm result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = btDbvtAabbMm::FromCE((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btDbvtAabbMm((const btDbvtAabbMm &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_FromCR(void * jarg1, float jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btScalar arg2 ;
  btDbvtAabbMm result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btScalar)jarg2; 
  result = btDbvtAabbMm::FromCR((btVector3 const &)*arg1,arg2);
  jresult = new btDbvtAabbMm((const btDbvtAabbMm &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_FromMM(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btDbvtAabbMm result;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = btDbvtAabbMm::FromMM((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = new btDbvtAabbMm((const btDbvtAabbMm &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_FromPoints__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btVector3 *arg1 = (btVector3 *) 0 ;
  int arg2 ;
  btDbvtAabbMm result;
  
  arg1 = (btVector3 *)jarg1; 
  arg2 = (int)jarg2; 
  result = btDbvtAabbMm::FromPoints((btVector3 const *)arg1,arg2);
  jresult = new btDbvtAabbMm((const btDbvtAabbMm &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_FromPoints__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  btVector3 **arg1 = (btVector3 **) 0 ;
  int arg2 ;
  btDbvtAabbMm result;
  
  arg1 = (btVector3 **)jarg1; 
  arg2 = (int)jarg2; 
  result = btDbvtAabbMm::FromPoints((btVector3 const **)arg1,arg2);
  jresult = new btDbvtAabbMm((const btDbvtAabbMm &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtAabbMm_Expand(void * jarg1, void * jarg2) {
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->Expand((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtAabbMm_SignedExpand(void * jarg1, void * jarg2) {
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SignedExpand((btVector3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtAabbMm_Contain(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  bool result;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  arg2 = (btDbvtAabbMm *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  result = (bool)((btDbvtAabbMm const *)arg1)->Contain((btDbvtAabbMm const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtAabbMm_Classify(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  int jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)((btDbvtAabbMm const *)arg1)->Classify((btVector3 const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvtAabbMm_ProjectMinimum(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btScalar result;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (btScalar)((btDbvtAabbMm const *)arg1)->ProjectMinimum((btVector3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Intersect__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  bool result;
  
  arg1 = (btDbvtAabbMm *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  arg2 = (btDbvtAabbMm *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  result = (bool)Intersect((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Intersect__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btDbvtAabbMm *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (btDbvtAabbMm *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)Intersect((btDbvtAabbMm const &)*arg1,(btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Proximity(void * jarg1, void * jarg2) {
  float jresult ;
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btDbvtAabbMm *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  arg2 = (btDbvtAabbMm *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  result = (btScalar)Proximity((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Select(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  btDbvtAabbMm *arg3 = 0 ;
  int result;
  
  arg1 = (btDbvtAabbMm *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  arg2 = (btDbvtAabbMm *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  arg3 = (btDbvtAabbMm *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  result = (int)Select((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2,(btDbvtAabbMm const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merge(void * jarg1, void * jarg2, void * jarg3) {
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  btDbvtAabbMm *arg3 = 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return ;
  } 
  arg2 = (btDbvtAabbMm *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return ;
  } 
  arg3 = (btDbvtAabbMm *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm & type is null", 0);
    return ;
  } 
  Merge((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NotEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btDbvtAabbMm *arg1 = 0 ;
  btDbvtAabbMm *arg2 = 0 ;
  bool result;
  
  arg1 = (btDbvtAabbMm *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  arg2 = (btDbvtAabbMm *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtAabbMm const & type is null", 0);
    return 0;
  } 
  result = (bool)NotEqual((btDbvtAabbMm const &)*arg1,(btDbvtAabbMm const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_tMins(void * jarg1) {
  void * jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  result = (btVector3 *) &(arg1)->tMins();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtAabbMm_tMaxs(void * jarg1) {
  void * jresult ;
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  result = (btVector3 *) &(arg1)->tMaxs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtAabbMm() {
  void * jresult ;
  btDbvtAabbMm *result = 0 ;
  
  result = (btDbvtAabbMm *)new btDbvtAabbMm();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvtAabbMm(void * jarg1) {
  btDbvtAabbMm *arg1 = (btDbvtAabbMm *) 0 ;
  
  arg1 = (btDbvtAabbMm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtNode_volume_set(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg2 = (btDbvtVolume *) 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvtVolume *)jarg2; 
  if (arg1) (arg1)->volume = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtNode_volume_get(void * jarg1) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtVolume *result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (btDbvtVolume *)& ((arg1)->volume);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtNode_parent_set(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtNode_parent_get(void * jarg1) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (btDbvtNode *) ((arg1)->parent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtNode_isleaf(void * jarg1) {
  unsigned int jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  bool result;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (bool)((btDbvtNode const *)arg1)->isleaf();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtNode_isinternal(void * jarg1) {
  unsigned int jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  bool result;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (bool)((btDbvtNode const *)arg1)->isinternal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtNode_childs_set(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode **arg2 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvtNode **)jarg2; 
  {
    size_t ii;
    btDbvtNode * *b = (btDbvtNode * *) arg1->childs;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btDbvtNode * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtNode_childs_get(void * jarg1) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode **result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (btDbvtNode **)(btDbvtNode **) ((arg1)->childs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtNode_data_set(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtNode_data_get(void * jarg1) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  void *result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtNode_dataAsInt_set(void * jarg1, int jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dataAsInt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtNode_dataAsInt_get(void * jarg1) {
  int jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  int result;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (int) ((arg1)->dataAsInt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtNode() {
  void * jresult ;
  btDbvtNode *result = 0 ;
  
  result = (btDbvtNode *)new btDbvtNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvtNode(void * jarg1) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkNN_a_set(void * jarg1, void * jarg2) {
  btDbvt::sStkNN *arg1 = (btDbvt::sStkNN *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::sStkNN *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->a = (btDbvtNode const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_sStkNN_a_get(void * jarg1) {
  void * jresult ;
  btDbvt::sStkNN *arg1 = (btDbvt::sStkNN *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt::sStkNN *)jarg1; 
  result = (btDbvtNode *) ((arg1)->a);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkNN_b_set(void * jarg1, void * jarg2) {
  btDbvt::sStkNN *arg1 = (btDbvt::sStkNN *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::sStkNN *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->b = (btDbvtNode const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_sStkNN_b_get(void * jarg1) {
  void * jresult ;
  btDbvt::sStkNN *arg1 = (btDbvt::sStkNN *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt::sStkNN *)jarg1; 
  result = (btDbvtNode *) ((arg1)->b);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_sStkNN__SWIG_0() {
  void * jresult ;
  btDbvt::sStkNN *result = 0 ;
  
  result = (btDbvt::sStkNN *)new btDbvt::sStkNN();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_sStkNN__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvt::sStkNN *result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  result = (btDbvt::sStkNN *)new btDbvt::sStkNN((btDbvtNode const *)arg1,(btDbvtNode const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt_sStkNN(void * jarg1) {
  btDbvt::sStkNN *arg1 = (btDbvt::sStkNN *) 0 ;
  
  arg1 = (btDbvt::sStkNN *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkNP_node_set(void * jarg1, void * jarg2) {
  btDbvt::sStkNP *arg1 = (btDbvt::sStkNP *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::sStkNP *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->node = (btDbvtNode const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_sStkNP_node_get(void * jarg1) {
  void * jresult ;
  btDbvt::sStkNP *arg1 = (btDbvt::sStkNP *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt::sStkNP *)jarg1; 
  result = (btDbvtNode *) ((arg1)->node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkNP_mask_set(void * jarg1, int jarg2) {
  btDbvt::sStkNP *arg1 = (btDbvt::sStkNP *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvt::sStkNP *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_sStkNP_mask_get(void * jarg1) {
  int jresult ;
  btDbvt::sStkNP *arg1 = (btDbvt::sStkNP *) 0 ;
  int result;
  
  arg1 = (btDbvt::sStkNP *)jarg1; 
  result = (int) ((arg1)->mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_sStkNP(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  unsigned int arg2 ;
  btDbvt::sStkNP *result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (btDbvt::sStkNP *)new btDbvt::sStkNP((btDbvtNode const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt_sStkNP(void * jarg1) {
  btDbvt::sStkNP *arg1 = (btDbvt::sStkNP *) 0 ;
  
  arg1 = (btDbvt::sStkNP *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkNPS_node_set(void * jarg1, void * jarg2) {
  btDbvt::sStkNPS *arg1 = (btDbvt::sStkNPS *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::sStkNPS *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->node = (btDbvtNode const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_sStkNPS_node_get(void * jarg1) {
  void * jresult ;
  btDbvt::sStkNPS *arg1 = (btDbvt::sStkNPS *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt::sStkNPS *)jarg1; 
  result = (btDbvtNode *) ((arg1)->node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkNPS_mask_set(void * jarg1, int jarg2) {
  btDbvt::sStkNPS *arg1 = (btDbvt::sStkNPS *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvt::sStkNPS *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_sStkNPS_mask_get(void * jarg1) {
  int jresult ;
  btDbvt::sStkNPS *arg1 = (btDbvt::sStkNPS *) 0 ;
  int result;
  
  arg1 = (btDbvt::sStkNPS *)jarg1; 
  result = (int) ((arg1)->mask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkNPS_value_set(void * jarg1, float jarg2) {
  btDbvt::sStkNPS *arg1 = (btDbvt::sStkNPS *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDbvt::sStkNPS *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvt_sStkNPS_value_get(void * jarg1) {
  float jresult ;
  btDbvt::sStkNPS *arg1 = (btDbvt::sStkNPS *) 0 ;
  btScalar result;
  
  arg1 = (btDbvt::sStkNPS *)jarg1; 
  result = (btScalar) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_sStkNPS__SWIG_0() {
  void * jresult ;
  btDbvt::sStkNPS *result = 0 ;
  
  result = (btDbvt::sStkNPS *)new btDbvt::sStkNPS();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_sStkNPS__SWIG_1(void * jarg1, unsigned int jarg2, float jarg3) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  unsigned int arg2 ;
  btScalar arg3 ;
  btDbvt::sStkNPS *result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btDbvt::sStkNPS *)new btDbvt::sStkNPS((btDbvtNode const *)arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt_sStkNPS(void * jarg1) {
  btDbvt::sStkNPS *arg1 = (btDbvt::sStkNPS *) 0 ;
  
  arg1 = (btDbvt::sStkNPS *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkCLN_node_set(void * jarg1, void * jarg2) {
  btDbvt::sStkCLN *arg1 = (btDbvt::sStkCLN *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::sStkCLN *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->node = (btDbvtNode const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_sStkCLN_node_get(void * jarg1) {
  void * jresult ;
  btDbvt::sStkCLN *arg1 = (btDbvt::sStkCLN *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt::sStkCLN *)jarg1; 
  result = (btDbvtNode *) ((arg1)->node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_sStkCLN_parent_set(void * jarg1, void * jarg2) {
  btDbvt::sStkCLN *arg1 = (btDbvt::sStkCLN *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::sStkCLN *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->parent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_sStkCLN_parent_get(void * jarg1) {
  void * jresult ;
  btDbvt::sStkCLN *arg1 = (btDbvt::sStkCLN *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt::sStkCLN *)jarg1; 
  result = (btDbvtNode *) ((arg1)->parent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_sStkCLN(void * jarg1, void * jarg2) {
  void * jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvt::sStkCLN *result = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  result = (btDbvt::sStkCLN *)new btDbvt::sStkCLN((btDbvtNode const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt_sStkCLN(void * jarg1) {
  btDbvt::sStkCLN *arg1 = (btDbvt::sStkCLN *) 0 ;
  
  arg1 = (btDbvt::sStkCLN *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt_ICollide(void * jarg1) {
  btDbvt::ICollide *arg1 = (btDbvt::ICollide *) 0 ;
  
  arg1 = (btDbvt::ICollide *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_ICollide_Process__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btDbvt::ICollide *arg1 = (btDbvt::ICollide *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtNode *arg3 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::ICollide *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtNode *)jarg3; 
  (arg1)->Process((btDbvtNode const *)arg2,(btDbvtNode const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_ICollide_Process__SWIG_1(void * jarg1, void * jarg2) {
  btDbvt::ICollide *arg1 = (btDbvt::ICollide *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::ICollide *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  (arg1)->Process((btDbvtNode const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_ICollide_Process__SWIG_2(void * jarg1, void * jarg2, float jarg3) {
  btDbvt::ICollide *arg1 = (btDbvt::ICollide *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btScalar arg3 ;
  
  arg1 = (btDbvt::ICollide *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->Process((btDbvtNode const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvt_ICollide_Descent(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btDbvt::ICollide *arg1 = (btDbvt::ICollide *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  bool result;
  
  arg1 = (btDbvt::ICollide *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  result = (bool)(arg1)->Descent((btDbvtNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvt_ICollide_AllLeaves(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  btDbvt::ICollide *arg1 = (btDbvt::ICollide *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  bool result;
  
  arg1 = (btDbvt::ICollide *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  result = (bool)(arg1)->AllLeaves((btDbvtNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_ICollide() {
  void * jresult ;
  btDbvt::ICollide *result = 0 ;
  
  result = (btDbvt::ICollide *)new btDbvt::ICollide();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt_IWriter(void * jarg1) {
  btDbvt::IWriter *arg1 = (btDbvt::IWriter *) 0 ;
  
  arg1 = (btDbvt::IWriter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_IWriter_Prepare(void * jarg1, void * jarg2, int jarg3) {
  btDbvt::IWriter *arg1 = (btDbvt::IWriter *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  int arg3 ;
  
  arg1 = (btDbvt::IWriter *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Prepare((btDbvtNode const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_IWriter_WriteNode(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  btDbvt::IWriter *arg1 = (btDbvt::IWriter *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (btDbvt::IWriter *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->WriteNode((btDbvtNode const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_IWriter_WriteLeaf(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  btDbvt::IWriter *arg1 = (btDbvt::IWriter *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btDbvt::IWriter *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->WriteLeaf((btDbvtNode const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt_IClone(void * jarg1) {
  btDbvt::IClone *arg1 = (btDbvt::IClone *) 0 ;
  
  arg1 = (btDbvt::IClone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_IClone_CloneLeaf(void * jarg1, void * jarg2) {
  btDbvt::IClone *arg1 = (btDbvt::IClone *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt::IClone *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  (arg1)->CloneLeaf(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt_IClone() {
  void * jresult ;
  btDbvt::IClone *result = 0 ;
  
  result = (btDbvt::IClone *)new btDbvt::IClone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_SIMPLE_STACKSIZE_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvt::SIMPLE_STACKSIZE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_DOUBLE_STACKSIZE_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvt::DOUBLE_STACKSIZE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_m_root_set(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->m_root = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_m_root_get(void * jarg1) {
  void * jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  result = (btDbvtNode *) ((arg1)->m_root);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_m_free_set(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->m_free = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_m_free_get(void * jarg1) {
  void * jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  result = (btDbvtNode *) ((arg1)->m_free);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_m_lkhd_set(void * jarg1, int jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_lkhd = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_m_lkhd_get(void * jarg1) {
  int jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  int result;
  
  arg1 = (btDbvt *)jarg1; 
  result = (int) ((arg1)->m_lkhd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_m_leaves_set(void * jarg1, int jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_leaves = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_m_leaves_get(void * jarg1) {
  int jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  int result;
  
  arg1 = (btDbvt *)jarg1; 
  result = (int) ((arg1)->m_leaves);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_m_opath_set(void * jarg1, unsigned int jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_opath = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvt_m_opath_get(void * jarg1) {
  unsigned int jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  unsigned int result;
  
  arg1 = (btDbvt *)jarg1; 
  result = (unsigned int) ((arg1)->m_opath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_m_stkStack_set(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< btDbvt::sStkNN > *arg2 = (btAlignedObjectArray< btDbvt::sStkNN > *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btAlignedObjectArray< btDbvt::sStkNN > *)jarg2; 
  if (arg1) (arg1)->m_stkStack = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_m_stkStack_get(void * jarg1) {
  void * jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< btDbvt::sStkNN > *result = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  result = (btAlignedObjectArray< btDbvt::sStkNN > *)& ((arg1)->m_stkStack);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_m_rayTestStack_set(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< btDbvtNode const * > *arg2 = (btAlignedObjectArray< btDbvtNode const * > *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btAlignedObjectArray< btDbvtNode const * > *)jarg2; 
  if (arg1) (arg1)->m_rayTestStack = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_m_rayTestStack_get(void * jarg1) {
  void * jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btAlignedObjectArray< btDbvtNode const * > *result = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  result = (btAlignedObjectArray< btDbvtNode const * > *)& ((arg1)->m_rayTestStack);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvt() {
  void * jresult ;
  btDbvt *result = 0 ;
  
  result = (btDbvt *)new btDbvt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvt(void * jarg1) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_clear(void * jarg1) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvt_empty(void * jarg1) {
  unsigned int jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  bool result;
  
  arg1 = (btDbvt *)jarg1; 
  result = (bool)((btDbvt const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_optimizeBottomUp(void * jarg1) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  (arg1)->optimizeBottomUp();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_optimizeTopDown__SWIG_0(void * jarg1, int jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->optimizeTopDown(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_optimizeTopDown__SWIG_1(void * jarg1) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  (arg1)->optimizeTopDown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_optimizeIncremental(void * jarg1, int jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->optimizeIncremental(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvt_insert(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtVolume *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtVolume *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtVolume const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  result = (btDbvtNode *)(arg1)->insert((btDbvtVolume const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_update__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  int arg3 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->update(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_update__SWIG_1(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_update__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtVolume *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtVolume & type is null", 0);
    return ;
  } 
  (arg1)->update(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvt_update__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  unsigned int jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  bool result;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtVolume *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtVolume & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  result = (bool)(arg1)->update(arg2,*arg3,(btVector3 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvt_update__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  bool result;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtVolume *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtVolume & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->update(arg2,*arg3,(btVector3 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvt_update__SWIG_5(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  btScalar arg4 ;
  bool result;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtVolume *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtVolume & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  result = (bool)(arg1)->update(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_remove(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  (arg1)->remove(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_write(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvt::IWriter *arg2 = (btDbvt::IWriter *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvt::IWriter *)jarg2; 
  ((btDbvt const *)arg1)->write(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_clone__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvt *arg2 = 0 ;
  btDbvt::IClone *arg3 = (btDbvt::IClone *) 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt & type is null", 0);
    return ;
  } 
  arg3 = (btDbvt::IClone *)jarg3; 
  ((btDbvt const *)arg1)->clone(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_clone__SWIG_1(void * jarg1, void * jarg2) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvt *arg2 = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvt *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt & type is null", 0);
    return ;
  } 
  ((btDbvt const *)arg1)->clone(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_maxdepth(void * jarg1) {
  int jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  int result;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (int)btDbvt::maxdepth((btDbvtNode const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_countLeaves(void * jarg1) {
  int jresult ;
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  int result;
  
  arg1 = (btDbvtNode *)jarg1; 
  result = (int)btDbvt::countLeaves((btDbvtNode const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_extractLeaves(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btAlignedObjectArray< btDbvtNode const * > *arg2 = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btAlignedObjectArray< btDbvtNode const * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btDbvtNode const * > & type is null", 0);
    return ;
  } 
  btDbvt::extractLeaves((btDbvtNode const *)arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_benchmark() {
  btDbvt::benchmark();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_enumNodes(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvt::ICollide *arg2 = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvt::ICollide *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  btDbvt::enumNodes((btDbvtNode const *)arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_enumLeaves(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvt::ICollide *arg2 = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvt::ICollide *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  btDbvt::enumLeaves((btDbvtNode const *)arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_collideTT(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtNode *arg3 = (btDbvtNode *) 0 ;
  btDbvt::ICollide *arg4 = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtNode *)jarg3; 
  arg4 = (btDbvt::ICollide *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  (arg1)->collideTT((btDbvtNode const *)arg2,(btDbvtNode const *)arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_collideTTpersistentStack(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtNode *arg3 = (btDbvtNode *) 0 ;
  btDbvt::ICollide *arg4 = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtNode *)jarg3; 
  arg4 = (btDbvt::ICollide *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  (arg1)->collideTTpersistentStack((btDbvtNode const *)arg2,(btDbvtNode const *)arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_collideTV(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btDbvtVolume *arg3 = 0 ;
  btDbvt::ICollide *arg4 = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btDbvtVolume *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvtVolume const & type is null", 0);
    return ;
  } 
  arg4 = (btDbvt::ICollide *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  ((btDbvt const *)arg1)->collideTV((btDbvtNode const *)arg2,(btDbvtVolume const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_rayTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btDbvt::ICollide *arg4 = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btDbvt::ICollide *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  btDbvt::rayTest((btDbvtNode const *)arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_rayTestInternal(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7, void * jarg8, void * jarg9, void * jarg10) {
  btDbvt *arg1 = (btDbvt *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  unsigned int *arg6 ;
  btScalar arg7 ;
  btVector3 *arg8 = 0 ;
  btVector3 *arg9 = 0 ;
  btDbvt::ICollide *arg10 = 0 ;
  
  arg1 = (btDbvt *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (unsigned int *)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg10 = (btDbvt::ICollide *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  ((btDbvt const *)arg1)->rayTestInternal((btDbvtNode const *)arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6,arg7,(btVector3 const &)*arg8,(btVector3 const &)*arg9,*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_collideKDOP(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btScalar *arg3 = (btScalar *) 0 ;
  int arg4 ;
  btDbvt::ICollide *arg5 = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btScalar *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btDbvt::ICollide *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  btDbvt::collideKDOP((btDbvtNode const *)arg1,(btVector3 const *)arg2,(float const *)arg3,arg4,*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_collideOCL__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btScalar *arg3 = (btScalar *) 0 ;
  btVector3 *arg4 = 0 ;
  int arg5 ;
  btDbvt::ICollide *arg6 = 0 ;
  bool arg7 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btScalar *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  arg6 = (btDbvt::ICollide *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  btDbvt::collideOCL((btDbvtNode const *)arg1,(btVector3 const *)arg2,(float const *)arg3,(btVector3 const &)*arg4,arg5,*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_collideOCL__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  btScalar *arg3 = (btScalar *) 0 ;
  btVector3 *arg4 = 0 ;
  int arg5 ;
  btDbvt::ICollide *arg6 = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  arg3 = (btScalar *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  arg6 = (btDbvt::ICollide *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  btDbvt::collideOCL((btDbvtNode const *)arg1,(btVector3 const *)arg2,(float const *)arg3,(btVector3 const &)*arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvt_collideTU(void * jarg1, void * jarg2) {
  btDbvtNode *arg1 = (btDbvtNode *) 0 ;
  btDbvt::ICollide *arg2 = 0 ;
  
  arg1 = (btDbvtNode *)jarg1; 
  arg2 = (btDbvt::ICollide *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::ICollide & type is null", 0);
    return ;
  } 
  btDbvt::collideTU((btDbvtNode const *)arg1,*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_nearest(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  btDbvt::sStkNPS *arg2 = (btDbvt::sStkNPS *) 0 ;
  btScalar arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  arg1 = (int *)jarg1; 
  arg2 = (btDbvt::sStkNPS *)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)btDbvt::nearest((int const *)arg1,(btDbvt::sStkNPS const *)arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvt_allocate(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  btAlignedObjectArray< int > *arg1 = 0 ;
  btAlignedObjectArray< btDbvt::sStkNPS > *arg2 = 0 ;
  btDbvt::sStkNPS *arg3 = 0 ;
  int result;
  
  arg1 = (btAlignedObjectArray< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< int > & type is null", 0);
    return 0;
  } 
  arg2 = (btAlignedObjectArray< btDbvt::sStkNPS > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btAlignedObjectArray< btDbvt::sStkNPS > & type is null", 0);
    return 0;
  } 
  arg3 = (btDbvt::sStkNPS *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btDbvt::sStkNPS const & type is null", 0);
    return 0;
  } 
  result = (int)btDbvt::allocate(*arg1,*arg2,(btDbvt::sStkNPS const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_PROFILE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_PREVENTFALSEUPDATE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_ACCURATESLEEPING_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBVT_BP_ENABLE_BENCHMARK_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtProxy_leaf_set(void * jarg1, void * jarg2) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtNode *arg2 = (btDbvtNode *) 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  arg2 = (btDbvtNode *)jarg2; 
  if (arg1) (arg1)->leaf = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtProxy_leaf_get(void * jarg1) {
  void * jresult ;
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtNode *result = 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  result = (btDbvtNode *) ((arg1)->leaf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtProxy_links_set(void * jarg1, void * jarg2) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtProxy **arg2 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  arg2 = (btDbvtProxy **)jarg2; 
  {
    size_t ii;
    btDbvtProxy * *b = (btDbvtProxy * *) arg1->links;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btDbvtProxy * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtProxy_links_get(void * jarg1) {
  void * jresult ;
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  btDbvtProxy **result = 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  result = (btDbvtProxy **)(btDbvtProxy **) ((arg1)->links);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtProxy_stage_set(void * jarg1, int jarg2) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->stage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtProxy_stage_get(void * jarg1) {
  int jresult ;
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  int result;
  
  arg1 = (btDbvtProxy *)jarg1; 
  result = (int) ((arg1)->stage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtProxy(void * jarg1, void * jarg2, void * jarg3, short jarg4, short jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  short arg4 ;
  short arg5 ;
  btDbvtProxy *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (void *)jarg3; 
  arg4 = (short)jarg4; 
  arg5 = (short)jarg5; 
  result = (btDbvtProxy *)new btDbvtProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvtProxy(void * jarg1) {
  btDbvtProxy *arg1 = (btDbvtProxy *) 0 ;
  
  arg1 = (btDbvtProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_DYNAMIC_SET_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvtBroadphase::DYNAMIC_SET;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_FIXED_SET_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvtBroadphase::FIXED_SET;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_STAGECOUNT_get() {
  int jresult ;
  int result;
  
  result = (int)btDbvtBroadphase::STAGECOUNT;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_sets_set(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvt *arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDbvt *)jarg2; 
  {
    size_t ii;
    btDbvt *b = (btDbvt *) arg1->m_sets;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((btDbvt *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_m_sets_get(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvt *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btDbvt *)(btDbvt *) ((arg1)->m_sets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageRoots_set(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvtProxy **arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDbvtProxy **)jarg2; 
  {
    size_t ii;
    btDbvtProxy * *b = (btDbvtProxy * *) arg1->m_stageRoots;
    for (ii = 0; ii < (size_t)btDbvtBroadphase::STAGECOUNT+1; ii++) b[ii] = *((btDbvtProxy * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageRoots_get(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDbvtProxy **result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btDbvtProxy **)(btDbvtProxy **) ((arg1)->m_stageRoots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_paircache_set(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *arg2 = (btOverlappingPairCache *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btOverlappingPairCache *)jarg2; 
  if (arg1) (arg1)->m_paircache = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_m_paircache_get(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btOverlappingPairCache *) ((arg1)->m_paircache);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_prediction_set(void * jarg1, float jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_prediction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvtBroadphase_m_prediction_get(void * jarg1) {
  float jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btScalar) ((arg1)->m_prediction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageCurrent_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_stageCurrent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_stageCurrent_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_stageCurrent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_fupdates_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_fupdates = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_fupdates_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_fupdates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_dupdates_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_dupdates = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_dupdates_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_dupdates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_cupdates_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_cupdates = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_cupdates_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_cupdates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_newpairs_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_newpairs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_newpairs_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_newpairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_fixedleft_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_fixedleft = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_fixedleft_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_fixedleft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_call_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_updates_call = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_call_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (unsigned int) ((arg1)->m_updates_call);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_done_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->m_updates_done = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_done_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  unsigned int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (unsigned int) ((arg1)->m_updates_done);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_ratio_set(void * jarg1, float jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_updates_ratio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvtBroadphase_m_updates_ratio_get(void * jarg1) {
  float jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btScalar) ((arg1)->m_updates_ratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_pid_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_pid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_pid_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_pid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_cid_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_cid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_cid_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_cid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_gid_set(void * jarg1, int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_gid = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDbvtBroadphase_m_gid_get(void * jarg1) {
  int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  int result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (int) ((arg1)->m_gid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_releasepaircache_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_releasepaircache = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_releasepaircache_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (bool) ((arg1)->m_releasepaircache);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_deferedcollide_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_deferedcollide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_deferedcollide_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (bool) ((arg1)->m_deferedcollide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_m_needcleanup_set(void * jarg1, unsigned int jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_needcleanup = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDbvtBroadphase_m_needcleanup_get(void * jarg1) {
  unsigned int jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  bool result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (bool) ((arg1)->m_needcleanup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtBroadphase__SWIG_0(void * jarg1) {
  void * jresult ;
  btOverlappingPairCache *arg1 = (btOverlappingPairCache *) 0 ;
  btDbvtBroadphase *result = 0 ;
  
  arg1 = (btOverlappingPairCache *)jarg1; 
  result = (btDbvtBroadphase *)new btDbvtBroadphase(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDbvtBroadphase__SWIG_1() {
  void * jresult ;
  btDbvtBroadphase *result = 0 ;
  
  result = (btDbvtBroadphase *)new btDbvtBroadphase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDbvtBroadphase(void * jarg1) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_collide(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->collide(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_optimize(void * jarg1) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  (arg1)->optimize();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_createProxy(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, short jarg6, short jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (short)jarg7; 
  arg8 = (btDispatcher *)jarg8; 
  arg9 = (void *)jarg9; 
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_destroyProxy(void * jarg1, void * jarg2, void * jarg3) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->destroyProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_setAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_rayTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_rayTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_rayTest__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_aabbTest(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseAabbCallback *arg4 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseAabbCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseAabbCallback & type is null", 0);
    return ;
  } 
  (arg1)->aabbTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btDbvtBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_calculateOverlappingPairs(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->calculateOverlappingPairs(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDbvtBroadphase_getOverlappingPairCache__SWIG_0(void * jarg1) {
  void * jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_getBroadphaseAabb(void * jarg1, void * jarg2, void * jarg3) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btDbvtBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_printStats(void * jarg1) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  (arg1)->printStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_resetPool(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->resetPool(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_performDeferredRemoval(void * jarg1, void * jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->performDeferredRemoval(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_setVelocityPrediction(void * jarg1, float jarg2) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setVelocityPrediction(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btDbvtBroadphase_getVelocityPrediction(void * jarg1) {
  float jresult ;
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btScalar result;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  result = (btScalar)((btDbvtBroadphase const *)arg1)->getVelocityPrediction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_setAabbForceUpdate(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btDbvtBroadphase *arg1 = (btDbvtBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btDbvtBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabbForceUpdate(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDbvtBroadphase_benchmark(void * jarg1) {
  btBroadphaseInterface *arg1 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btBroadphaseInterface *)jarg1; 
  btDbvtBroadphase::benchmark(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_OVERLAP_TEST_ON_REMOVES_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gOverlappingPairs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  gOverlappingPairs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gOverlappingPairs_get() {
  int jresult ;
  int result;
  
  result = (int)gOverlappingPairs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bool arg5 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned short)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned short)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_2(void * jarg1, void * jarg2, unsigned short jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned short arg3 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned short)jarg3; 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAxisSweep3__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btAxisSweep3 *)new btAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAxisSweep3(void * jarg1) {
  btAxisSweep3 *arg1 = (btAxisSweep3 *) 0 ;
  
  arg1 = (btAxisSweep3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bool arg5 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  btOverlappingPairCache *arg4 = (btOverlappingPairCache *) 0 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (btOverlappingPairCache *)jarg4; 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  unsigned int arg3 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_bt32BitAxisSweep3__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  bt32BitAxisSweep3 *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (bt32BitAxisSweep3 *)new bt32BitAxisSweep3((btVector3 const &)*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_bt32BitAxisSweep3(void * jarg1) {
  bt32BitAxisSweep3 *arg1 = (bt32BitAxisSweep3 *) 0 ;
  
  arg1 = (bt32BitAxisSweep3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_btMultiSapProxy_m_aabbMin_set(void * jarg1, void * jarg2) {
  btMultiSapBroadphase::btMultiSapProxy *arg1 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btMultiSapBroadphase::btMultiSapProxy *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_aabbMin = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSapBroadphase_btMultiSapProxy_m_aabbMin_get(void * jarg1) {
  void * jresult ;
  btMultiSapBroadphase::btMultiSapProxy *arg1 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btMultiSapBroadphase::btMultiSapProxy *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_aabbMin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_btMultiSapProxy_m_aabbMax_set(void * jarg1, void * jarg2) {
  btMultiSapBroadphase::btMultiSapProxy *arg1 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btMultiSapBroadphase::btMultiSapProxy *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_aabbMax = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSapBroadphase_btMultiSapProxy_m_aabbMax_get(void * jarg1) {
  void * jresult ;
  btMultiSapBroadphase::btMultiSapProxy *arg1 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btMultiSapBroadphase::btMultiSapProxy *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_aabbMax);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_btMultiSapProxy_m_shapeType_set(void * jarg1, int jarg2) {
  btMultiSapBroadphase::btMultiSapProxy *arg1 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  int arg2 ;
  
  arg1 = (btMultiSapBroadphase::btMultiSapProxy *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_shapeType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btMultiSapBroadphase_btMultiSapProxy_m_shapeType_get(void * jarg1) {
  int jresult ;
  btMultiSapBroadphase::btMultiSapProxy *arg1 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  int result;
  
  arg1 = (btMultiSapBroadphase::btMultiSapProxy *)jarg1; 
  result = (int) ((arg1)->m_shapeType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btMultiSapBroadphase_btMultiSapProxy(void * jarg1, void * jarg2, int jarg3, void * jarg4, short jarg5, short jarg6) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  short arg5 ;
  short arg6 ;
  btMultiSapBroadphase::btMultiSapProxy *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (short)jarg5; 
  arg6 = (short)jarg6; 
  result = (btMultiSapBroadphase::btMultiSapProxy *)new btMultiSapBroadphase::btMultiSapProxy((btVector3 const &)*arg1,(btVector3 const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMultiSapBroadphase_btMultiSapProxy(void * jarg1) {
  btMultiSapBroadphase::btMultiSapProxy *arg1 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  
  arg1 = (btMultiSapBroadphase::btMultiSapProxy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSapBroadphase_getBroadphaseArray__SWIG_0(void * jarg1) {
  void * jresult ;
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btSapBroadphaseArray *result = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  result = (btSapBroadphaseArray *) &(arg1)->getBroadphaseArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btMultiSapBroadphase(void * jarg1) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSapBroadphase_createProxy(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, short jarg6, short jarg7, void * jarg8, void * jarg9) {
  void * jresult ;
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  short arg6 ;
  short arg7 ;
  btDispatcher *arg8 = (btDispatcher *) 0 ;
  void *arg9 = (void *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (short)jarg6; 
  arg7 = (short)jarg7; 
  arg8 = (btDispatcher *)jarg8; 
  arg9 = (void *)jarg9; 
  result = (btBroadphaseProxy *)(arg1)->createProxy((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_destroyProxy(void * jarg1, void * jarg2, void * jarg3) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btDispatcher *arg3 = (btDispatcher *) 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btDispatcher *)jarg3; 
  (arg1)->destroyProxy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_setAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btDispatcher *arg5 = (btDispatcher *) 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btDispatcher *)jarg5; 
  (arg1)->setAabb(arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_getAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btMultiSapBroadphase const *)arg1)->getAabb(arg2,*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_rayTest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_rayTest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_rayTest__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btBroadphaseRayCallback *arg4 = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btBroadphaseRayCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btBroadphaseRayCallback & type is null", 0);
    return ;
  } 
  (arg1)->rayTest((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_addToChildBroadphase(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btMultiSapBroadphase::btMultiSapProxy *arg2 = (btMultiSapBroadphase::btMultiSapProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  btBroadphaseInterface *arg4 = (btBroadphaseInterface *) 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btMultiSapBroadphase::btMultiSapProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  arg4 = (btBroadphaseInterface *)jarg4; 
  (arg1)->addToChildBroadphase(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_calculateOverlappingPairs(void * jarg1, void * jarg2) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->calculateOverlappingPairs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btMultiSapBroadphase_testAabbOverlap(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  btBroadphaseProxy *arg3 = (btBroadphaseProxy *) 0 ;
  bool result;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  arg3 = (btBroadphaseProxy *)jarg3; 
  result = (bool)(arg1)->testAabbOverlap(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btMultiSapBroadphase_getOverlappingPairCache__SWIG_0(void * jarg1) {
  void * jresult ;
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btOverlappingPairCache *result = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  result = (btOverlappingPairCache *)(arg1)->getOverlappingPairCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_getBroadphaseAabb(void * jarg1, void * jarg2, void * jarg3) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btMultiSapBroadphase const *)arg1)->getBroadphaseAabb(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_buildTree(void * jarg1, void * jarg2, void * jarg3) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->buildTree((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_printStats(void * jarg1) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  (arg1)->printStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btMultiSapBroadphase_resetPool(void * jarg1, void * jarg2) {
  btMultiSapBroadphase *arg1 = (btMultiSapBroadphase *) 0 ;
  btDispatcher *arg2 = (btDispatcher *) 0 ;
  
  arg1 = (btMultiSapBroadphase *)jarg1; 
  arg2 = (btDispatcher *)jarg2; 
  (arg1)->resetPool(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_graphicsWorldTrans_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_graphicsWorldTrans = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_graphicsWorldTrans_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (btTransform *)& ((arg1)->m_graphicsWorldTrans);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_centerOfMassOffset_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_centerOfMassOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_centerOfMassOffset_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (btTransform *)& ((arg1)->m_centerOfMassOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_startWorldTrans_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_startWorldTrans = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_startWorldTrans_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (btTransform *)& ((arg1)->m_startWorldTrans);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_m_userPointer_set(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_userPointer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultMotionState_m_userPointer_get(void * jarg1) {
  void * jresult ;
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  void *result = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  result = (void *) ((arg1)->m_userPointer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultMotionState__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  btTransform *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1,(btTransform const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultMotionState__SWIG_1(void * jarg1) {
  void * jresult ;
  btTransform *arg1 = 0 ;
  btDefaultMotionState *result = 0 ;
  
  arg1 = (btTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btDefaultMotionState *)new btDefaultMotionState((btTransform const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultMotionState__SWIG_2() {
  void * jresult ;
  btDefaultMotionState *result = 0 ;
  
  result = (btDefaultMotionState *)new btDefaultMotionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_getWorldTransform(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  ((btDefaultMotionState const *)arg1)->getWorldTransform(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDefaultMotionState_setWorldTransform(void * jarg1, void * jarg2) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultMotionState(void * jarg1) {
  btDefaultMotionState *arg1 = (btDefaultMotionState *) 0 ;
  
  arg1 = (btDefaultMotionState *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USE_BT_CLOCK_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btClock__SWIG_0() {
  void * jresult ;
  btClock *result = 0 ;
  
  result = (btClock *)new btClock();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btClock__SWIG_1(void * jarg1) {
  void * jresult ;
  btClock *arg1 = 0 ;
  btClock *result = 0 ;
  
  arg1 = (btClock *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btClock const & type is null", 0);
    return 0;
  } 
  result = (btClock *)new btClock((btClock const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btClock(void * jarg1) {
  btClock *arg1 = (btClock *) 0 ;
  
  arg1 = (btClock *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btClock_reset(void * jarg1) {
  btClock *arg1 = (btClock *) 0 ;
  
  arg1 = (btClock *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btClock_getTimeMilliseconds(void * jarg1) {
  unsigned long jresult ;
  btClock *arg1 = (btClock *) 0 ;
  unsigned long result;
  
  arg1 = (btClock *)jarg1; 
  result = (unsigned long)(arg1)->getTimeMilliseconds();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btClock_getTimeMicroseconds(void * jarg1) {
  unsigned long jresult ;
  btClock *arg1 = (btClock *) 0 ;
  unsigned long result;
  
  arg1 = (btClock *)jarg1; 
  result = (unsigned long)(arg1)->getTimeMicroseconds();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProfileNode(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CProfileNode *arg2 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (CProfileNode *)jarg2; 
  result = (CProfileNode *)new CProfileNode((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProfileNode(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Sub_Node(void * jarg1, char * jarg2) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  char *arg2 = (char *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (CProfileNode *)(arg1)->Get_Sub_Node((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Parent(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (CProfileNode *)(arg1)->Get_Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Sibling(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (CProfileNode *)(arg1)->Get_Sibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_Get_Child(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  CProfileNode *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (CProfileNode *)(arg1)->Get_Child();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_CleanupMemory(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  (arg1)->CleanupMemory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_Reset(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_Call(void * jarg1) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  (arg1)->Call();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CProfileNode_Return(void * jarg1) {
  unsigned int jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  bool result;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (bool)(arg1)->Return();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CProfileNode_Get_Name(void * jarg1) {
  char * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (char *)(arg1)->Get_Name();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CProfileNode_Get_Total_Calls(void * jarg1) {
  int jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  int result;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (int)(arg1)->Get_Total_Calls();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CProfileNode_Get_Total_Time(void * jarg1) {
  float jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  float result;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (float)(arg1)->Get_Total_Time();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileNode_GetUserPointer(void * jarg1) {
  void * jresult ;
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  void *result = 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  result = (void *)((CProfileNode const *)arg1)->GetUserPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileNode_SetUserPointer(void * jarg1, void * jarg2) {
  CProfileNode *arg1 = (CProfileNode *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (CProfileNode *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetUserPointer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Start_Profile(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  CProfileManager::Start_Profile((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Stop_Profile() {
  CProfileManager::Stop_Profile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_CleanupMemory() {
  CProfileManager::CleanupMemory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Reset() {
  CProfileManager::Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Increment_Frame_Counter() {
  CProfileManager::Increment_Frame_Counter();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CProfileManager_Get_Frame_Count_Since_Reset() {
  int jresult ;
  int result;
  
  result = (int)CProfileManager::Get_Frame_Count_Since_Reset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CProfileManager_Get_Time_Since_Reset() {
  float jresult ;
  float result;
  
  result = (float)CProfileManager::Get_Time_Since_Reset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CProfileManager_Get_Iterator() {
  void * jresult ;
  CProfileIterator *result = 0 ;
  
  result = (CProfileIterator *)CProfileManager::Get_Iterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_Release_Iterator(void * jarg1) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  CProfileManager::Release_Iterator(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_dumpRecursive(void * jarg1, int jarg2) {
  CProfileIterator *arg1 = (CProfileIterator *) 0 ;
  int arg2 ;
  
  arg1 = (CProfileIterator *)jarg1; 
  arg2 = (int)jarg2; 
  CProfileManager::dumpRecursive(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CProfileManager_dumpAll() {
  CProfileManager::dumpAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProfileManager() {
  void * jresult ;
  CProfileManager *result = 0 ;
  
  result = (CProfileManager *)new CProfileManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProfileManager(void * jarg1) {
  CProfileManager *arg1 = (CProfileManager *) 0 ;
  
  arg1 = (CProfileManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CProfileSample(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CProfileSample *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CProfileSample *)new CProfileSample((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CProfileSample(void * jarg1) {
  CProfileSample *arg1 = (CProfileSample *) 0 ;
  
  arg1 = (CProfileSample *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btIDebugDraw(void * jarg1) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawLine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawLine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawLine((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSphere__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawSphere(arg2,(btTransform const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSphere__SWIG_1(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawSphere((btVector3 const &)*arg2,arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTriangle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, float jarg9) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg9 = (btScalar)jarg9; 
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTriangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btScalar)jarg6; 
  (arg1)->drawTriangle((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawContactPoint(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  int arg5 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawContactPoint((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4,arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_reportErrorWarning(void * jarg1, char * jarg2) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->reportErrorWarning((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_draw3dText(void * jarg1, void * jarg2, char * jarg3) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  (arg1)->draw3dText((btVector3 const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_setDebugMode(void * jarg1, int jarg2) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int arg2 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDebugMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btIDebugDraw_getDebugMode(void * jarg1) {
  int jresult ;
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  int result;
  
  arg1 = (btIDebugDraw *)jarg1; 
  result = (int)((btIDebugDraw const *)arg1)->getDebugMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawAabb(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawAabb((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawTransform(void * jarg1, void * jarg2, float jarg3) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btTransform *arg2 = 0 ;
  btScalar arg3 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  (arg1)->drawTransform((btTransform const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawArc__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, unsigned int jarg10, float jarg11) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  btScalar arg11 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg10 = jarg10 ? true : false; 
  arg11 = (btScalar)jarg11; 
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawArc__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, void * jarg9, unsigned int jarg10) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btVector3 *arg9 = 0 ;
  bool arg10 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg10 = jarg10 ? true : false; 
  (arg1)->drawArc((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,(btVector3 const &)*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSpherePatch__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void * jarg10, float jarg11, unsigned int jarg12) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  btScalar arg11 ;
  bool arg12 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btScalar)jarg9; 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg11 = (btScalar)jarg11; 
  arg12 = jarg12 ? true : false; 
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSpherePatch__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void * jarg10, float jarg11) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  btScalar arg11 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btScalar)jarg9; 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg11 = (btScalar)jarg11; 
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawSpherePatch__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, void * jarg10) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  btScalar arg8 ;
  btScalar arg9 ;
  btVector3 *arg10 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  arg9 = (btScalar)jarg9; 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawSpherePatch((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,arg7,arg8,arg9,(btVector3 const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawBox__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawBox__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawBox((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCapsule(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawCapsule(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCylinder(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawCylinder(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawCone(void * jarg1, float jarg2, float jarg3, int jarg4, void * jarg5, void * jarg6) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  int arg4 ;
  btTransform *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btTransform *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawCone(arg2,arg3,arg4,(btTransform const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btIDebugDraw_drawPlane(void * jarg1, void * jarg2, float jarg3, void * jarg4, void * jarg5) {
  btIDebugDraw *arg1 = (btIDebugDraw *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar arg3 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  
  arg1 = (btIDebugDraw *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->drawPlane((btVector3 const &)*arg2,arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_tau_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_tau = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_tau_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_damping_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_damping_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_friction_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_friction_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_timeStep_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_timeStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_timeStep_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_timeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_restitution_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_restitution_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_numIterations_set(void * jarg1, int jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoData_m_numIterations_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (int) ((arg1)->m_numIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_maxErrorReduction_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_maxErrorReduction_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_maxErrorReduction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_sor_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_sor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_sor_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_sor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_erp_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_erp_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_erp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_erp2_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_erp2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_erp2_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_erp2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_globalCfm_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_globalCfm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_globalCfm_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_globalCfm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_splitImpulse_set(void * jarg1, int jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_splitImpulse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoData_m_splitImpulse_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (int) ((arg1)->m_splitImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_splitImpulsePenetrationThreshold_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_splitImpulsePenetrationThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_splitImpulseTurnErp_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_splitImpulseTurnErp_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_splitImpulseTurnErp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_linearSlop_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_linearSlop = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_linearSlop_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_linearSlop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_warmstartingFactor_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_warmstartingFactor_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_warmstartingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_solverMode_set(void * jarg1, int jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_solverMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoData_m_solverMode_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (int) ((arg1)->m_solverMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_restingContactRestitutionThreshold_set(void * jarg1, int jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoData_m_restingContactRestitutionThreshold_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_minimumSolverBatchSize_set(void * jarg1, int jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoData_m_minimumSolverBatchSize_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_maxGyroscopicForce_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_maxGyroscopicForce_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_maxGyroscopicForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_set(void * jarg1, float jarg2) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  btScalar result;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  result = (btScalar) ((arg1)->m_singleAxisRollingFrictionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btContactSolverInfoData() {
  void * jresult ;
  btContactSolverInfoData *result = 0 ;
  
  result = (btContactSolverInfoData *)new btContactSolverInfoData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btContactSolverInfoData(void * jarg1) {
  btContactSolverInfoData *arg1 = (btContactSolverInfoData *) 0 ;
  
  arg1 = (btContactSolverInfoData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btContactSolverInfo() {
  void * jresult ;
  btContactSolverInfo *result = 0 ;
  
  result = (btContactSolverInfo *)new btContactSolverInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btContactSolverInfo(void * jarg1) {
  btContactSolverInfo *arg1 = (btContactSolverInfo *) 0 ;
  
  arg1 = (btContactSolverInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_tau_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_tau = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_tau_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_damping_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_damping_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_friction_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_friction_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_timeStep_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_timeStep = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_timeStep_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_timeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_restitution_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_restitution_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_maxErrorReduction_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_maxErrorReduction_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_maxErrorReduction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_sor_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_sor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_sor_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_sor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_erp_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_erp_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_erp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_erp2_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_erp2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_erp2_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_erp2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_globalCfm_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_globalCfm = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_globalCfm_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_globalCfm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_splitImpulsePenetrationThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_splitImpulseTurnErp_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_splitImpulseTurnErp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_linearSlop_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearSlop = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_linearSlop_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearSlop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_warmstartingFactor_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_warmstartingFactor_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_warmstartingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_maxGyroscopicForce_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_maxGyroscopicForce_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_maxGyroscopicForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_set(void * jarg1, double jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_get(void * jarg1) {
  double jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  double result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (double) ((arg1)->m_singleAxisRollingFrictionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_numIterations_set(void * jarg1, int jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_numIterations_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (int) ((arg1)->m_numIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_solverMode_set(void * jarg1, int jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_solverMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_solverMode_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (int) ((arg1)->m_solverMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_set(void * jarg1, int jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_set(void * jarg1, int jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_minimumSolverBatchSize_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_splitImpulse_set(void * jarg1, int jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_splitImpulse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_splitImpulse_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (int) ((arg1)->m_splitImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_padding_set(void * jarg1, char * jarg2) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btContactSolverInfoDoubleData_m_padding_get(void * jarg1) {
  char * jresult ;
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btContactSolverInfoDoubleData() {
  void * jresult ;
  btContactSolverInfoDoubleData *result = 0 ;
  
  result = (btContactSolverInfoDoubleData *)new btContactSolverInfoDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btContactSolverInfoDoubleData(void * jarg1) {
  btContactSolverInfoDoubleData *arg1 = (btContactSolverInfoDoubleData *) 0 ;
  
  arg1 = (btContactSolverInfoDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_tau_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_tau = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_tau_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_damping_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_damping_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_friction_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_friction_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_timeStep_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_timeStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_timeStep_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_timeStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_restitution_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_restitution_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_maxErrorReduction_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxErrorReduction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_maxErrorReduction_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_maxErrorReduction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_sor_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_sor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_sor_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_sor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_erp_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_erp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_erp_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_erp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_erp2_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_erp2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_erp2_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_erp2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_globalCfm_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_globalCfm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_globalCfm_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_globalCfm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_splitImpulsePenetrationThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_splitImpulsePenetrationThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_splitImpulseTurnErp_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_splitImpulseTurnErp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_splitImpulseTurnErp_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_splitImpulseTurnErp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_linearSlop_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearSlop = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_linearSlop_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_linearSlop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_warmstartingFactor_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_warmstartingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_warmstartingFactor_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_warmstartingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_maxGyroscopicForce_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxGyroscopicForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_maxGyroscopicForce_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_maxGyroscopicForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_set(void * jarg1, float jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_singleAxisRollingFrictionThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_get(void * jarg1) {
  float jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  float result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (float) ((arg1)->m_singleAxisRollingFrictionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_numIterations_set(void * jarg1, int jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_numIterations_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (int) ((arg1)->m_numIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_solverMode_set(void * jarg1, int jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_solverMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_solverMode_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (int) ((arg1)->m_solverMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_set(void * jarg1, int jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_restingContactRestitutionThreshold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (int) ((arg1)->m_restingContactRestitutionThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_minimumSolverBatchSize_set(void * jarg1, int jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_minimumSolverBatchSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_minimumSolverBatchSize_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (int) ((arg1)->m_minimumSolverBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_splitImpulse_set(void * jarg1, int jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_splitImpulse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_splitImpulse_get(void * jarg1) {
  int jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  int result;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (int) ((arg1)->m_splitImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_padding_set(void * jarg1, char * jarg2) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  char *arg2 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btContactSolverInfoFloatData_m_padding_get(void * jarg1) {
  char * jresult ;
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btContactSolverInfoFloatData() {
  void * jresult ;
  btContactSolverInfoFloatData *result = 0 ;
  
  result = (btContactSolverInfoFloatData *)new btContactSolverInfoFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btContactSolverInfoFloatData(void * jarg1) {
  btContactSolverInfoFloatData *arg1 = (btContactSolverInfoFloatData *) 0 ;
  
  arg1 = (btContactSolverInfoFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDynamicsWorld(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDynamicsWorld_stepSimulation__SWIG_0(void * jarg1, float jarg2, int jarg3, float jarg4) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDynamicsWorld_stepSimulation__SWIG_1(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDynamicsWorld_stepSimulation__SWIG_2(void * jarg1, float jarg2) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->stepSimulation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_debugDrawWorld(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_addConstraint__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->addConstraint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_addConstraint__SWIG_1(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->addConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_removeConstraint(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->removeConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_addAction(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_removeAction(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_setGravity(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorld_getGravity(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btVector3 result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = ((btDynamicsWorld const *)arg1)->getGravity();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_synchronizeMotionStates(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  (arg1)->synchronizeMotionStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_addRigidBody__SWIG_0(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->addRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_addRigidBody__SWIG_1(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addRigidBody(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_removeRigidBody(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->removeRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_setConstraintSolver(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btConstraintSolver *)jarg2; 
  (arg1)->setConstraintSolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorld_getConstraintSolver(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDynamicsWorld_getNumConstraints(void * jarg1) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = (int)((btDynamicsWorld const *)arg1)->getNumConstraints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorld_getConstraint__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDynamicsWorld_getWorldType(void * jarg1) {
  int jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = (btDynamicsWorldType)((btDynamicsWorld const *)arg1)->getWorldType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_clearForces(void * jarg1) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  (arg1)->clearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_setInternalTickCallback__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  bool arg4 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btInternalTickCallback)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setInternalTickCallback(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_setInternalTickCallback__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btInternalTickCallback)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->setInternalTickCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_setInternalTickCallback__SWIG_2(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btInternalTickCallback arg2 = (btInternalTickCallback) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btInternalTickCallback)jarg2; 
  (arg1)->setInternalTickCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_setWorldUserInfo(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setWorldUserInfo(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorld_getWorldUserInfo(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  void *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = (void *)((btDynamicsWorld const *)arg1)->getWorldUserInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorld_getSolverInfo(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btContactSolverInfo *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = (btContactSolverInfo *) &(arg1)->getSolverInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_addVehicle(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_removeVehicle(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_addCharacter(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addCharacter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorld_removeCharacter(void * jarg1, void * jarg2) {
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeCharacter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorldDoubleData_m_solverInfo_set(void * jarg1, void * jarg2) {
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData *arg2 = (btContactSolverInfoDoubleData *) 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  arg2 = (btContactSolverInfoDoubleData *)jarg2; 
  if (arg1) (arg1)->m_solverInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorldDoubleData_m_solverInfo_get(void * jarg1) {
  void * jresult ;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btContactSolverInfoDoubleData *result = 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  result = (btContactSolverInfoDoubleData *)& ((arg1)->m_solverInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorldDoubleData_m_gravity_set(void * jarg1, void * jarg2) {
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorldDoubleData_m_gravity_get(void * jarg1) {
  void * jresult ;
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDynamicsWorldDoubleData() {
  void * jresult ;
  btDynamicsWorldDoubleData *result = 0 ;
  
  result = (btDynamicsWorldDoubleData *)new btDynamicsWorldDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDynamicsWorldDoubleData(void * jarg1) {
  btDynamicsWorldDoubleData *arg1 = (btDynamicsWorldDoubleData *) 0 ;
  
  arg1 = (btDynamicsWorldDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorldFloatData_m_solverInfo_set(void * jarg1, void * jarg2) {
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData *arg2 = (btContactSolverInfoFloatData *) 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  arg2 = (btContactSolverInfoFloatData *)jarg2; 
  if (arg1) (arg1)->m_solverInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorldFloatData_m_solverInfo_get(void * jarg1) {
  void * jresult ;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btContactSolverInfoFloatData *result = 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  result = (btContactSolverInfoFloatData *)& ((arg1)->m_solverInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDynamicsWorldFloatData_m_gravity_set(void * jarg1, void * jarg2) {
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDynamicsWorldFloatData_m_gravity_get(void * jarg1) {
  void * jresult ;
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDynamicsWorldFloatData() {
  void * jresult ;
  btDynamicsWorldFloatData *result = 0 ;
  
  result = (btDynamicsWorldFloatData *)new btDynamicsWorldFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDynamicsWorldFloatData(void * jarg1) {
  btDynamicsWorldFloatData *arg1 = (btDynamicsWorldFloatData *) 0 ;
  
  arg1 = (btDynamicsWorldFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDiscreteDynamicsWorld(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btDiscreteDynamicsWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btConstraintSolver *)jarg3; 
  arg4 = (btCollisionConfiguration *)jarg4; 
  result = (btDiscreteDynamicsWorld *)new btDiscreteDynamicsWorld(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDiscreteDynamicsWorld(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_stepSimulation__SWIG_0(void * jarg1, float jarg2, int jarg3, float jarg4) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_stepSimulation__SWIG_1(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_stepSimulation__SWIG_2(void * jarg1, float jarg2) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->stepSimulation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_synchronizeMotionStates(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->synchronizeMotionStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_synchronizeSingleMotionState(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->synchronizeSingleMotionState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addConstraint__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  bool arg3 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->addConstraint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addConstraint__SWIG_1(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->addConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeConstraint(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->removeConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addAction(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeAction(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeAction(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getSimulationIslandManager__SWIG_0(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSimulationIslandManager *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (btSimulationIslandManager *)(arg1)->getSimulationIslandManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getCollisionWorld(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionWorld *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (btCollisionWorld *)(arg1)->getCollisionWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setGravity(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getGravity(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btVector3 result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = ((btDiscreteDynamicsWorld const *)arg1)->getGravity();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCollisionObject__SWIG_0(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addCollisionObject(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCollisionObject__SWIG_1(void * jarg1, void * jarg2, short jarg3) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  short arg3 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->addCollisionObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCollisionObject__SWIG_2(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->addCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addRigidBody__SWIG_0(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->addRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addRigidBody__SWIG_1(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addRigidBody(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeRigidBody(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->removeRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeCollisionObject(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->removeCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_debugDrawConstraint(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->debugDrawConstraint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_debugDrawWorld(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setConstraintSolver(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btConstraintSolver *)jarg2; 
  (arg1)->setConstraintSolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getConstraintSolver(void * jarg1) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getNumConstraints(void * jarg1) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (int)((btDiscreteDynamicsWorld const *)arg1)->getNumConstraints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getConstraint__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTypedConstraint *)(arg1)->getConstraint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getWorldType(void * jarg1) {
  int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (btDynamicsWorldType)((btDiscreteDynamicsWorld const *)arg1)->getWorldType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_clearForces(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->clearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_applyGravity(void * jarg1) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  (arg1)->applyGravity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setNumTasks(void * jarg1, int jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  int arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setNumTasks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_updateVehicles(void * jarg1, float jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateVehicles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addVehicle(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeVehicle(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_addCharacter(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addCharacter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_removeCharacter(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeCharacter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(void * jarg1, unsigned int jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSynchronizeAllMotionStates(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(void * jarg1) {
  unsigned int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getSynchronizeAllMotionStates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(void * jarg1, unsigned int jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setApplySpeculativeContactRestitution(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(void * jarg1) {
  unsigned int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getApplySpeculativeContactRestitution();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_serialize(void * jarg1, void * jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  (arg1)->serialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation(void * jarg1, unsigned int jarg2) {
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool arg2 ;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLatencyMotionStateInterpolation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation(void * jarg1) {
  unsigned int jresult ;
  btDiscreteDynamicsWorld *arg1 = (btDiscreteDynamicsWorld *) 0 ;
  bool result;
  
  arg1 = (btDiscreteDynamicsWorld *)jarg1; 
  result = (bool)((btDiscreteDynamicsWorld const *)arg1)->getLatencyMotionStateInterpolation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSimpleDynamicsWorld(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDispatcher *arg1 = (btDispatcher *) 0 ;
  btBroadphaseInterface *arg2 = (btBroadphaseInterface *) 0 ;
  btConstraintSolver *arg3 = (btConstraintSolver *) 0 ;
  btCollisionConfiguration *arg4 = (btCollisionConfiguration *) 0 ;
  btSimpleDynamicsWorld *result = 0 ;
  
  arg1 = (btDispatcher *)jarg1; 
  arg2 = (btBroadphaseInterface *)jarg2; 
  arg3 = (btConstraintSolver *)jarg3; 
  arg4 = (btCollisionConfiguration *)jarg4; 
  result = (btSimpleDynamicsWorld *)new btSimpleDynamicsWorld(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSimpleDynamicsWorld(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleDynamicsWorld_stepSimulation__SWIG_0(void * jarg1, float jarg2, int jarg3, float jarg4) {
  int jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  btScalar arg4 ;
  int result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (int)(arg1)->stepSimulation(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleDynamicsWorld_stepSimulation__SWIG_1(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->stepSimulation(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleDynamicsWorld_stepSimulation__SWIG_2(void * jarg1, float jarg2) {
  int jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->stepSimulation(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_setGravity(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleDynamicsWorld_getGravity(void * jarg1) {
  void * jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btVector3 result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  result = ((btSimpleDynamicsWorld const *)arg1)->getGravity();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_addRigidBody__SWIG_0(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->addRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_addRigidBody__SWIG_1(void * jarg1, void * jarg2, short jarg3, short jarg4) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  short arg3 ;
  short arg4 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (short)jarg3; 
  arg4 = (short)jarg4; 
  (arg1)->addRigidBody(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_removeRigidBody(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  (arg1)->removeRigidBody(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_debugDrawWorld(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->debugDrawWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_addAction(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_removeAction(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btActionInterface *arg2 = (btActionInterface *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btActionInterface *)jarg2; 
  (arg1)->removeAction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_removeCollisionObject(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btCollisionObject *)jarg2; 
  (arg1)->removeCollisionObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_updateAabbs(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->updateAabbs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_synchronizeMotionStates(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->synchronizeMotionStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_setConstraintSolver(void * jarg1, void * jarg2) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *arg2 = (btConstraintSolver *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  arg2 = (btConstraintSolver *)jarg2; 
  (arg1)->setConstraintSolver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSimpleDynamicsWorld_getConstraintSolver(void * jarg1) {
  void * jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btConstraintSolver *result = 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  result = (btConstraintSolver *)(arg1)->getConstraintSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSimpleDynamicsWorld_getWorldType(void * jarg1) {
  int jresult ;
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  btDynamicsWorldType result;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  result = (btDynamicsWorldType)((btSimpleDynamicsWorld const *)arg1)->getWorldType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSimpleDynamicsWorld_clearForces(void * jarg1) {
  btSimpleDynamicsWorld *arg1 = (btSimpleDynamicsWorld *) 0 ;
  
  arg1 = (btSimpleDynamicsWorld *)jarg1; 
  (arg1)->clearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_gDeactivationTime_set(float jarg1) {
  btScalar arg1 ;
  
  arg1 = (btScalar)jarg1; 
  gDeactivationTime = arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_gDeactivationTime_get() {
  float jresult ;
  btScalar result;
  
  result = (btScalar)gDeactivationTime;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gDisableDeactivation_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  gDisableDeactivation = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gDisableDeactivation_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)gDisableDeactivation;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btRigidBodyDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btRigidBodyFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_mass_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_mass_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_motionState_set(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  if (arg1) (arg1)->m_motionState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_motionState_get(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btMotionState *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btMotionState *) ((arg1)->m_motionState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_startWorldTransform_set(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_startWorldTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_startWorldTransform_get(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btTransform *)& ((arg1)->m_startWorldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_collisionShape_set(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btCollisionShape *arg2 = (btCollisionShape *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btCollisionShape *)jarg2; 
  if (arg1) (arg1)->m_collisionShape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_collisionShape_get(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btCollisionShape *) ((arg1)->m_collisionShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_localInertia_set(void * jarg1, void * jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_localInertia = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_localInertia_get(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_localInertia);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_linearDamping_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_linearDamping_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_angularDamping_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_angularDamping_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_friction_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_friction_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_rollingFriction_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rollingFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_rollingFriction_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_rollingFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_restitution_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_restitution_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_linearSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_linearSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_angularSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_angularSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalDamping_set(void * jarg1, unsigned int jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalDamping_get(void * jarg1) {
  unsigned int jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  bool result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (bool) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody_btRigidBodyConstructionInfo__SWIG_0(float jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBody::btRigidBodyConstructionInfo *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btRigidBody::btRigidBodyConstructionInfo *)new btRigidBody::btRigidBodyConstructionInfo(arg1,arg2,arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody_btRigidBodyConstructionInfo__SWIG_1(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBody::btRigidBodyConstructionInfo *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  result = (btRigidBody::btRigidBodyConstructionInfo *)new btRigidBody::btRigidBodyConstructionInfo(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBody_btRigidBodyConstructionInfo(void * jarg1) {
  btRigidBody::btRigidBodyConstructionInfo *arg1 = (btRigidBody::btRigidBodyConstructionInfo *) 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBody::btRigidBodyConstructionInfo *arg1 = 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btRigidBody::btRigidBodyConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody::btRigidBodyConstructionInfo const & type is null", 0);
    return 0;
  } 
  result = (btRigidBody *)new btRigidBody((btRigidBody::btRigidBodyConstructionInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody__SWIG_1(float jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btVector3 *arg4 = 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBody__SWIG_2(float jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btScalar arg1 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  arg3 = (btCollisionShape *)jarg3; 
  result = (btRigidBody *)new btRigidBody(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBody(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_proceedToTransform(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->proceedToTransform((btTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_upcast__SWIG_0(void * jarg1) {
  void * jresult ;
  btCollisionObject *arg1 = (btCollisionObject *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btCollisionObject *)jarg1; 
  result = (btRigidBody *)btRigidBody::upcast((btCollisionObject const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_predictIntegratedTransform(void * jarg1, float jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform & type is null", 0);
    return ;
  } 
  (arg1)->predictIntegratedTransform(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_saveKinematicState(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->saveKinematicState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyGravity(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  (arg1)->applyGravity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setGravity(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getGravity(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getGravity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setDamping(void * jarg1, float jarg2, float jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setDamping(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getLinearDamping(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getLinearDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getAngularDamping(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getAngularDamping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getLinearSleepingThreshold(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getLinearSleepingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getAngularSleepingThreshold(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getAngularSleepingThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyDamping(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->applyDamping(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getCollisionShape__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btCollisionShape *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btCollisionShape *)((btRigidBody const *)arg1)->getCollisionShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setMassProps(void * jarg1, float jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setMassProps(arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getLinearFactor(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearFactor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setLinearFactor(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearFactor((btVector3 const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_getInvMass(void * jarg1) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btScalar)((btRigidBody const *)arg1)->getInvMass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getInvInertiaTensorWorld(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMatrix3x3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btMatrix3x3 *) &((btRigidBody const *)arg1)->getInvInertiaTensorWorld();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_integrateVelocities(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->integrateVelocities(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setCenterOfMassTransform(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setCenterOfMassTransform((btTransform const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyCentralForce(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyCentralForce((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getTotalForce(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalForce();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getTotalTorque(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getTotalTorque();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getInvInertiaDiagLocal(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getInvInertiaDiagLocal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setInvInertiaDiagLocal(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setInvInertiaDiagLocal((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setSleepingThresholds(void * jarg1, float jarg2, float jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setSleepingThresholds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyTorque(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyTorque((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyForce(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyForce((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyCentralImpulse(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyCentralImpulse((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyTorqueImpulse(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyTorqueImpulse((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_applyImpulse(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_clearForces(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  (arg1)->clearForces();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_updateInertiaTensor(void * jarg1) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  (arg1)->updateInertiaTensor();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getCenterOfMassPosition(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getCenterOfMassPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getOrientation(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btQuaternion result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = ((btRigidBody const *)arg1)->getOrientation();
  jresult = new btQuaternion((const btQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getCenterOfMassTransform(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btTransform *) &((btRigidBody const *)arg1)->getCenterOfMassTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getLinearVelocity(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getLinearVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getAngularVelocity(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setLinearVelocity(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setAngularVelocity(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularVelocity((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getVelocityInLocalPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = ((btRigidBody const *)arg1)->getVelocityInLocalPoint((btVector3 const &)*arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_translate(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->translate((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_getAabb(void * jarg1, void * jarg2, void * jarg3) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btRigidBody const *)arg1)->getAabb(*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_computeImpulseDenominator(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btRigidBody const *)arg1)->computeImpulseDenominator((btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBody_computeAngularImpulseDenominator(void * jarg1, void * jarg2) {
  float jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)((btRigidBody const *)arg1)->computeAngularImpulseDenominator((btVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_updateDeactivation(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateDeactivation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRigidBody_wantsSleeping(void * jarg1) {
  unsigned int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (bool)(arg1)->wantsSleeping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getBroadphaseProxy__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btBroadphaseProxy *)((btRigidBody const *)arg1)->getBroadphaseProxy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setNewBroadphaseProxy(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btBroadphaseProxy *arg2 = (btBroadphaseProxy *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btBroadphaseProxy *)jarg2; 
  (arg1)->setNewBroadphaseProxy(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getMotionState__SWIG_0(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btMotionState *)(arg1)->getMotionState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setMotionState(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btMotionState *arg2 = (btMotionState *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btMotionState *)jarg2; 
  (arg1)->setMotionState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_m_contactSolverType_set(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_contactSolverType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_m_contactSolverType_get(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int) ((arg1)->m_contactSolverType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_m_frictionSolverType_set(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_frictionSolverType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_m_frictionSolverType_get(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int) ((arg1)->m_frictionSolverType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setAngularFactor__SWIG_0(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularFactor((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setAngularFactor__SWIG_1(void * jarg1, float jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setAngularFactor(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getAngularFactor(void * jarg1) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (btVector3 *) &((btRigidBody const *)arg1)->getAngularFactor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRigidBody_isInWorld(void * jarg1) {
  unsigned int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  bool result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (bool)((btRigidBody const *)arg1)->isInWorld();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_addConstraintRef(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->addConstraintRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_removeConstraintRef(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btTypedConstraint *arg2 = (btTypedConstraint *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btTypedConstraint *)jarg2; 
  (arg1)->removeConstraintRef(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_getConstraintRef(void * jarg1, int jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  btTypedConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTypedConstraint *)(arg1)->getConstraintRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_getNumConstraintRefs(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int)((btRigidBody const *)arg1)->getNumConstraintRefs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_setFlags(void * jarg1, int jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFlags(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_getFlags(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int)((btRigidBody const *)arg1)->getFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBody_computeGyroscopicForce(void * jarg1, float jarg2) {
  void * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btScalar arg2 ;
  btVector3 result;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = ((btRigidBody const *)arg1)->computeGyroscopicForce(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBody_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  int result;
  
  arg1 = (btRigidBody *)jarg1; 
  result = (int)((btRigidBody const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btRigidBody_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btRigidBody const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBody_serializeSingleObject(void * jarg1, void * jarg2) {
  btRigidBody *arg1 = (btRigidBody *) 0 ;
  btSerializer *arg2 = (btSerializer *) 0 ;
  
  arg1 = (btRigidBody *)jarg1; 
  arg2 = (btSerializer *)jarg2; 
  ((btRigidBody const *)arg1)->serializeSingleObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_collisionObjectData_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *arg2 = (btCollisionObjectFloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btCollisionObjectFloatData *)jarg2; 
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_collisionObjectData_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btCollisionObjectFloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btCollisionObjectFloatData *)& ((arg1)->m_collisionObjectData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaTensorWorld_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData *arg2 = (btMatrix3x3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btMatrix3x3FloatData *)jarg2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaTensorWorld_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btMatrix3x3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btMatrix3x3FloatData *)& ((arg1)->m_invInertiaTensorWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_linearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_linearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_angularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_angularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_angularFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_angularFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_linearFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_linearFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_acceleration_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_gravity_acceleration_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_gravity_acceleration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaLocal_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_invInertiaLocal_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_invInertiaLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalForce_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_totalForce = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalForce_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_totalForce);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalTorque_set(void * jarg1, void * jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_totalTorque = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyFloatData_m_totalTorque_get(void * jarg1) {
  void * jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_totalTorque);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_inverseMass_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_inverseMass_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_inverseMass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearDamping_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearDamping_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularDamping_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularDamping_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingFactor_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalAngularDampingFactor_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_linearSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularSleepingThreshold_set(void * jarg1, float jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRigidBodyFloatData_m_angularSleepingThreshold_get(void * jarg1) {
  float jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  float result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (float) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDamping_set(void * jarg1, int jarg2) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBodyFloatData_m_additionalDamping_get(void * jarg1) {
  int jresult ;
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  int result;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBodyFloatData() {
  void * jresult ;
  btRigidBodyFloatData *result = 0 ;
  
  result = (btRigidBodyFloatData *)new btRigidBodyFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBodyFloatData(void * jarg1) {
  btRigidBodyFloatData *arg1 = (btRigidBodyFloatData *) 0 ;
  
  arg1 = (btRigidBodyFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_collisionObjectData_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *arg2 = (btCollisionObjectDoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btCollisionObjectDoubleData *)jarg2; 
  if (arg1) (arg1)->m_collisionObjectData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_collisionObjectData_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btCollisionObjectDoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btCollisionObjectDoubleData *)& ((arg1)->m_collisionObjectData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaTensorWorld_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData *arg2 = (btMatrix3x3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btMatrix3x3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_invInertiaTensorWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaTensorWorld_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btMatrix3x3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btMatrix3x3DoubleData *)& ((arg1)->m_invInertiaTensorWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_linearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_linearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularVelocity_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_angularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularVelocity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_angularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_angularFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_angularFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearFactor_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_linearFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearFactor_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_linearFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_acceleration_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_gravity_acceleration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_gravity_acceleration_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_gravity_acceleration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaLocal_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_invInertiaLocal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_invInertiaLocal_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_invInertiaLocal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalForce_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_totalForce = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalForce_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_totalForce);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalTorque_set(void * jarg1, void * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_totalTorque = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_totalTorque_get(void * jarg1) {
  void * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_totalTorque);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_inverseMass_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_inverseMass = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_inverseMass_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_inverseMass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearDamping_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearDamping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearDamping_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularDamping_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularDamping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularDamping_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDampingFactor_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalDampingFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDampingFactor_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalLinearDampingThresholdSqr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalLinearDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingThresholdSqr = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingThresholdSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingFactor_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_additionalAngularDampingFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalAngularDampingFactor_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_additionalAngularDampingFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearSleepingThreshold_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearSleepingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_linearSleepingThreshold_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularSleepingThreshold_set(void * jarg1, double jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularSleepingThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_angularSleepingThreshold_get(void * jarg1) {
  double jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  double result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularSleepingThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDamping_set(void * jarg1, int jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_additionalDamping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_additionalDamping_get(void * jarg1) {
  int jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  int result;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (int) ((arg1)->m_additionalDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_padding_set(void * jarg1, char * jarg2) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btRigidBodyDoubleData_m_padding_get(void * jarg1) {
  char * jresult ;
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRigidBodyDoubleData() {
  void * jresult ;
  btRigidBodyDoubleData *result = 0 ;
  
  result = (btRigidBodyDoubleData *)new btRigidBodyDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRigidBodyDoubleData(void * jarg1) {
  btRigidBodyDoubleData *arg1 = (btRigidBodyDoubleData *) 0 ;
  
  arg1 = (btRigidBodyDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btJacobianEntry__SWIG_0() {
  void * jresult ;
  btJacobianEntry *result = 0 ;
  
  result = (btJacobianEntry *)new btJacobianEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btJacobianEntry__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7, void * jarg8, float jarg9) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btVector3 *arg8 = 0 ;
  btScalar arg9 ;
  btJacobianEntry *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (btScalar)jarg7; 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg9 = (btScalar)jarg9; 
  result = (btJacobianEntry *)new btJacobianEntry((btMatrix3x3 const &)*arg1,(btMatrix3x3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7,(btVector3 const &)*arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btJacobianEntry__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btMatrix3x3 *arg2 = 0 ;
  btMatrix3x3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btJacobianEntry *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btMatrix3x3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btMatrix3x3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btJacobianEntry *)new btJacobianEntry((btVector3 const &)*arg1,(btMatrix3x3 const &)*arg2,(btMatrix3x3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btJacobianEntry__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btVector3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btJacobianEntry *result = 0 ;
  
  arg1 = (btVector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btJacobianEntry *)new btJacobianEntry((btVector3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btJacobianEntry__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, float jarg6) {
  void * jresult ;
  btMatrix3x3 *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar arg6 ;
  btJacobianEntry *result = 0 ;
  
  arg1 = (btMatrix3x3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btScalar)jarg6; 
  result = (btJacobianEntry *)new btJacobianEntry((btMatrix3x3 const &)*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btJacobianEntry_getDiagonal(void * jarg1) {
  float jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar result;
  
  arg1 = (btJacobianEntry *)jarg1; 
  result = (btScalar)((btJacobianEntry const *)arg1)->getDiagonal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btJacobianEntry_getNonDiagonal__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btJacobianEntry *arg2 = 0 ;
  btScalar arg3 ;
  btScalar result;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btJacobianEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btJacobianEntry const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  result = (btScalar)((btJacobianEntry const *)arg1)->getNonDiagonal((btJacobianEntry const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btJacobianEntry_getNonDiagonal__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  float jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btJacobianEntry *arg2 = 0 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar result;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btJacobianEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btJacobianEntry const & type is null", 0);
    return 0;
  } 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  result = (btScalar)((btJacobianEntry const *)arg1)->getNonDiagonal((btJacobianEntry const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btJacobianEntry_getRelativeVelocity(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  float jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btScalar result;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)(arg1)->getRelativeVelocity((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJacobianEntry_m_linearJointAxis_set(void * jarg1, void * jarg2) {
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_linearJointAxis = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJacobianEntry_m_linearJointAxis_get(void * jarg1) {
  void * jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_linearJointAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJacobianEntry_m_aJ_set(void * jarg1, void * jarg2) {
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_aJ = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJacobianEntry_m_aJ_get(void * jarg1) {
  void * jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_aJ);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJacobianEntry_m_bJ_set(void * jarg1, void * jarg2) {
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_bJ = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJacobianEntry_m_bJ_get(void * jarg1) {
  void * jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_bJ);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJacobianEntry_m_0MinvJt_set(void * jarg1, void * jarg2) {
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_0MinvJt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJacobianEntry_m_0MinvJt_get(void * jarg1) {
  void * jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_0MinvJt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJacobianEntry_m_1MinvJt_set(void * jarg1, void * jarg2) {
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_1MinvJt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJacobianEntry_m_1MinvJt_get(void * jarg1) {
  void * jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_1MinvJt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJacobianEntry_m_Adiag_set(void * jarg1, float jarg2) {
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_Adiag = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btJacobianEntry_m_Adiag_get(void * jarg1) {
  float jresult ;
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  btScalar result;
  
  arg1 = (btJacobianEntry *)jarg1; 
  result = (btScalar) ((arg1)->m_Adiag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btJacobianEntry(void * jarg1) {
  btJacobianEntry *arg1 = (btJacobianEntry *) 0 ;
  
  arg1 = (btJacobianEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_worldTransform_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_worldTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_worldTransform_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btTransform *)& ((arg1)->m_worldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_deltaLinearVelocity_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_deltaLinearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_deltaLinearVelocity_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_deltaLinearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_deltaAngularVelocity_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_deltaAngularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_deltaAngularVelocity_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_deltaAngularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_angularFactor_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_angularFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_angularFactor_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_angularFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_linearFactor_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_linearFactor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_linearFactor_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_linearFactor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_invMass_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_invMass = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_invMass_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_invMass);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_pushVelocity_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_pushVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_pushVelocity_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_pushVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_turnVelocity_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_turnVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_turnVelocity_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_turnVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_linearVelocity_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_linearVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_linearVelocity_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_linearVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_angularVelocity_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_angularVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_angularVelocity_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_angularVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_externalForceImpulse_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_externalForceImpulse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_externalForceImpulse_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_externalForceImpulse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_externalTorqueImpulse_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_externalTorqueImpulse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_externalTorqueImpulse_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_externalTorqueImpulse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_m_originalBody_set(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btRigidBody *)jarg2; 
  if (arg1) (arg1)->m_originalBody = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_m_originalBody_get(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btRigidBody *) ((arg1)->m_originalBody);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_setWorldTransform(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *arg2 = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setWorldTransform((btTransform const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_getWorldTransform(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btTransform *) &((btSolverBody const *)arg1)->getWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_getVelocityInLocalPointNoDelta(void * jarg1, void * jarg2, void * jarg3) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSolverBody const *)arg1)->getVelocityInLocalPointNoDelta((btVector3 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_getVelocityInLocalPointObsolete(void * jarg1, void * jarg2, void * jarg3) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSolverBody const *)arg1)->getVelocityInLocalPointObsolete((btVector3 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_getAngularVelocity(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSolverBody const *)arg1)->getAngularVelocity(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_applyImpulse(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->applyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_internalApplyPushImpulse(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->internalApplyPushImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_getDeltaLinearVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &((btSolverBody const *)arg1)->getDeltaLinearVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_getDeltaAngularVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &((btSolverBody const *)arg1)->getDeltaAngularVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_getPushVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &((btSolverBody const *)arg1)->getPushVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_getTurnVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &((btSolverBody const *)arg1)->getTurnVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_internalGetDeltaLinearVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &(arg1)->internalGetDeltaLinearVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_internalGetDeltaAngularVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &(arg1)->internalGetDeltaAngularVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_internalGetAngularFactor(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &((btSolverBody const *)arg1)->internalGetAngularFactor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_internalGetInvMass(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &((btSolverBody const *)arg1)->internalGetInvMass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_internalSetInvMass(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->internalSetInvMass((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_internalGetPushVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &(arg1)->internalGetPushVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverBody_internalGetTurnVelocity(void * jarg1) {
  void * jresult ;
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  result = (btVector3 *) &(arg1)->internalGetTurnVelocity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_internalGetVelocityInLocalPointObsolete(void * jarg1, void * jarg2, void * jarg3) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSolverBody const *)arg1)->internalGetVelocityInLocalPointObsolete((btVector3 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_internalGetAngularVelocity(void * jarg1, void * jarg2) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  ((btSolverBody const *)arg1)->internalGetAngularVelocity(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_internalApplyImpulse(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->internalApplyImpulse((btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_writebackVelocity(void * jarg1) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  (arg1)->writebackVelocity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverBody_writebackVelocityAndTransform(void * jarg1, float jarg2, float jarg3) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSolverBody *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->writebackVelocityAndTransform(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSolverBody() {
  void * jresult ;
  btSolverBody *result = 0 ;
  
  result = (btSolverBody *)new btSolverBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSolverBody(void * jarg1) {
  btSolverBody *arg1 = (btSolverBody *) 0 ;
  
  arg1 = (btSolverBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_relpos1CrossNormal_set(void * jarg1, void * jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_relpos1CrossNormal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverConstraint_m_relpos1CrossNormal_get(void * jarg1) {
  void * jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_relpos1CrossNormal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_contactNormal1_set(void * jarg1, void * jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_contactNormal1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverConstraint_m_contactNormal1_get(void * jarg1) {
  void * jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_contactNormal1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_relpos2CrossNormal_set(void * jarg1, void * jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_relpos2CrossNormal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverConstraint_m_relpos2CrossNormal_get(void * jarg1) {
  void * jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_relpos2CrossNormal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_contactNormal2_set(void * jarg1, void * jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_contactNormal2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverConstraint_m_contactNormal2_get(void * jarg1) {
  void * jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_contactNormal2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_angularComponentA_set(void * jarg1, void * jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_angularComponentA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverConstraint_m_angularComponentA_get(void * jarg1) {
  void * jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_angularComponentA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_angularComponentB_set(void * jarg1, void * jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_angularComponentB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverConstraint_m_angularComponentB_get(void * jarg1) {
  void * jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_angularComponentB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_appliedPushImpulse_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedPushImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_appliedPushImpulse_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedPushImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_appliedImpulse_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_appliedImpulse_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_appliedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_friction_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_friction_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_jacDiagABInv_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_jacDiagABInv = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_jacDiagABInv_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_jacDiagABInv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_rhs_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rhs = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_rhs_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_rhs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_cfm_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_cfm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_cfm_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_cfm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_lowerLimit_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_lowerLimit_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_upperLimit_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_upperLimit_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_rhsPenetration_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rhsPenetration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_rhsPenetration_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_rhsPenetration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_originalContactPoint_set(void * jarg1, void * jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_originalContactPoint = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSolverConstraint_m_originalContactPoint_get(void * jarg1) {
  void * jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  void *result = 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (void *) ((arg1)->m_originalContactPoint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_unusedPadding4_set(void * jarg1, float jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_unusedPadding4 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSolverConstraint_m_unusedPadding4_get(void * jarg1) {
  float jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (btScalar) ((arg1)->m_unusedPadding4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_numRowsForNonContactConstraint_set(void * jarg1, int jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numRowsForNonContactConstraint = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSolverConstraint_m_numRowsForNonContactConstraint_get(void * jarg1) {
  int jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (int) ((arg1)->m_numRowsForNonContactConstraint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_overrideNumSolverIterations_set(void * jarg1, int jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSolverConstraint_m_overrideNumSolverIterations_get(void * jarg1) {
  int jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_frictionIndex_set(void * jarg1, int jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_frictionIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSolverConstraint_m_frictionIndex_get(void * jarg1) {
  int jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (int) ((arg1)->m_frictionIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_solverBodyIdA_set(void * jarg1, int jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_solverBodyIdA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSolverConstraint_m_solverBodyIdA_get(void * jarg1) {
  int jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (int) ((arg1)->m_solverBodyIdA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSolverConstraint_m_solverBodyIdB_set(void * jarg1, int jarg2) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_solverBodyIdB = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSolverConstraint_m_solverBodyIdB_get(void * jarg1) {
  int jresult ;
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  int result;
  
  arg1 = (btSolverConstraint *)jarg1; 
  result = (int) ((arg1)->m_solverBodyIdB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSolverConstraint() {
  void * jresult ;
  btSolverConstraint *result = 0 ;
  
  result = (btSolverConstraint *)new btSolverConstraint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSolverConstraint(void * jarg1) {
  btSolverConstraint *arg1 = (btSolverConstraint *) 0 ;
  
  arg1 = (btSolverConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTypedConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btTypedConstraintFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJointFeedback_m_appliedForceBodyA_set(void * jarg1, void * jarg2) {
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_appliedForceBodyA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJointFeedback_m_appliedForceBodyA_get(void * jarg1) {
  void * jresult ;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_appliedForceBodyA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJointFeedback_m_appliedTorqueBodyA_set(void * jarg1, void * jarg2) {
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_appliedTorqueBodyA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJointFeedback_m_appliedTorqueBodyA_get(void * jarg1) {
  void * jresult ;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_appliedTorqueBodyA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJointFeedback_m_appliedForceBodyB_set(void * jarg1, void * jarg2) {
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_appliedForceBodyB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJointFeedback_m_appliedForceBodyB_get(void * jarg1) {
  void * jresult ;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_appliedForceBodyB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btJointFeedback_m_appliedTorqueBodyB_set(void * jarg1, void * jarg2) {
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_appliedTorqueBodyB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btJointFeedback_m_appliedTorqueBodyB_get(void * jarg1) {
  void * jresult ;
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_appliedTorqueBodyB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btJointFeedback() {
  void * jresult ;
  btJointFeedback *result = 0 ;
  
  result = (btJointFeedback *)new btJointFeedback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btJointFeedback(void * jarg1) {
  btJointFeedback *arg1 = (btJointFeedback *) 0 ;
  
  arg1 = (btJointFeedback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedConstraint(void * jarg1) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo1_m_numConstraintRows_set(void * jarg1, int jarg2) {
  btTypedConstraint::btConstraintInfo1 *arg1 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo1 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numConstraintRows = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo1_m_numConstraintRows_get(void * jarg1) {
  int jresult ;
  btTypedConstraint::btConstraintInfo1 *arg1 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint::btConstraintInfo1 *)jarg1; 
  result = (int) ((arg1)->m_numConstraintRows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo1_nub_set(void * jarg1, int jarg2) {
  btTypedConstraint::btConstraintInfo1 *arg1 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo1 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nub = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo1_nub_get(void * jarg1) {
  int jresult ;
  btTypedConstraint::btConstraintInfo1 *arg1 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint::btConstraintInfo1 *)jarg1; 
  result = (int) ((arg1)->nub);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTypedConstraint_btConstraintInfo1() {
  void * jresult ;
  btTypedConstraint::btConstraintInfo1 *result = 0 ;
  
  result = (btTypedConstraint::btConstraintInfo1 *)new btTypedConstraint::btConstraintInfo1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedConstraint_btConstraintInfo1(void * jarg1) {
  btTypedConstraint::btConstraintInfo1 *arg1 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo1 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_getFixedBody() {
  void * jresult ;
  btRigidBody *result = 0 ;
  
  result = (btRigidBody *) &btTypedConstraint::getFixedBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_fps_set(void * jarg1, float jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->fps = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_fps_get(void * jarg1) {
  float jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar result;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar) ((arg1)->fps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_erp_set(void * jarg1, float jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->erp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_erp_get(void * jarg1) {
  float jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar result;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar) ((arg1)->erp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J1linearAxis_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J1linearAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J1linearAxis_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J1linearAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J1angularAxis_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J1angularAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J1angularAxis_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J1angularAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J2linearAxis_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J2linearAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J2linearAxis_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J2linearAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J2angularAxis_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_J2angularAxis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_J2angularAxis_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_J2angularAxis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_rowskip_set(void * jarg1, int jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rowskip = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_rowskip_get(void * jarg1) {
  int jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (int) ((arg1)->rowskip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_constraintError_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_constraintError = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_constraintError_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_constraintError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_cfm_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->cfm = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_cfm_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->cfm);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_lowerLimit_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_lowerLimit_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_lowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_upperLimit_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *arg2 = (btScalar *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar *)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_upperLimit_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar *) ((arg1)->m_upperLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_findex_set(void * jarg1, void * jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (int *)jarg2; 
  if (arg1) (arg1)->findex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_findex_get(void * jarg1) {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int *result = 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (int *) ((arg1)->findex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_numIterations_set(void * jarg1, int jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_numIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_numIterations_get(void * jarg1) {
  int jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (int) ((arg1)->m_numIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_damping_set(void * jarg1, float jarg2) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_btConstraintInfo2_m_damping_get(void * jarg1) {
  float jresult ;
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btScalar result;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTypedConstraint_btConstraintInfo2() {
  void * jresult ;
  btTypedConstraint::btConstraintInfo2 *result = 0 ;
  
  result = (btTypedConstraint::btConstraintInfo2 *)new btTypedConstraint::btConstraintInfo2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedConstraint_btConstraintInfo2(void * jarg1) {
  btTypedConstraint::btConstraintInfo2 *arg1 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btTypedConstraint::btConstraintInfo2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_getOverrideNumSolverIterations(void * jarg1) {
  int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (int)((btTypedConstraint const *)arg1)->getOverrideNumSolverIterations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setOverrideNumSolverIterations(void * jarg1, int jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setOverrideNumSolverIterations(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_buildJacobian(void * jarg1) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setupSolverConstraint(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btConstraintArray *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  btScalar arg5 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btConstraintArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btConstraintArray & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (btScalar)jarg5; 
  (arg1)->setupSolverConstraint(*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_getInfo1(void * jarg1, void * jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_getInfo2(void * jarg1, void * jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_internalSetAppliedImpulse(void * jarg1, float jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->internalSetAppliedImpulse(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_internalGetAppliedImpulse(void * jarg1) {
  float jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btScalar)(arg1)->internalGetAppliedImpulse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_getBreakingImpulseThreshold(void * jarg1) {
  float jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btScalar)((btTypedConstraint const *)arg1)->getBreakingImpulseThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setBreakingImpulseThreshold(void * jarg1, float jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setBreakingImpulseThreshold(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTypedConstraint_isEnabled(void * jarg1) {
  unsigned int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (bool)((btTypedConstraint const *)arg1)->isEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setEnabled(void * jarg1, unsigned int jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_solveConstraintObsolete(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btSolverBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSolverBody & type is null", 0);
    return ;
  } 
  arg3 = (btSolverBody *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSolverBody & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->solveConstraintObsolete(*arg2,*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_getRigidBodyA__SWIG_0(void * jarg1) {
  void * jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btRigidBody *) &((btTypedConstraint const *)arg1)->getRigidBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_getRigidBodyB__SWIG_0(void * jarg1) {
  void * jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btRigidBody *) &((btTypedConstraint const *)arg1)->getRigidBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_getUserConstraintType(void * jarg1) {
  int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (int)((btTypedConstraint const *)arg1)->getUserConstraintType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setUserConstraintType(void * jarg1, int jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUserConstraintType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setUserConstraintId(void * jarg1, int jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUserConstraintId(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_getUserConstraintId(void * jarg1) {
  int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (int)((btTypedConstraint const *)arg1)->getUserConstraintId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setUserConstraintPtr(void * jarg1, void * jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setUserConstraintPtr(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_getUserConstraintPtr(void * jarg1) {
  void * jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *result = 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (void *)(arg1)->getUserConstraintPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setJointFeedback(void * jarg1, void * jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *arg2 = (btJointFeedback *) 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btJointFeedback *)jarg2; 
  (arg1)->setJointFeedback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraint_getJointFeedback__SWIG_0(void * jarg1) {
  void * jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btJointFeedback *result = 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btJointFeedback *)((btTypedConstraint const *)arg1)->getJointFeedback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_getUid(void * jarg1) {
  int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (int)((btTypedConstraint const *)arg1)->getUid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTypedConstraint_needsFeedback(void * jarg1) {
  unsigned int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (bool)((btTypedConstraint const *)arg1)->needsFeedback();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_enableFeedback(void * jarg1, unsigned int jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableFeedback(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_getAppliedImpulse(void * jarg1) {
  float jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btScalar)((btTypedConstraint const *)arg1)->getAppliedImpulse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_getConstraintType(void * jarg1) {
  int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btTypedConstraintType result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btTypedConstraintType)((btTypedConstraint const *)arg1)->getConstraintType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setDbgDrawSize(void * jarg1, float jarg2) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDbgDrawSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_getDbgDrawSize(void * jarg1) {
  float jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDbgDrawSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btTypedConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btTypedConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  int result;
  
  arg1 = (btTypedConstraint *)jarg1; 
  result = (int)((btTypedConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTypedConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btTypedConstraint *arg1 = (btTypedConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTypedConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btTypedConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAdjustAngleToLimits(float jarg1, float jarg2, float jarg3) {
  float jresult ;
  btScalar arg1 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar result;
  
  arg1 = (btScalar)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (btScalar)btAdjustAngleToLimits(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_rbA_set(void * jarg1, void * jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (btRigidBodyFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_rbA_get(void * jarg1) {
  void * jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (btRigidBodyFloatData *) ((arg1)->m_rbA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_rbB_set(void * jarg1, void * jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (btRigidBodyFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_rbB_get(void * jarg1) {
  void * jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (btRigidBodyFloatData *) ((arg1)->m_rbB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_name_set(void * jarg1, char * jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_name_get(void * jarg1) {
  char * jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_objectType_set(void * jarg1, int jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_objectType_get(void * jarg1) {
  int jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_userConstraintType_set(void * jarg1, int jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_userConstraintType_get(void * jarg1) {
  int jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_userConstraintType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_userConstraintId_set(void * jarg1, int jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_userConstraintId_get(void * jarg1) {
  int jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_userConstraintId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_needsFeedback_set(void * jarg1, int jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_needsFeedback = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_needsFeedback_get(void * jarg1) {
  int jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_needsFeedback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_appliedImpulse_set(void * jarg1, float jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_appliedImpulse_get(void * jarg1) {
  float jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_appliedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_dbgDrawSize_set(void * jarg1, float jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_dbgDrawSize_get(void * jarg1) {
  float jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_dbgDrawSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_set(void * jarg1, int jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_get(void * jarg1) {
  int jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_overrideNumSolverIterations_set(void * jarg1, int jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_overrideNumSolverIterations_get(void * jarg1) {
  int jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_breakingImpulseThreshold_set(void * jarg1, float jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_breakingImpulseThreshold_get(void * jarg1) {
  float jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_breakingImpulseThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_isEnabled_set(void * jarg1, int jarg2) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_isEnabled = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintFloatData_m_isEnabled_get(void * jarg1) {
  int jresult ;
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_isEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTypedConstraintFloatData() {
  void * jresult ;
  btTypedConstraintFloatData *result = 0 ;
  
  result = (btTypedConstraintFloatData *)new btTypedConstraintFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedConstraintFloatData(void * jarg1) {
  btTypedConstraintFloatData *arg1 = (btTypedConstraintFloatData *) 0 ;
  
  arg1 = (btTypedConstraintFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_rbA_set(void * jarg1, void * jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (btRigidBodyFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraintData_m_rbA_get(void * jarg1) {
  void * jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (btRigidBodyFloatData *) ((arg1)->m_rbA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_rbB_set(void * jarg1, void * jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *arg2 = (btRigidBodyFloatData *) 0 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (btRigidBodyFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraintData_m_rbB_get(void * jarg1) {
  void * jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  btRigidBodyFloatData *result = 0 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (btRigidBodyFloatData *) ((arg1)->m_rbB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_name_set(void * jarg1, char * jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTypedConstraintData_m_name_get(void * jarg1) {
  char * jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_objectType_set(void * jarg1, int jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintData_m_objectType_get(void * jarg1) {
  int jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_userConstraintType_set(void * jarg1, int jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintData_m_userConstraintType_get(void * jarg1) {
  int jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (int) ((arg1)->m_userConstraintType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_userConstraintId_set(void * jarg1, int jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintData_m_userConstraintId_get(void * jarg1) {
  int jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (int) ((arg1)->m_userConstraintId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_needsFeedback_set(void * jarg1, int jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_needsFeedback = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintData_m_needsFeedback_get(void * jarg1) {
  int jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (int) ((arg1)->m_needsFeedback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_appliedImpulse_set(void * jarg1, float jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraintData_m_appliedImpulse_get(void * jarg1) {
  float jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (float) ((arg1)->m_appliedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_dbgDrawSize_set(void * jarg1, float jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraintData_m_dbgDrawSize_get(void * jarg1) {
  float jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (float) ((arg1)->m_dbgDrawSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set(void * jarg1, int jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get(void * jarg1) {
  int jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_overrideNumSolverIterations_set(void * jarg1, int jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintData_m_overrideNumSolverIterations_get(void * jarg1) {
  int jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_breakingImpulseThreshold_set(void * jarg1, float jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTypedConstraintData_m_breakingImpulseThreshold_get(void * jarg1) {
  float jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  float result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (float) ((arg1)->m_breakingImpulseThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintData_m_isEnabled_set(void * jarg1, int jarg2) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_isEnabled = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintData_m_isEnabled_get(void * jarg1) {
  int jresult ;
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  result = (int) ((arg1)->m_isEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTypedConstraintData() {
  void * jresult ;
  btTypedConstraintData *result = 0 ;
  
  result = (btTypedConstraintData *)new btTypedConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedConstraintData(void * jarg1) {
  btTypedConstraintData *arg1 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btTypedConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_rbA_set(void * jarg1, void * jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *arg2 = (btRigidBodyDoubleData *) 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (btRigidBodyDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbA = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_rbA_get(void * jarg1) {
  void * jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *result = 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (btRigidBodyDoubleData *) ((arg1)->m_rbA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_rbB_set(void * jarg1, void * jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *arg2 = (btRigidBodyDoubleData *) 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (btRigidBodyDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbB = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_rbB_get(void * jarg1) {
  void * jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  btRigidBodyDoubleData *result = 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (btRigidBodyDoubleData *) ((arg1)->m_rbB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_name_set(void * jarg1, char * jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->m_name;
    if (arg2) {
      arg1->m_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->m_name, (const char *)arg2);
    } else {
      arg1->m_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_name_get(void * jarg1) {
  char * jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (char *) ((arg1)->m_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_objectType_set(void * jarg1, int jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_objectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_objectType_get(void * jarg1) {
  int jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_objectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_userConstraintType_set(void * jarg1, int jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_userConstraintType_get(void * jarg1) {
  int jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_userConstraintType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_userConstraintId_set(void * jarg1, int jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_userConstraintId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_userConstraintId_get(void * jarg1) {
  int jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_userConstraintId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_needsFeedback_set(void * jarg1, int jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_needsFeedback = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_needsFeedback_get(void * jarg1) {
  int jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_needsFeedback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_appliedImpulse_set(void * jarg1, double jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_appliedImpulse = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_appliedImpulse_get(void * jarg1) {
  double jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_appliedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_dbgDrawSize_set(void * jarg1, double jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_dbgDrawSize = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_dbgDrawSize_get(void * jarg1) {
  double jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_dbgDrawSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_set(void * jarg1, int jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_disableCollisionsBetweenLinkedBodies = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_get(void * jarg1) {
  int jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_disableCollisionsBetweenLinkedBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_overrideNumSolverIterations_set(void * jarg1, int jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_overrideNumSolverIterations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_overrideNumSolverIterations_get(void * jarg1) {
  int jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_overrideNumSolverIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_breakingImpulseThreshold_set(void * jarg1, double jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_breakingImpulseThreshold = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_breakingImpulseThreshold_get(void * jarg1) {
  double jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_breakingImpulseThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_isEnabled_set(void * jarg1, int jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_isEnabled = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTypedConstraintDoubleData_m_isEnabled_get(void * jarg1) {
  int jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_isEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTypedConstraintDoubleData_padding_set(void * jarg1, char * jarg2) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *arg2 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->padding, (const char *)arg2, 4-1);
      arg1->padding[4-1] = 0;
    } else {
      arg1->padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btTypedConstraintDoubleData_padding_get(void * jarg1) {
  char * jresult ;
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  result = (char *)(char *) ((arg1)->padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTypedConstraintDoubleData() {
  void * jresult ;
  btTypedConstraintDoubleData *result = 0 ;
  
  result = (btTypedConstraintDoubleData *)new btTypedConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTypedConstraintDoubleData(void * jarg1) {
  btTypedConstraintDoubleData *arg1 = (btTypedConstraintDoubleData *) 0 ;
  
  arg1 = (btTypedConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btAngularLimit() {
  void * jresult ;
  btAngularLimit *result = 0 ;
  
  result = (btAngularLimit *)new btAngularLimit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAngularLimit_set__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  arg1 = (btAngularLimit *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  (arg1)->set(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAngularLimit_set__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  arg1 = (btAngularLimit *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAngularLimit_set__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btAngularLimit *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAngularLimit_set__SWIG_3(void * jarg1, float jarg2, float jarg3) {
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btAngularLimit *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAngularLimit_test(void * jarg1, float jarg2) {
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btAngularLimit *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->test(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getSoftness(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getSoftness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getBiasFactor(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getBiasFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getRelaxationFactor(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getRelaxationFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getCorrection(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getCorrection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getSign(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getSign();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getHalfRange(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getHalfRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btAngularLimit_isLimit(void * jarg1) {
  unsigned int jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  bool result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (bool)((btAngularLimit const *)arg1)->isLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btAngularLimit_fit(void * jarg1, void * jarg2) {
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar *arg2 = 0 ;
  
  arg1 = (btAngularLimit *)jarg1; 
  arg2 = (btScalar *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btScalar & type is null", 0);
    return ;
  } 
  ((btAngularLimit const *)arg1)->fit(*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getError(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getError();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getLow(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getLow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btAngularLimit_getHigh(void * jarg1) {
  float jresult ;
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  btScalar result;
  
  arg1 = (btAngularLimit *)jarg1; 
  result = (btScalar)((btAngularLimit const *)arg1)->getHigh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btAngularLimit(void * jarg1) {
  btAngularLimit *arg1 = (btAngularLimit *) 0 ;
  
  arg1 = (btAngularLimit *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btPoint2PointConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btPoint2PointConstraintFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConstraintSetting() {
  void * jresult ;
  btConstraintSetting *result = 0 ;
  
  result = (btConstraintSetting *)new btConstraintSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSetting_m_tau_set(void * jarg1, float jarg2) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_tau = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintSetting_m_tau_get(void * jarg1) {
  float jresult ;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintSetting *)jarg1; 
  result = (btScalar) ((arg1)->m_tau);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSetting_m_damping_set(void * jarg1, float jarg2) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintSetting_m_damping_get(void * jarg1) {
  float jresult ;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintSetting *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSetting_m_impulseClamp_set(void * jarg1, float jarg2) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_impulseClamp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintSetting_m_impulseClamp_get(void * jarg1) {
  float jresult ;
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintSetting *)jarg1; 
  result = (btScalar) ((arg1)->m_impulseClamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConstraintSetting(void * jarg1) {
  btConstraintSetting *arg1 = (btConstraintSetting *) 0 ;
  
  arg1 = (btConstraintSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_m_useSolveConstraintObsolete_set(void * jarg1, unsigned int jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btPoint2PointConstraint_m_useSolveConstraintObsolete_get(void * jarg1) {
  unsigned int jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  bool result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_m_setting_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *arg2 = (btConstraintSetting *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btConstraintSetting *)jarg2; 
  if (arg1) (arg1)->m_setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraint_m_setting_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btConstraintSetting *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (btConstraintSetting *)& ((arg1)->m_setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btPoint2PointConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btPoint2PointConstraint *)new btPoint2PointConstraint(*arg1,(btVector3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_buildJacobian(void * jarg1) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo1(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo2(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_updateRHS(void * jarg1, float jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setPivotA(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setPivotA((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setPivotB(void * jarg1, void * jarg2) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setPivotB((btVector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraint_getPivotInA(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraint_getPivotInB(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (btVector3 *) &((btPoint2PointConstraint const *)arg1)->getPivotInB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPoint2PointConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btPoint2PointConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btPoint2PointConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btPoint2PointConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  int result;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  result = (int)((btPoint2PointConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btPoint2PointConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btPoint2PointConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoint2PointConstraint(void * jarg1) {
  btPoint2PointConstraint *arg1 = (btPoint2PointConstraint *) 0 ;
  
  arg1 = (btPoint2PointConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  arg2 = (btTypedConstraintData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInA_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_pivotInA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInA_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_pivotInA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInB_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_pivotInB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintFloatData_m_pivotInB_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_pivotInB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraintFloatData() {
  void * jresult ;
  btPoint2PointConstraintFloatData *result = 0 ;
  
  result = (btPoint2PointConstraintFloatData *)new btPoint2PointConstraintFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoint2PointConstraintFloatData(void * jarg1) {
  btPoint2PointConstraintFloatData *arg1 = (btPoint2PointConstraintFloatData *) 0 ;
  
  arg1 = (btPoint2PointConstraintFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData2_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData2 *)jarg1; 
  arg2 = (btTypedConstraintDoubleData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData2_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData2 *)jarg1; 
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData2_m_pivotInA_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData2 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_pivotInA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData2_m_pivotInA_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData2 *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData2_m_pivotInB_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData2 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_pivotInB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData2_m_pivotInB_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData2 *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraintDoubleData2() {
  void * jresult ;
  btPoint2PointConstraintDoubleData2 *result = 0 ;
  
  result = (btPoint2PointConstraintDoubleData2 *)new btPoint2PointConstraintDoubleData2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoint2PointConstraintDoubleData2(void * jarg1) {
  btPoint2PointConstraintDoubleData2 *arg1 = (btPoint2PointConstraintDoubleData2 *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  arg2 = (btTypedConstraintData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInA_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_pivotInA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInA_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInB_set(void * jarg1, void * jarg2) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_pivotInB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btPoint2PointConstraintDoubleData_m_pivotInB_get(void * jarg1) {
  void * jresult ;
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_pivotInB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btPoint2PointConstraintDoubleData() {
  void * jresult ;
  btPoint2PointConstraintDoubleData *result = 0 ;
  
  result = (btPoint2PointConstraintDoubleData *)new btPoint2PointConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btPoint2PointConstraintDoubleData(void * jarg1) {
  btPoint2PointConstraintDoubleData *arg1 = (btPoint2PointConstraintDoubleData *) 0 ;
  
  arg1 = (btPoint2PointConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp__BT_USE_CENTER_LIMIT__get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btHingeConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btHingeConstraintFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  bool arg7 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = jarg7 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  bool arg4 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btVector3 const &)*arg2,(btVector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraint__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btHingeConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btHingeConstraint *)new btHingeConstraint(*arg1,(btTransform const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_buildJacobian(void * jarg1) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo1(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2Internal(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2Internal(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_getInfo2InternalUsingFrameOffset(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2InternalUsingFrameOffset(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_updateRHS(void * jarg1, float jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getRigidBodyA__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getRigidBodyB__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btRigidBody *) &((btHingeConstraint const *)arg1)->getRigidBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getFrameOffsetA(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getFrameOffsetB(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setAngularOnly(void * jarg1, unsigned int jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAngularOnly(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_enableAngularMotor(void * jarg1, unsigned int jarg2, float jarg3, float jarg4) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->enableAngularMotor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_enableMotor(void * jarg1, unsigned int jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableMotor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setMaxMotorImpulse(void * jarg1, float jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxMotorImpulse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setMotorTarget__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  arg3 = (btScalar)jarg3; 
  (arg1)->setMotorTarget((btQuaternion const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setMotorTarget__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setMotorTarget(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setLimit(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setLimit__SWIG_3(void * jarg1, float jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setAxis(void * jarg1, void * jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->setAxis(*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getLowerLimit(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getLowerLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getUpperLimit(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getUpperLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getHingeAngle__SWIG_0(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getHingeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getHingeAngle__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btScalar)(arg1)->getHingeAngle((btTransform const &)*arg2,(btTransform const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_testLimit(void * jarg1, void * jarg2, void * jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->testLimit((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getAFrame__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getAFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraint_getBFrame__SWIG_0(void * jarg1) {
  void * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btTransform *) &((btHingeConstraint const *)arg1)->getBFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraint_getSolveLimit(void * jarg1) {
  int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (int)(arg1)->getSolveLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getLimitSign(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLimitSign();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHingeConstraint_getAngularOnly(void * jarg1) {
  unsigned int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (bool)(arg1)->getAngularOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHingeConstraint_getEnableAngularMotor(void * jarg1) {
  unsigned int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (bool)(arg1)->getEnableAngularMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getMotorTargetVelosity(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMotorTargetVelosity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getMaxMotorImpulse(void * jarg1) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMaxMotorImpulse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btHingeConstraint_getUseFrameOffset(void * jarg1) {
  unsigned int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (bool)(arg1)->getUseFrameOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setUseFrameOffset(void * jarg1, unsigned int jarg2) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseFrameOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btHingeConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  int result;
  
  arg1 = (btHingeConstraint *)jarg1; 
  result = (int)((btHingeConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btHingeConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btHingeConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHingeConstraint(void * jarg1) {
  btHingeConstraint *arg1 = (btHingeConstraint *) 0 ;
  
  arg1 = (btHingeConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (btTypedConstraintData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_useReferenceFrameA_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_useReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_angularOnly_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_angularOnly_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_enableAngularMotor_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_enableAngularMotor_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_motorTargetVelocity_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_motorTargetVelocity_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_motorTargetVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_maxMotorImpulse_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_maxMotorImpulse_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_maxMotorImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_lowerLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_lowerLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_upperLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_upperLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_limitSoftness_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_biasFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_biasFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_relaxationFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintDoubleData_m_relaxationFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraintDoubleData() {
  void * jresult ;
  btHingeConstraintDoubleData *result = 0 ;
  
  result = (btHingeConstraintDoubleData *)new btHingeConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHingeConstraintDoubleData(void * jarg1) {
  btHingeConstraintDoubleData *arg1 = (btHingeConstraintDoubleData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (btTypedConstraintData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_useReferenceFrameA_set(void * jarg1, int jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_useReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_angularOnly_set(void * jarg1, int jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_angularOnly_get(void * jarg1) {
  int jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_enableAngularMotor_set(void * jarg1, int jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_enableAngularMotor_get(void * jarg1) {
  int jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_motorTargetVelocity_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_motorTargetVelocity_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_motorTargetVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_maxMotorImpulse_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_maxMotorImpulse_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_maxMotorImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_lowerLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_lowerLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_upperLimit_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_upperLimit_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_limitSoftness_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_biasFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_biasFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_relaxationFactor_set(void * jarg1, float jarg2) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHingeConstraintFloatData_m_relaxationFactor_get(void * jarg1) {
  float jresult ;
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraintFloatData() {
  void * jresult ;
  btHingeConstraintFloatData *result = 0 ;
  
  result = (btHingeConstraintFloatData *)new btHingeConstraintFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHingeConstraintFloatData(void * jarg1) {
  btHingeConstraintFloatData *arg1 = (btHingeConstraintFloatData *) 0 ;
  
  arg1 = (btHingeConstraintFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (btTypedConstraintDoubleData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_useReferenceFrameA_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_useReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (int) ((arg1)->m_useReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_angularOnly_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_angularOnly = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_angularOnly_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (int) ((arg1)->m_angularOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_enableAngularMotor_set(void * jarg1, int jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_enableAngularMotor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_enableAngularMotor_get(void * jarg1) {
  int jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  int result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (int) ((arg1)->m_enableAngularMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_motorTargetVelocity_set(void * jarg1, double jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_motorTargetVelocity = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_motorTargetVelocity_get(void * jarg1) {
  double jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (double) ((arg1)->m_motorTargetVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_maxMotorImpulse_set(void * jarg1, double jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_maxMotorImpulse = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_maxMotorImpulse_get(void * jarg1) {
  double jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (double) ((arg1)->m_maxMotorImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_lowerLimit_set(void * jarg1, double jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_lowerLimit_get(void * jarg1) {
  double jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (double) ((arg1)->m_lowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_upperLimit_set(void * jarg1, double jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_upperLimit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_upperLimit_get(void * jarg1) {
  double jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (double) ((arg1)->m_upperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_limitSoftness_set(void * jarg1, double jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_limitSoftness_get(void * jarg1) {
  double jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (double) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_biasFactor_set(void * jarg1, double jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_biasFactor_get(void * jarg1) {
  double jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (double) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_relaxationFactor_set(void * jarg1, double jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_relaxationFactor_get(void * jarg1) {
  double jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  double result;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (double) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_padding1_set(void * jarg1, char * jarg2) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  char *arg2 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding1, (const char *)arg2, 4-1);
      arg1->m_padding1[4-1] = 0;
    } else {
      arg1->m_padding1[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btHingeConstraintDoubleData2_m_padding1_get(void * jarg1) {
  char * jresult ;
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  char *result = 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHingeConstraintDoubleData2() {
  void * jresult ;
  btHingeConstraintDoubleData2 *result = 0 ;
  
  result = (btHingeConstraintDoubleData2 *)new btHingeConstraintDoubleData2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHingeConstraintDoubleData2(void * jarg1) {
  btHingeConstraintDoubleData2 *arg1 = (btHingeConstraintDoubleData2 *) 0 ;
  
  arg1 = (btHingeConstraintDoubleData2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeTwistConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btConeTwistConstraintData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeTwistConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btConeTwistConstraint *)new btConeTwistConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeTwistConstraint__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  btConeTwistConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btConeTwistConstraint *)new btConeTwistConstraint(*arg1,(btTransform const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_buildJacobian(void * jarg1) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo1(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo2(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  btMatrix3x3 *arg6 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btMatrix3x3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  arg6 = (btMatrix3x3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btMatrix3x3 const &)*arg5,(btMatrix3x3 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_solveConstraintObsolete(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btSolverBody *arg2 = 0 ;
  btSolverBody *arg3 = 0 ;
  btScalar arg4 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btSolverBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSolverBody & type is null", 0);
    return ;
  } 
  arg3 = (btSolverBody *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btSolverBody & type is null", 0);
    return ;
  } 
  arg4 = (btScalar)jarg4; 
  (arg1)->solveConstraintObsolete(*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_updateRHS(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getRigidBodyA(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btRigidBody *) &((btConeTwistConstraint const *)arg1)->getRigidBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getRigidBodyB(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btRigidBody *) &((btConeTwistConstraint const *)arg1)->getRigidBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setAngularOnly(void * jarg1, unsigned int jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAngularOnly(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btScalar arg7 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btScalar)jarg7; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  btScalar arg6 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  btScalar arg5 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  arg5 = (btScalar)jarg5; 
  (arg1)->setLimit(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setLimit__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setLimit(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getAFrame(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getAFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getBFrame(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &(arg1)->getBFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeTwistConstraint_getSolveTwistLimit(void * jarg1) {
  int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (int)(arg1)->getSolveTwistLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeTwistConstraint_getSolveSwingLimit(void * jarg1) {
  int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (int)(arg1)->getSolveSwingLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getTwistLimitSign(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTwistLimitSign();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_calcAngleInfo(void * jarg1) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  (arg1)->calcAngleInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_calcAngleInfo2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btMatrix3x3 *arg4 = 0 ;
  btMatrix3x3 *arg5 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btMatrix3x3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  arg5 = (btMatrix3x3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btMatrix3x3 const & type is null", 0);
    return ;
  } 
  (arg1)->calcAngleInfo2((btTransform const &)*arg2,(btTransform const &)*arg3,(btMatrix3x3 const &)*arg4,(btMatrix3x3 const &)*arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getSwingSpan1(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSwingSpan1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getSwingSpan2(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSwingSpan2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getTwistSpan(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTwistSpan();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getTwistAngle(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTwistAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btConeTwistConstraint_isPastSwingLimit(void * jarg1) {
  unsigned int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (bool)(arg1)->isPastSwingLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setDamping(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDamping(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_enableMotor(void * jarg1, unsigned int jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableMotor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMaxMotorImpulse(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxMotorImpulse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMaxMotorImpulseNormalized(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxMotorImpulseNormalized(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getFixThresh(void * jarg1) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btScalar)(arg1)->getFixThresh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setFixThresh(void * jarg1, float jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setFixThresh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMotorTarget(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setMotorTarget((btQuaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setMotorTargetInConstraintSpace(void * jarg1, void * jarg2) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btQuaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btQuaternion const & type is null", 0);
    return ;
  } 
  (arg1)->setMotorTargetInConstraintSpace((btQuaternion const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_GetPointForAngle(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btVector3 result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = ((btConeTwistConstraint const *)arg1)->GetPointForAngle(arg2,arg3);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getFrameOffsetA(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &((btConeTwistConstraint const *)arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraint_getFrameOffsetB(void * jarg1) {
  void * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (btTransform *) &((btConeTwistConstraint const *)arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btConeTwistConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btConeTwistConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConeTwistConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  int result;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  result = (int)((btConeTwistConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeTwistConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btConeTwistConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeTwistConstraint(void * jarg1) {
  btConeTwistConstraint *arg1 = (btConeTwistConstraint *) 0 ;
  
  arg1 = (btConeTwistConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (btTypedConstraintDoubleData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_swingSpan1_set(void * jarg1, double jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_swingSpan1 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_swingSpan1_get(void * jarg1) {
  double jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_swingSpan1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_swingSpan2_set(void * jarg1, double jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_swingSpan2 = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_swingSpan2_get(void * jarg1) {
  double jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_swingSpan2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_twistSpan_set(void * jarg1, double jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_twistSpan = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_twistSpan_get(void * jarg1) {
  double jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_twistSpan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_limitSoftness_set(void * jarg1, double jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_limitSoftness_get(void * jarg1) {
  double jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_biasFactor_set(void * jarg1, double jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_biasFactor_get(void * jarg1) {
  double jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_relaxationFactor_set(void * jarg1, double jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_relaxationFactor_get(void * jarg1) {
  double jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_damping_set(void * jarg1, double jarg2) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btConeTwistConstraintDoubleData_m_damping_get(void * jarg1) {
  double jresult ;
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeTwistConstraintDoubleData() {
  void * jresult ;
  btConeTwistConstraintDoubleData *result = 0 ;
  
  result = (btConeTwistConstraintDoubleData *)new btConeTwistConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeTwistConstraintDoubleData(void * jarg1) {
  btConeTwistConstraintDoubleData *arg1 = (btConeTwistConstraintDoubleData *) 0 ;
  
  arg1 = (btConeTwistConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (btTypedConstraintData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan1_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_swingSpan1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan1_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_swingSpan1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan2_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_swingSpan2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_swingSpan2_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_swingSpan2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_twistSpan_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_twistSpan = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_twistSpan_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_twistSpan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_limitSoftness_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_biasFactor_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_biasFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_biasFactor_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_biasFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_relaxationFactor_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_relaxationFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_relaxationFactor_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_relaxationFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_damping_set(void * jarg1, float jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConeTwistConstraintData_m_damping_get(void * jarg1) {
  float jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  float result;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (float) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConeTwistConstraintData_m_pad_set(void * jarg1, char * jarg2) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  char *arg2 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_pad, (const char *)arg2, 4-1);
      arg1->m_pad[4-1] = 0;
    } else {
      arg1->m_pad[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btConeTwistConstraintData_m_pad_get(void * jarg1) {
  char * jresult ;
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_pad);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btConeTwistConstraintData() {
  void * jresult ;
  btConeTwistConstraintData *result = 0 ;
  
  result = (btConeTwistConstraintData *)new btConeTwistConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConeTwistConstraintData(void * jarg1) {
  btConeTwistConstraintData *arg1 = (btConeTwistConstraintData *) 0 ;
  
  arg1 = (btConeTwistConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGeneric6DofConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btGeneric6DofConstraintData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_loLimit_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_loLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_loLimit_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_loLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_hiLimit_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_hiLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_hiLimit_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_hiLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_targetVelocity_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_targetVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_targetVelocity_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_targetVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxMotorForce_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxMotorForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxMotorForce_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_maxMotorForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxLimitForce_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxLimitForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_maxLimitForce_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_maxLimitForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_damping_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_damping_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_limitSoftness_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_normalCFM_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_normalCFM = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_normalCFM_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_normalCFM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopERP_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_stopERP = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopERP_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_stopERP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopCFM_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_stopCFM = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_stopCFM_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_stopCFM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_bounce_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_bounce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_bounce_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_bounce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_enableMotor_set(void * jarg1, unsigned int jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableMotor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRotationalLimitMotor_m_enableMotor_get(void * jarg1) {
  unsigned int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (bool) ((arg1)->m_enableMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimitError_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_currentLimitError = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimitError_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_currentLimitError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentPosition_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_currentPosition = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentPosition_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_currentPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimit_set(void * jarg1, int jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_currentLimit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRotationalLimitMotor_m_currentLimit_get(void * jarg1) {
  int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  int result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (int) ((arg1)->m_currentLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRotationalLimitMotor_m_accumulatedImpulse_set(void * jarg1, float jarg2) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_accumulatedImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_m_accumulatedImpulse_get(void * jarg1) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_accumulatedImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRotationalLimitMotor__SWIG_0() {
  void * jresult ;
  btRotationalLimitMotor *result = 0 ;
  
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRotationalLimitMotor__SWIG_1(void * jarg1) {
  void * jresult ;
  btRotationalLimitMotor *arg1 = 0 ;
  btRotationalLimitMotor *result = 0 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRotationalLimitMotor const & type is null", 0);
    return 0;
  } 
  result = (btRotationalLimitMotor *)new btRotationalLimitMotor((btRotationalLimitMotor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRotationalLimitMotor_isLimited(void * jarg1) {
  unsigned int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (bool)(arg1)->isLimited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btRotationalLimitMotor_needApplyTorques(void * jarg1) {
  unsigned int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  bool result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  result = (bool)(arg1)->needApplyTorques();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRotationalLimitMotor_testLimitValue(void * jarg1, float jarg2) {
  int jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  int result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  result = (int)(arg1)->testLimitValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRotationalLimitMotor_solveAngularLimits(void * jarg1, float jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6) {
  float jresult ;
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btVector3 *arg3 = 0 ;
  btScalar arg4 ;
  btRigidBody *arg5 = (btRigidBody *) 0 ;
  btRigidBody *arg6 = (btRigidBody *) 0 ;
  btScalar result;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg4 = (btScalar)jarg4; 
  arg5 = (btRigidBody *)jarg5; 
  arg6 = (btRigidBody *)jarg6; 
  result = (btScalar)(arg1)->solveAngularLimits(arg2,*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRotationalLimitMotor(void * jarg1) {
  btRotationalLimitMotor *arg1 = (btRotationalLimitMotor *) 0 ;
  
  arg1 = (btRotationalLimitMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_lowerLimit_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_lowerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_lowerLimit_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_lowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_upperLimit_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_upperLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_upperLimit_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_upperLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_accumulatedImpulse_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_accumulatedImpulse = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_accumulatedImpulse_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_accumulatedImpulse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_limitSoftness_set(void * jarg1, float jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_limitSoftness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_limitSoftness_get(void * jarg1) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_limitSoftness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_damping_set(void * jarg1, float jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_damping_get(void * jarg1) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_restitution_set(void * jarg1, float jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_restitution_get(void * jarg1) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btScalar) ((arg1)->m_restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_normalCFM_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_normalCFM = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_normalCFM_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_normalCFM);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopERP_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_stopERP = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopERP_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_stopERP);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopCFM_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_stopCFM = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_stopCFM_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_stopCFM);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_enableMotor_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->m_enableMotor;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_enableMotor_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  bool *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (bool *)(bool *) ((arg1)->m_enableMotor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_targetVelocity_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_targetVelocity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_targetVelocity_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_targetVelocity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_maxMotorForce_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_maxMotorForce = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_maxMotorForce_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_maxMotorForce);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimitError_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_currentLimitError = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimitError_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_currentLimitError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLinearDiff_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_currentLinearDiff = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLinearDiff_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_currentLinearDiff);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimit_set(void * jarg1, void * jarg2) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *arg2 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_currentLimit;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btTranslationalLimitMotor_m_currentLimit_get(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  result = (int *)(int *) ((arg1)->m_currentLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTranslationalLimitMotor__SWIG_0() {
  void * jresult ;
  btTranslationalLimitMotor *result = 0 ;
  
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btTranslationalLimitMotor__SWIG_1(void * jarg1) {
  void * jresult ;
  btTranslationalLimitMotor *arg1 = 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTranslationalLimitMotor const & type is null", 0);
    return 0;
  } 
  result = (btTranslationalLimitMotor *)new btTranslationalLimitMotor((btTranslationalLimitMotor const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTranslationalLimitMotor_isLimited(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isLimited(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btTranslationalLimitMotor_needApplyForce(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->needApplyForce(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btTranslationalLimitMotor_testLimitValue(void * jarg1, int jarg2, float jarg3) {
  int jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  result = (int)(arg1)->testLimitValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btTranslationalLimitMotor_solveLinearAxis(void * jarg1, float jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, int jarg8, void * jarg9, void * jarg10) {
  float jresult ;
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  btRigidBody *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btRigidBody *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  int arg8 ;
  btVector3 *arg9 = 0 ;
  btVector3 *arg10 = 0 ;
  btScalar result;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btRigidBody *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btRigidBody *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg8 = (int)jarg8; 
  arg9 = (btVector3 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg10 = (btVector3 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btScalar)(arg1)->solveLinearAxis(arg2,arg3,*arg4,(btVector3 const &)*arg5,*arg6,(btVector3 const &)*arg7,arg8,(btVector3 const &)*arg9,(btVector3 const &)*arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btTranslationalLimitMotor(void * jarg1) {
  btTranslationalLimitMotor *arg1 = (btTranslationalLimitMotor *) 0 ;
  
  arg1 = (btTranslationalLimitMotor *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BT_6DOF_FLAGS_AXIS_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_m_useSolveConstraintObsolete_set(void * jarg1, unsigned int jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_useSolveConstraintObsolete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_m_useSolveConstraintObsolete_get(void * jarg1) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (bool) ((arg1)->m_useSolveConstraintObsolete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btGeneric6DofConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofConstraint__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btGeneric6DofConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btGeneric6DofConstraint *)new btGeneric6DofConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_calculateTransforms__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_calculateTransforms__SWIG_1(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  (arg1)->calculateTransforms();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getCalculatedTransformA(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getCalculatedTransformB(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getCalculatedTransformB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getFrameOffsetA__SWIG_0(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getFrameOffsetB__SWIG_0(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTransform *) &((btGeneric6DofConstraint const *)arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_buildJacobian(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  (arg1)->buildJacobian();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo1(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo2(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_updateRHS(void * jarg1, float jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateRHS(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAxis(void * jarg1, int jarg2) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btVector3 result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((btGeneric6DofConstraint const *)arg1)->getAxis(arg2);
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAngle(void * jarg1, int jarg2) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getAngle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getRelativePivotPosition(void * jarg1, int jarg2) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getRelativePivotPosition(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_testAngularLimitMotor(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->testAngularLimitMotor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setLinearLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearLowerLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getLinearLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getLinearLowerLimit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setLinearUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setLinearUpperLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getLinearUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getLinearUpperLimit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setAngularLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularLowerLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAngularLowerLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getAngularLowerLimit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setAngularUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAngularUpperLimit((btVector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_getAngularUpperLimit(void * jarg1, void * jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->getAngularUpperLimit(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getRotationalLimitMotor(void * jarg1, int jarg2) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btRotationalLimitMotor *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btRotationalLimitMotor *)(arg1)->getRotationalLimitMotor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraint_getTranslationalLimitMotor(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btTranslationalLimitMotor *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (btTranslationalLimitMotor *)(arg1)->getTranslationalLimitMotor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setLimit(void * jarg1, int jarg2, float jarg3, float jarg4) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  btScalar arg4 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (btScalar)jarg4; 
  (arg1)->setLimit(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_isLimited(void * jarg1, int jarg2) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isLimited(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_calcAnchorPos(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  (arg1)->calcAnchorPos();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10, void * jarg11, int jarg12, int jarg13) {
  int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRotationalLimitMotor *arg2 = (btRotationalLimitMotor *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btTypedConstraint::btConstraintInfo2 *arg9 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int arg10 ;
  btVector3 *arg11 = 0 ;
  int arg12 ;
  int arg13 ;
  int result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btRotationalLimitMotor *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg9 = (btTypedConstraint::btConstraintInfo2 *)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (btVector3 *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  result = (int)(arg1)->get_limit_motor_info2(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9,arg10,*arg11,arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraint_get_limit_motor_info2__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, int jarg10, void * jarg11, int jarg12) {
  int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btRotationalLimitMotor *arg2 = (btRotationalLimitMotor *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btVector3 *arg7 = 0 ;
  btVector3 *arg8 = 0 ;
  btTypedConstraint::btConstraintInfo2 *arg9 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  int arg10 ;
  btVector3 *arg11 = 0 ;
  int arg12 ;
  int result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btRotationalLimitMotor *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg7 = (btVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg8 = (btVector3 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg9 = (btTypedConstraint::btConstraintInfo2 *)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (btVector3 *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg12 = (int)jarg12; 
  result = (int)(arg1)->get_limit_motor_info2(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,(btVector3 const &)*arg7,(btVector3 const &)*arg8,arg9,arg10,*arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btGeneric6DofConstraint_getUseFrameOffset(void * jarg1) {
  unsigned int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (bool)(arg1)->getUseFrameOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setUseFrameOffset(void * jarg1, unsigned int jarg2) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseFrameOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGeneric6DofConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGeneric6DofConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraint_setAxis(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  result = (int)((btGeneric6DofConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGeneric6DofConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btGeneric6DofConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofConstraint(void * jarg1) {
  btGeneric6DofConstraint *arg1 = (btGeneric6DofConstraint *) 0 ;
  
  arg1 = (btGeneric6DofConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (btTypedConstraintData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearUpperLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearUpperLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_linearUpperLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearLowerLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_linearLowerLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_linearLowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularUpperLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularUpperLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_angularUpperLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularLowerLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_angularLowerLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_angularLowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set(void * jarg1, int jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set(void * jarg1, int jarg2) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofConstraintData() {
  void * jresult ;
  btGeneric6DofConstraintData *result = 0 ;
  
  result = (btGeneric6DofConstraintData *)new btGeneric6DofConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofConstraintData(void * jarg1) {
  btGeneric6DofConstraintData *arg1 = (btGeneric6DofConstraintData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (btTypedConstraintDoubleData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_linearUpperLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_linearLowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_angularUpperLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_set(void * jarg1, void * jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_angularLowerLimit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_set(void * jarg1, int jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_set(void * jarg1, int jarg2) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_get(void * jarg1) {
  int jresult ;
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofConstraintDoubleData2() {
  void * jresult ;
  btGeneric6DofConstraintDoubleData2 *result = 0 ;
  
  result = (btGeneric6DofConstraintDoubleData2 *)new btGeneric6DofConstraintDoubleData2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofConstraintDoubleData2(void * jarg1) {
  btGeneric6DofConstraintDoubleData2 *arg1 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  
  arg1 = (btGeneric6DofConstraintDoubleData2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSliderConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btSliderConstraintData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSliderConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btSliderConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btSliderConstraint *)new btSliderConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSliderConstraint__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btSliderConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btSliderConstraint *)new btSliderConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo1(void * jarg1, void * jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo1NonVirtual(void * jarg1, void * jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1NonVirtual(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo2(void * jarg1, void * jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_getInfo2NonVirtual(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, float jarg7, float jarg8) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btVector3 *arg6 = 0 ;
  btScalar arg7 ;
  btScalar arg8 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg6 = (btVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg7 = (btScalar)jarg7; 
  arg8 = (btScalar)jarg8; 
  (arg1)->getInfo2NonVirtual(arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,(btVector3 const &)*arg5,(btVector3 const &)*arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getRigidBodyA(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btRigidBody *) &((btSliderConstraint const *)arg1)->getRigidBodyA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getRigidBodyB(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btRigidBody *) &((btSliderConstraint const *)arg1)->getRigidBodyB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getCalculatedTransformA(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getCalculatedTransformA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getCalculatedTransformB(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getCalculatedTransformB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getFrameOffsetA__SWIG_0(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getFrameOffsetA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getFrameOffsetB__SWIG_0(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btTransform *) &((btSliderConstraint const *)arg1)->getFrameOffsetB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLowerLinLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLowerLinLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setLowerLinLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setLowerLinLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getUpperLinLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getUpperLinLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setUpperLinLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUpperLinLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLowerAngLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLowerAngLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setLowerAngLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setLowerAngLimit(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getUpperAngLimit(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getUpperAngLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setUpperAngLimit(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUpperAngLimit(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getUseLinearReferenceFrameA(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getUseLinearReferenceFrameA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessDirLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessDirLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionDirLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionDirLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingDirLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingDirLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessDirAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessDirAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionDirAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionDirAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingDirAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingDirAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessLimLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessLimLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionLimLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionLimLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingLimLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingLimLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessLimAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessLimAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionLimAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionLimAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingLimAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingLimAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessOrthoLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessOrthoLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionOrthoLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionOrthoLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingOrthoLin(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingOrthoLin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getSoftnessOrthoAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getSoftnessOrthoAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getRestitutionOrthoAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getRestitutionOrthoAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getDampingOrthoAng(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getDampingOrthoAng();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessDirLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessDirLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionDirLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionDirLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingDirLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingDirLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessDirAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessDirAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionDirAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionDirAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingDirAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingDirAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessLimLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessLimLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionLimLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionLimLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingLimLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingLimLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessLimAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessLimAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionLimAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionLimAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingLimAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingLimAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessOrthoLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessOrthoLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionOrthoLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionOrthoLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingOrthoLin(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingOrthoLin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setSoftnessOrthoAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setSoftnessOrthoAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setRestitutionOrthoAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRestitutionOrthoAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setDampingOrthoAng(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setDampingOrthoAng(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setPoweredLinMotor(void * jarg1, unsigned int jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPoweredLinMotor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getPoweredLinMotor(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getPoweredLinMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setTargetLinMotorVelocity(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setTargetLinMotorVelocity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getTargetLinMotorVelocity(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTargetLinMotorVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setMaxLinMotorForce(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxLinMotorForce(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getMaxLinMotorForce(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMaxLinMotorForce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setPoweredAngMotor(void * jarg1, unsigned int jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPoweredAngMotor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getPoweredAngMotor(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getPoweredAngMotor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setTargetAngMotorVelocity(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setTargetAngMotorVelocity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getTargetAngMotorVelocity(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getTargetAngMotorVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setMaxAngMotorForce(void * jarg1, float jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setMaxAngMotorForce(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getMaxAngMotorForce(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getMaxAngMotorForce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLinearPos(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getLinearPos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getAngularPos(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getAngularPos();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getSolveLinLimit(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getSolveLinLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getLinDepth(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getLinDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getSolveAngLimit(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getSolveAngLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getAngDepth(void * jarg1) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (btScalar)(arg1)->getAngDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_calculateTransforms(void * jarg1, void * jarg2, void * jarg3) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->calculateTransforms((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_testLinLimits(void * jarg1) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  (arg1)->testLinLimits();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_testAngLimits(void * jarg1) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  (arg1)->testAngLimits();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getAncorInA(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btVector3 result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (arg1)->getAncorInA();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraint_getAncorInB(void * jarg1) {
  void * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btVector3 result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (arg1)->getAncorInB();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btSliderConstraint_getUseFrameOffset(void * jarg1) {
  unsigned int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (bool)(arg1)->getUseFrameOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setUseFrameOffset(void * jarg1, unsigned int jarg2) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  bool arg2 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseFrameOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setFrames(void * jarg1, void * jarg2, void * jarg3) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  btTransform *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return ;
  } 
  (arg1)->setFrames((btTransform const &)*arg2,(btTransform const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btSliderConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  int result;
  
  arg1 = (btSliderConstraint *)jarg1; 
  result = (int)((btSliderConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btSliderConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btSliderConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSliderConstraint(void * jarg1) {
  btSliderConstraint *arg1 = (btSliderConstraint *) 0 ;
  
  arg1 = (btSliderConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTypedConstraintData *arg2 = (btTypedConstraintData *) 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (btTypedConstraintData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTypedConstraintData *result = 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (btTypedConstraintData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *arg2 = (btTransformFloatData *) 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (btTransformFloatData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  btTransformFloatData *result = 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (btTransformFloatData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_linearUpperLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_linearUpperLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_linearUpperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_linearLowerLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_linearLowerLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_linearLowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_angularUpperLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_angularUpperLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_angularUpperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_angularLowerLimit_set(void * jarg1, float jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSliderConstraintData_m_angularLowerLimit_get(void * jarg1) {
  float jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  float result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (float) ((arg1)->m_angularLowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_useLinearReferenceFrameA_set(void * jarg1, int jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraintData_m_useLinearReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintData_m_useOffsetForConstraintFrame_set(void * jarg1, int jarg2) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int arg2 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraintData_m_useOffsetForConstraintFrame_get(void * jarg1) {
  int jresult ;
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  int result;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSliderConstraintData() {
  void * jresult ;
  btSliderConstraintData *result = 0 ;
  
  result = (btSliderConstraintData *)new btSliderConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSliderConstraintData(void * jarg1) {
  btSliderConstraintData *arg1 = (btSliderConstraintData *) 0 ;
  
  arg1 = (btSliderConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (btTypedConstraintDoubleData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_rbAFrame_set(void * jarg1, void * jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbAFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_rbAFrame_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbAFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_rbBFrame_set(void * jarg1, void * jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *arg2 = (btTransformDoubleData *) 0 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (btTransformDoubleData *)jarg2; 
  if (arg1) (arg1)->m_rbBFrame = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_rbBFrame_get(void * jarg1) {
  void * jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  btTransformDoubleData *result = 0 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (btTransformDoubleData *)& ((arg1)->m_rbBFrame);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_linearUpperLimit_set(void * jarg1, double jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearUpperLimit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_linearUpperLimit_get(void * jarg1) {
  double jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearUpperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_linearLowerLimit_set(void * jarg1, double jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_linearLowerLimit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_linearLowerLimit_get(void * jarg1) {
  double jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_linearLowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_angularUpperLimit_set(void * jarg1, double jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularUpperLimit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_angularUpperLimit_get(void * jarg1) {
  double jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularUpperLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_angularLowerLimit_set(void * jarg1, double jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_angularLowerLimit = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_angularLowerLimit_get(void * jarg1) {
  double jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_angularLowerLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_useLinearReferenceFrameA_set(void * jarg1, int jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useLinearReferenceFrameA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_useLinearReferenceFrameA_get(void * jarg1) {
  int jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_useLinearReferenceFrameA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_set(void * jarg1, int jarg2) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int arg2 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_useOffsetForConstraintFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_get(void * jarg1) {
  int jresult ;
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  int result;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  result = (int) ((arg1)->m_useOffsetForConstraintFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSliderConstraintDoubleData() {
  void * jresult ;
  btSliderConstraintDoubleData *result = 0 ;
  
  result = (btSliderConstraintDoubleData *)new btSliderConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSliderConstraintDoubleData(void * jarg1) {
  btSliderConstraintDoubleData *arg1 = (btSliderConstraintDoubleData *) 0 ;
  
  arg1 = (btSliderConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btGeneric6DofSpringConstraintData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofSpringConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  bool arg5 ;
  btGeneric6DofSpringConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (btGeneric6DofSpringConstraint *)new btGeneric6DofSpringConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofSpringConstraint__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btTransform *arg2 = 0 ;
  bool arg3 ;
  btGeneric6DofSpringConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (btGeneric6DofSpringConstraint *)new btGeneric6DofSpringConstraint(*arg1,(btTransform const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_enableSpring(void * jarg1, int jarg2, unsigned int jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->enableSpring(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setStiffness(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setStiffness(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setDamping(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setDamping(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_0(void * jarg1) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  (arg1)->setEquilibriumPoint();
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_1(void * jarg1, int jarg2) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEquilibriumPoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setEquilibriumPoint__SWIG_2(void * jarg1, int jarg2, float jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setEquilibriumPoint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_setAxis(void * jarg1, void * jarg2, void * jarg3) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_getInfo2(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  int result;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  result = (int)((btGeneric6DofSpringConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btGeneric6DofSpringConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofSpringConstraint(void * jarg1) {
  btGeneric6DofSpringConstraint *arg1 = (btGeneric6DofSpringConstraint *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_6dofData_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  btGeneric6DofConstraintData *arg2 = (btGeneric6DofConstraintData *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (btGeneric6DofConstraintData *)jarg2; 
  if (arg1) (arg1)->m_6dofData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_6dofData_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  btGeneric6DofConstraintData *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (btGeneric6DofConstraintData *)& ((arg1)->m_6dofData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springEnabled_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  int *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_springEnabled;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springEnabled_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  int *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (int *)(int *) ((arg1)->m_springEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_equilibriumPoint_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_equilibriumPoint;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_equilibriumPoint_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_equilibriumPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springStiffness_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_springStiffness;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springStiffness_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_springStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springDamping_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->m_springDamping;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintData_m_springDamping_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  float *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  result = (float *)(float *) ((arg1)->m_springDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofSpringConstraintData() {
  void * jresult ;
  btGeneric6DofSpringConstraintData *result = 0 ;
  
  result = (btGeneric6DofSpringConstraintData *)new btGeneric6DofSpringConstraintData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofSpringConstraintData(void * jarg1) {
  btGeneric6DofSpringConstraintData *arg1 = (btGeneric6DofSpringConstraintData *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_6dofData_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  btGeneric6DofConstraintDoubleData2 *arg2 = (btGeneric6DofConstraintDoubleData2 *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  arg2 = (btGeneric6DofConstraintDoubleData2 *)jarg2; 
  if (arg1) (arg1)->m_6dofData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_6dofData_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  btGeneric6DofConstraintDoubleData2 *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  result = (btGeneric6DofConstraintDoubleData2 *)& ((arg1)->m_6dofData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  int *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->m_springEnabled;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  int *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  result = (int *)(int *) ((arg1)->m_springEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->m_equilibriumPoint;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  result = (double *)(double *) ((arg1)->m_equilibriumPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->m_springStiffness;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  result = (double *)(double *) ((arg1)->m_springStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_springDamping_set(void * jarg1, void * jarg2) {
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *arg2 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->m_springDamping;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraintDoubleData2_m_springDamping_get(void * jarg1) {
  void * jresult ;
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  double *result = 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  result = (double *)(double *) ((arg1)->m_springDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGeneric6DofSpringConstraintDoubleData2() {
  void * jresult ;
  btGeneric6DofSpringConstraintDoubleData2 *result = 0 ;
  
  result = (btGeneric6DofSpringConstraintDoubleData2 *)new btGeneric6DofSpringConstraintDoubleData2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGeneric6DofSpringConstraintDoubleData2(void * jarg1) {
  btGeneric6DofSpringConstraintDoubleData2 *arg1 = (btGeneric6DofSpringConstraintDoubleData2 *) 0 ;
  
  arg1 = (btGeneric6DofSpringConstraintDoubleData2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btUniversalConstraint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btUniversalConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btUniversalConstraint *)new btUniversalConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,(btVector3 const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAnchor(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAnchor2(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAxis1(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btUniversalConstraint_getAxis2(void * jarg1) {
  void * jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniversalConstraint_getAngle1(void * jarg1) {
  float jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btUniversalConstraint_getAngle2(void * jarg1) {
  float jresult ;
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniversalConstraint_setUpperLimit(void * jarg1, float jarg2, float jarg3) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setUpperLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniversalConstraint_setLowerLimit(void * jarg1, float jarg2, float jarg3) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btScalar arg2 ;
  btScalar arg3 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setLowerLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btUniversalConstraint_setAxis(void * jarg1, void * jarg2, void * jarg3) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return ;
  } 
  (arg1)->setAxis((btVector3 const &)*arg2,(btVector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btUniversalConstraint(void * jarg1) {
  btUniversalConstraint *arg1 = (btUniversalConstraint *) 0 ;
  
  arg1 = (btUniversalConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btHinge2Constraint(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btVector3 *arg5 = 0 ;
  btHinge2Constraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  arg5 = (btVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return 0;
  } 
  result = (btHinge2Constraint *)new btHinge2Constraint(*arg1,*arg2,*arg3,*arg4,*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAnchor(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAnchor2(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAnchor2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAxis1(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btHinge2Constraint_getAxis2(void * jarg1) {
  void * jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btVector3 *) &(arg1)->getAxis2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHinge2Constraint_getAngle1(void * jarg1) {
  float jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btHinge2Constraint_getAngle2(void * jarg1) {
  float jresult ;
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar result;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  result = (btScalar)(arg1)->getAngle2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHinge2Constraint_setUpperLimit(void * jarg1, float jarg2) {
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setUpperLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btHinge2Constraint_setLowerLimit(void * jarg1, float jarg2) {
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setLowerLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btHinge2Constraint(void * jarg1) {
  btHinge2Constraint *arg1 = (btHinge2Constraint *) 0 ;
  
  arg1 = (btHinge2Constraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGearConstraintDataName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("btGearConstraintFloatData");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGearConstraint__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btGearConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  result = (btGearConstraint *)new btGearConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGearConstraint__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btGearConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  result = (btGearConstraint *)new btGearConstraint(*arg1,*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGearConstraint(void * jarg1) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_getInfo1(void * jarg1, void * jarg2) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_getInfo2(void * jarg1, void * jarg2) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_setAxisA(void * jarg1, void * jarg2) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->setAxisA(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_setAxisB(void * jarg1, void * jarg2) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *arg2 = 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 & type is null", 0);
    return ;
  } 
  (arg1)->setAxisB(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_setRatio(void * jarg1, float jarg2) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setRatio(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraint_getAxisA(void * jarg1) {
  void * jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  result = (btVector3 *) &((btGearConstraint const *)arg1)->getAxisA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraint_getAxisB(void * jarg1) {
  void * jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  result = (btVector3 *) &((btGearConstraint const *)arg1)->getAxisB();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGearConstraint_getRatio(void * jarg1) {
  float jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  btScalar result;
  
  arg1 = (btGearConstraint *)jarg1; 
  result = (btScalar)((btGearConstraint const *)arg1)->getRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGearConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btGearConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGearConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btGearConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btGearConstraint_calculateSerializeBufferSize(void * jarg1) {
  int jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  int result;
  
  arg1 = (btGearConstraint *)jarg1; 
  result = (int)((btGearConstraint const *)arg1)->calculateSerializeBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGearConstraint_serialize(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  btGearConstraint *arg1 = (btGearConstraint *) 0 ;
  void *arg2 = (void *) 0 ;
  btSerializer *arg3 = (btSerializer *) 0 ;
  char *result = 0 ;
  
  arg1 = (btGearConstraint *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (btSerializer *)jarg3; 
  result = (char *)((btGearConstraint const *)arg1)->serialize(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintFloatData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btTypedConstraintFloatData *arg2 = (btTypedConstraintFloatData *) 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  arg2 = (btTypedConstraintFloatData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraintFloatData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btTypedConstraintFloatData *result = 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  result = (btTypedConstraintFloatData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintFloatData_m_axisInA_set(void * jarg1, void * jarg2) {
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_axisInA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraintFloatData_m_axisInA_get(void * jarg1) {
  void * jresult ;
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_axisInA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintFloatData_m_axisInB_set(void * jarg1, void * jarg2) {
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *arg2 = (btVector3FloatData *) 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  arg2 = (btVector3FloatData *)jarg2; 
  if (arg1) (arg1)->m_axisInB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraintFloatData_m_axisInB_get(void * jarg1) {
  void * jresult ;
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  btVector3FloatData *result = 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  result = (btVector3FloatData *)& ((arg1)->m_axisInB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintFloatData_m_ratio_set(void * jarg1, float jarg2) {
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  float arg2 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ratio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btGearConstraintFloatData_m_ratio_get(void * jarg1) {
  float jresult ;
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  float result;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  result = (float) ((arg1)->m_ratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintFloatData_m_padding_set(void * jarg1, char * jarg2) {
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  char *arg2 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->m_padding, (const char *)arg2, 4-1);
      arg1->m_padding[4-1] = 0;
    } else {
      arg1->m_padding[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_btGearConstraintFloatData_m_padding_get(void * jarg1) {
  char * jresult ;
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  char *result = 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  result = (char *)(char *) ((arg1)->m_padding);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGearConstraintFloatData() {
  void * jresult ;
  btGearConstraintFloatData *result = 0 ;
  
  result = (btGearConstraintFloatData *)new btGearConstraintFloatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGearConstraintFloatData(void * jarg1) {
  btGearConstraintFloatData *arg1 = (btGearConstraintFloatData *) 0 ;
  
  arg1 = (btGearConstraintFloatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_typeConstraintData_set(void * jarg1, void * jarg2) {
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *arg2 = (btTypedConstraintDoubleData *) 0 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  arg2 = (btTypedConstraintDoubleData *)jarg2; 
  if (arg1) (arg1)->m_typeConstraintData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_typeConstraintData_get(void * jarg1) {
  void * jresult ;
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btTypedConstraintDoubleData *result = 0 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  result = (btTypedConstraintDoubleData *)& ((arg1)->m_typeConstraintData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_axisInA_set(void * jarg1, void * jarg2) {
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_axisInA = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_axisInA_get(void * jarg1) {
  void * jresult ;
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_axisInA);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_axisInB_set(void * jarg1, void * jarg2) {
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *arg2 = (btVector3DoubleData *) 0 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  arg2 = (btVector3DoubleData *)jarg2; 
  if (arg1) (arg1)->m_axisInB = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_axisInB_get(void * jarg1) {
  void * jresult ;
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  btVector3DoubleData *result = 0 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  result = (btVector3DoubleData *)& ((arg1)->m_axisInB);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_ratio_set(void * jarg1, double jarg2) {
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  double arg2 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_ratio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_btGearConstraintDoubleData_m_ratio_get(void * jarg1) {
  double jresult ;
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  double result;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  result = (double) ((arg1)->m_ratio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btGearConstraintDoubleData() {
  void * jresult ;
  btGearConstraintDoubleData *result = 0 ;
  
  result = (btGearConstraintDoubleData *)new btGearConstraintDoubleData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btGearConstraintDoubleData(void * jarg1) {
  btGearConstraintDoubleData *arg1 = (btGearConstraintDoubleData *) 0 ;
  
  arg1 = (btGearConstraintDoubleData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btFixedConstraint(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btRigidBody *arg1 = 0 ;
  btRigidBody *arg2 = 0 ;
  btTransform *arg3 = 0 ;
  btTransform *arg4 = 0 ;
  btFixedConstraint *result = 0 ;
  
  arg1 = (btRigidBody *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody & type is null", 0);
    return 0;
  } 
  arg3 = (btTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (btTransform *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btTransform const & type is null", 0);
    return 0;
  } 
  result = (btFixedConstraint *)new btFixedConstraint(*arg1,*arg2,(btTransform const &)*arg3,(btTransform const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btFixedConstraint(void * jarg1) {
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  
  arg1 = (btFixedConstraint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btFixedConstraint_getInfo1(void * jarg1, void * jarg2) {
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo1 *arg2 = (btTypedConstraint::btConstraintInfo1 *) 0 ;
  
  arg1 = (btFixedConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo1 *)jarg2; 
  (arg1)->getInfo1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btFixedConstraint_getInfo2(void * jarg1, void * jarg2) {
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  btTypedConstraint::btConstraintInfo2 *arg2 = (btTypedConstraint::btConstraintInfo2 *) 0 ;
  
  arg1 = (btFixedConstraint *)jarg1; 
  arg2 = (btTypedConstraint::btConstraintInfo2 *)jarg2; 
  (arg1)->getInfo2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btFixedConstraint_setParam__SWIG_0(void * jarg1, int jarg2, float jarg3, int jarg4) {
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  int arg4 ;
  
  arg1 = (btFixedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btFixedConstraint_setParam__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  btScalar arg3 ;
  
  arg1 = (btFixedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->setParam(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFixedConstraint_getParam__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  btScalar result;
  
  arg1 = (btFixedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (btScalar)((btFixedConstraint const *)arg1)->getParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btFixedConstraint_getParam__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  btFixedConstraint *arg1 = (btFixedConstraint *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btFixedConstraint *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btFixedConstraint const *)arg1)->getParam(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btConstraintSolver(void * jarg1) {
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  
  arg1 = (btConstraintSolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSolver_prepareSolve(void * jarg1, int jarg2, int jarg3) {
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (btConstraintSolver *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->prepareSolve(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_btConstraintSolver_solveGroup(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, int jarg7, void * jarg8, void * jarg9, void * jarg10) {
  float jresult ;
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btCollisionObject **arg2 = (btCollisionObject **) 0 ;
  int arg3 ;
  btPersistentManifold **arg4 = (btPersistentManifold **) 0 ;
  int arg5 ;
  btTypedConstraint **arg6 = (btTypedConstraint **) 0 ;
  int arg7 ;
  btContactSolverInfo *arg8 = 0 ;
  btIDebugDraw *arg9 = (btIDebugDraw *) 0 ;
  btDispatcher *arg10 = (btDispatcher *) 0 ;
  btScalar result;
  
  arg1 = (btConstraintSolver *)jarg1; 
  arg2 = (btCollisionObject **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btPersistentManifold **)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btTypedConstraint **)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (btContactSolverInfo *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btContactSolverInfo const & type is null", 0);
    return 0;
  } 
  arg9 = (btIDebugDraw *)jarg9; 
  arg10 = (btDispatcher *)jarg10; 
  result = (btScalar)(arg1)->solveGroup(arg2,arg3,arg4,arg5,arg6,arg7,(btContactSolverInfo const &)*arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSolver_allSolved(void * jarg1, void * jarg2, void * jarg3) {
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btContactSolverInfo *arg2 = 0 ;
  btIDebugDraw *arg3 = (btIDebugDraw *) 0 ;
  
  arg1 = (btConstraintSolver *)jarg1; 
  arg2 = (btContactSolverInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btContactSolverInfo const & type is null", 0);
    return ;
  } 
  arg3 = (btIDebugDraw *)jarg3; 
  (arg1)->allSolved((btContactSolverInfo const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btConstraintSolver_reset(void * jarg1) {
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  
  arg1 = (btConstraintSolver *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_btConstraintSolver_getSolverType(void * jarg1) {
  int jresult ;
  btConstraintSolver *arg1 = (btConstraintSolver *) 0 ;
  btConstraintSolverType result;
  
  arg1 = (btConstraintSolver *)jarg1; 
  result = (btConstraintSolverType)((btConstraintSolver const *)arg1)->getSolverType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btSequentialImpulseConstraintSolver() {
  void * jresult ;
  btSequentialImpulseConstraintSolver *result = 0 ;
  
  result = (btSequentialImpulseConstraintSolver *)new btSequentialImpulseConstraintSolver();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btSequentialImpulseConstraintSolver(void * jarg1) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_solveGroup(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, void * jarg6, int jarg7, void * jarg8, void * jarg9, void * jarg10) {
  float jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btCollisionObject **arg2 = (btCollisionObject **) 0 ;
  int arg3 ;
  btPersistentManifold **arg4 = (btPersistentManifold **) 0 ;
  int arg5 ;
  btTypedConstraint **arg6 = (btTypedConstraint **) 0 ;
  int arg7 ;
  btContactSolverInfo *arg8 = 0 ;
  btIDebugDraw *arg9 = (btIDebugDraw *) 0 ;
  btDispatcher *arg10 = (btDispatcher *) 0 ;
  btScalar result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (btCollisionObject **)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (btPersistentManifold **)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (btTypedConstraint **)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (btContactSolverInfo *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btContactSolverInfo const & type is null", 0);
    return 0;
  } 
  arg9 = (btIDebugDraw *)jarg9; 
  arg10 = (btDispatcher *)jarg10; 
  result = (btScalar)(arg1)->solveGroup(arg2,arg3,arg4,arg5,arg6,arg7,(btContactSolverInfo const &)*arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_reset(void * jarg1) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_btRand2(void * jarg1) {
  unsigned long jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (unsigned long)(arg1)->btRand2();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_btRandInt2(void * jarg1, int jarg2) {
  int jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->btRandInt2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_setRandSeed(void * jarg1, unsigned long jarg2) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (arg1)->setRandSeed(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_getRandSeed(void * jarg1) {
  unsigned long jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  unsigned long result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (unsigned long)((btSequentialImpulseConstraintSolver const *)arg1)->getRandSeed();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_getSolverType(void * jarg1) {
  int jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btConstraintSolverType result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (btConstraintSolverType)((btSequentialImpulseConstraintSolver const *)arg1)->getSolverType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_getActiveConstraintRowSolverGeneric(void * jarg1) {
  void * jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btSingleConstraintRowSolver result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (btSingleConstraintRowSolver)(arg1)->getActiveConstraintRowSolverGeneric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_setConstraintRowSolverGeneric(void * jarg1, void * jarg2) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btSingleConstraintRowSolver arg2 = (btSingleConstraintRowSolver) 0 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (btSingleConstraintRowSolver)jarg2; 
  (arg1)->setConstraintRowSolverGeneric(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_getActiveConstraintRowSolverLowerLimit(void * jarg1) {
  void * jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btSingleConstraintRowSolver result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (btSingleConstraintRowSolver)(arg1)->getActiveConstraintRowSolverLowerLimit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_setConstraintRowSolverLowerLimit(void * jarg1, void * jarg2) {
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btSingleConstraintRowSolver arg2 = (btSingleConstraintRowSolver) 0 ;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  arg2 = (btSingleConstraintRowSolver)jarg2; 
  (arg1)->setConstraintRowSolverLowerLimit(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverGeneric(void * jarg1) {
  void * jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btSingleConstraintRowSolver result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (btSingleConstraintRowSolver)(arg1)->getScalarConstraintRowSolverGeneric();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_getScalarConstraintRowSolverLowerLimit(void * jarg1) {
  void * jresult ;
  btSequentialImpulseConstraintSolver *arg1 = (btSequentialImpulseConstraintSolver *) 0 ;
  btSingleConstraintRowSolver result;
  
  arg1 = (btSequentialImpulseConstraintSolver *)jarg1; 
  result = (btSingleConstraintRowSolver)(arg1)->getScalarConstraintRowSolverLowerLimit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVehicleRaycaster(void * jarg1) {
  btVehicleRaycaster *arg1 = (btVehicleRaycaster *) 0 ;
  
  arg1 = (btVehicleRaycaster *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btVehicleRaycaster_btVehicleRaycasterResult() {
  void * jresult ;
  btVehicleRaycaster::btVehicleRaycasterResult *result = 0 ;
  
  result = (btVehicleRaycaster::btVehicleRaycasterResult *)new btVehicleRaycaster::btVehicleRaycasterResult();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVehicleRaycaster_btVehicleRaycasterResult_m_hitPointInWorld_set(void * jarg1, void * jarg2) {
  btVehicleRaycaster::btVehicleRaycasterResult *arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitPointInWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVehicleRaycaster_btVehicleRaycasterResult_m_hitPointInWorld_get(void * jarg1) {
  void * jresult ;
  btVehicleRaycaster::btVehicleRaycasterResult *arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitPointInWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVehicleRaycaster_btVehicleRaycasterResult_m_hitNormalInWorld_set(void * jarg1, void * jarg2) {
  btVehicleRaycaster::btVehicleRaycasterResult *arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hitNormalInWorld = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVehicleRaycaster_btVehicleRaycasterResult_m_hitNormalInWorld_get(void * jarg1) {
  void * jresult ;
  btVehicleRaycaster::btVehicleRaycasterResult *arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hitNormalInWorld);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btVehicleRaycaster_btVehicleRaycasterResult_m_distFraction_set(void * jarg1, float jarg2) {
  btVehicleRaycaster::btVehicleRaycasterResult *arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_distFraction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btVehicleRaycaster_btVehicleRaycasterResult_m_distFraction_get(void * jarg1) {
  float jresult ;
  btVehicleRaycaster::btVehicleRaycasterResult *arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *) 0 ;
  btScalar result;
  
  arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg1; 
  result = (btScalar) ((arg1)->m_distFraction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btVehicleRaycaster_btVehicleRaycasterResult(void * jarg1) {
  btVehicleRaycaster::btVehicleRaycasterResult *arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *) 0 ;
  
  arg1 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btVehicleRaycaster_castRay(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btVehicleRaycaster *arg1 = (btVehicleRaycaster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVehicleRaycaster::btVehicleRaycasterResult *arg4 = 0 ;
  void *result = 0 ;
  
  arg1 = (btVehicleRaycaster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVehicleRaycaster::btVehicleRaycasterResult & type is null", 0);
    return 0;
  } 
  result = (void *)(arg1)->castRay((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_chassisConnectionCS_set(void * jarg1, void * jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_chassisConnectionCS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_chassisConnectionCS_get(void * jarg1) {
  void * jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_chassisConnectionCS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelDirectionCS_set(void * jarg1, void * jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_wheelDirectionCS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelDirectionCS_get(void * jarg1) {
  void * jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_wheelDirectionCS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelAxleCS_set(void * jarg1, void * jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_wheelAxleCS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelAxleCS_get(void * jarg1) {
  void * jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_wheelAxleCS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_suspensionRestLength_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionRestLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_suspensionRestLength_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionRestLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxSuspensionTravelCm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_maxSuspensionTravelCm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelRadius_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_wheelRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelRadius_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_wheelRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_suspensionStiffness_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionStiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_suspensionStiffness_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelsDampingCompression_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_wheelsDampingCompression = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelsDampingCompression_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_wheelsDampingCompression);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_wheelsDampingRelaxation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_wheelsDampingRelaxation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_frictionSlip_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_frictionSlip = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_frictionSlip_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_frictionSlip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_maxSuspensionForce_set(void * jarg1, float jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxSuspensionForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_maxSuspensionForce_get(void * jarg1) {
  float jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_maxSuspensionForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_bIsFrontWheel_set(void * jarg1, unsigned int jarg2) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bIsFrontWheel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btWheelInfoConstructionInfo_m_bIsFrontWheel_get(void * jarg1) {
  unsigned int jresult ;
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  bool result;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  result = (bool) ((arg1)->m_bIsFrontWheel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btWheelInfoConstructionInfo() {
  void * jresult ;
  btWheelInfoConstructionInfo *result = 0 ;
  
  result = (btWheelInfoConstructionInfo *)new btWheelInfoConstructionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btWheelInfoConstructionInfo(void * jarg1) {
  btWheelInfoConstructionInfo *arg1 = (btWheelInfoConstructionInfo *) 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_contactNormalWS_set(void * jarg1, void * jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_contactNormalWS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_contactNormalWS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_contactNormalWS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_contactPointWS_set(void * jarg1, void * jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_contactPointWS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_contactPointWS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_contactPointWS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_suspensionLength_set(void * jarg1, float jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_suspensionLength_get(void * jarg1) {
  float jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_hardPointWS_set(void * jarg1, void * jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_hardPointWS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_hardPointWS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_hardPointWS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_wheelDirectionWS_set(void * jarg1, void * jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_wheelDirectionWS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_wheelDirectionWS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_wheelDirectionWS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_wheelAxleWS_set(void * jarg1, void * jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_wheelAxleWS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_wheelAxleWS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_wheelAxleWS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_isInContact_set(void * jarg1, unsigned int jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_isInContact = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_isInContact_get(void * jarg1) {
  unsigned int jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  bool result;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (bool) ((arg1)->m_isInContact);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_groundObject_set(void * jarg1, void * jarg2) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_groundObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_RaycastInfo_m_groundObject_get(void * jarg1) {
  void * jresult ;
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  result = (void *) ((arg1)->m_groundObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btWheelInfo_RaycastInfo() {
  void * jresult ;
  btWheelInfo::RaycastInfo *result = 0 ;
  
  result = (btWheelInfo::RaycastInfo *)new btWheelInfo::RaycastInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btWheelInfo_RaycastInfo(void * jarg1) {
  btWheelInfo::RaycastInfo *arg1 = (btWheelInfo::RaycastInfo *) 0 ;
  
  arg1 = (btWheelInfo::RaycastInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_raycastInfo_set(void * jarg1, void * jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btWheelInfo::RaycastInfo *arg2 = (btWheelInfo::RaycastInfo *) 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btWheelInfo::RaycastInfo *)jarg2; 
  if (arg1) (arg1)->m_raycastInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_m_raycastInfo_get(void * jarg1) {
  void * jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btWheelInfo::RaycastInfo *result = 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btWheelInfo::RaycastInfo *)& ((arg1)->m_raycastInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_worldTransform_set(void * jarg1, void * jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btTransform *arg2 = (btTransform *) 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btTransform *)jarg2; 
  if (arg1) (arg1)->m_worldTransform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_m_worldTransform_get(void * jarg1) {
  void * jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btTransform *)& ((arg1)->m_worldTransform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_chassisConnectionPointCS_set(void * jarg1, void * jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_chassisConnectionPointCS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_m_chassisConnectionPointCS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_chassisConnectionPointCS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_wheelDirectionCS_set(void * jarg1, void * jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_wheelDirectionCS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_m_wheelDirectionCS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_wheelDirectionCS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_wheelAxleCS_set(void * jarg1, void * jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *arg2 = (btVector3 *) 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btVector3 *)jarg2; 
  if (arg1) (arg1)->m_wheelAxleCS = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_m_wheelAxleCS_get(void * jarg1) {
  void * jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btVector3 *result = 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btVector3 *)& ((arg1)->m_wheelAxleCS);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_suspensionRestLength1_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionRestLength1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_suspensionRestLength1_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionRestLength1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_maxSuspensionTravelCm_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxSuspensionTravelCm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_maxSuspensionTravelCm_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_maxSuspensionTravelCm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_getSuspensionRestLength(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar)((btWheelInfo const *)arg1)->getSuspensionRestLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_wheelsRadius_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_wheelsRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_wheelsRadius_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_wheelsRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_suspensionStiffness_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionStiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_suspensionStiffness_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_wheelsDampingCompression_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_wheelsDampingCompression = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_wheelsDampingCompression_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_wheelsDampingCompression);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_wheelsDampingRelaxation_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_wheelsDampingRelaxation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_wheelsDampingRelaxation_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_wheelsDampingRelaxation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_frictionSlip_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_frictionSlip = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_frictionSlip_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_frictionSlip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_steering_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_steering = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_steering_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_steering);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_rotation_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rotation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_rotation_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_deltaRotation_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_deltaRotation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_deltaRotation_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_deltaRotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_rollInfluence_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_rollInfluence = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_rollInfluence_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_rollInfluence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_maxSuspensionForce_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxSuspensionForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_maxSuspensionForce_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_maxSuspensionForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_engineForce_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_engineForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_engineForce_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_engineForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_brake_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_brake = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_brake_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_brake);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_bIsFrontWheel_set(void * jarg1, unsigned int jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_bIsFrontWheel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_btWheelInfo_m_bIsFrontWheel_get(void * jarg1) {
  unsigned int jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  bool result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (bool) ((arg1)->m_bIsFrontWheel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_clientInfo_set(void * jarg1, void * jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_clientInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btWheelInfo_m_clientInfo_get(void * jarg1) {
  void * jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (void *) ((arg1)->m_clientInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btWheelInfo__SWIG_0() {
  void * jresult ;
  btWheelInfo *result = 0 ;
  
  result = (btWheelInfo *)new btWheelInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btWheelInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  btWheelInfoConstructionInfo *arg1 = 0 ;
  btWheelInfo *result = 0 ;
  
  arg1 = (btWheelInfoConstructionInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfoConstructionInfo & type is null", 0);
    return 0;
  } 
  result = (btWheelInfo *)new btWheelInfo(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_updateWheel(void * jarg1, void * jarg2, void * jarg3) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btRigidBody *arg2 = 0 ;
  btWheelInfo::RaycastInfo *arg3 = 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btRigidBody *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRigidBody const & type is null", 0);
    return ;
  } 
  arg3 = (btWheelInfo::RaycastInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfo::RaycastInfo & type is null", 0);
    return ;
  } 
  (arg1)->updateWheel((btRigidBody const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_clippedInvContactDotSuspension_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_clippedInvContactDotSuspension = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_clippedInvContactDotSuspension_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_clippedInvContactDotSuspension);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_suspensionRelativeVelocity_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionRelativeVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_suspensionRelativeVelocity_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionRelativeVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_wheelsSuspensionForce_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_wheelsSuspensionForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_wheelsSuspensionForce_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_wheelsSuspensionForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btWheelInfo_m_skidInfo_set(void * jarg1, float jarg2) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_skidInfo = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btWheelInfo_m_skidInfo_get(void * jarg1) {
  float jresult ;
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  btScalar result;
  
  arg1 = (btWheelInfo *)jarg1; 
  result = (btScalar) ((arg1)->m_skidInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btWheelInfo(void * jarg1) {
  btWheelInfo *arg1 = (btWheelInfo *) 0 ;
  
  arg1 = (btWheelInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btActionInterface(void * jarg1) {
  btActionInterface *arg1 = (btActionInterface *) 0 ;
  
  arg1 = (btActionInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btActionInterface_updateAction(void * jarg1, void * jarg2, float jarg3) {
  btActionInterface *arg1 = (btActionInterface *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  arg1 = (btActionInterface *)jarg1; 
  arg2 = (btCollisionWorld *)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->updateAction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btActionInterface_debugDraw(void * jarg1, void * jarg2) {
  btActionInterface *arg1 = (btActionInterface *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btActionInterface *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  (arg1)->debugDraw(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRaycastVehicle_btVehicleTuning() {
  void * jresult ;
  btRaycastVehicle::btVehicleTuning *result = 0 ;
  
  result = (btRaycastVehicle::btVehicleTuning *)new btRaycastVehicle::btVehicleTuning();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_suspensionStiffness_set(void * jarg1, float jarg2) {
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionStiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_suspensionStiffness_get(void * jarg1) {
  float jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionStiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_suspensionCompression_set(void * jarg1, float jarg2) {
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionCompression = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_suspensionCompression_get(void * jarg1) {
  float jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionCompression);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_suspensionDamping_set(void * jarg1, float jarg2) {
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_suspensionDamping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_suspensionDamping_get(void * jarg1) {
  float jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  result = (btScalar) ((arg1)->m_suspensionDamping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_maxSuspensionTravelCm_set(void * jarg1, float jarg2) {
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxSuspensionTravelCm = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_maxSuspensionTravelCm_get(void * jarg1) {
  float jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  result = (btScalar) ((arg1)->m_maxSuspensionTravelCm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_frictionSlip_set(void * jarg1, float jarg2) {
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_frictionSlip = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_frictionSlip_get(void * jarg1) {
  float jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  result = (btScalar) ((arg1)->m_frictionSlip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_maxSuspensionForce_set(void * jarg1, float jarg2) {
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  arg2 = (btScalar)jarg2; 
  if (arg1) (arg1)->m_maxSuspensionForce = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_btVehicleTuning_m_maxSuspensionForce_get(void * jarg1) {
  float jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  result = (btScalar) ((arg1)->m_maxSuspensionForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRaycastVehicle_btVehicleTuning(void * jarg1) {
  btRaycastVehicle::btVehicleTuning *arg1 = (btRaycastVehicle::btVehicleTuning *) 0 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btRaycastVehicle(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  btRaycastVehicle::btVehicleTuning *arg1 = 0 ;
  btRigidBody *arg2 = (btRigidBody *) 0 ;
  btVehicleRaycaster *arg3 = (btVehicleRaycaster *) 0 ;
  btRaycastVehicle *result = 0 ;
  
  arg1 = (btRaycastVehicle::btVehicleTuning *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRaycastVehicle::btVehicleTuning const & type is null", 0);
    return 0;
  } 
  arg2 = (btRigidBody *)jarg2; 
  arg3 = (btVehicleRaycaster *)jarg3; 
  result = (btRaycastVehicle *)new btRaycastVehicle((btRaycastVehicle::btVehicleTuning const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btRaycastVehicle(void * jarg1) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateAction(void * jarg1, void * jarg2, float jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btCollisionWorld *arg2 = (btCollisionWorld *) 0 ;
  btScalar arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btCollisionWorld *)jarg2; 
  arg3 = (btScalar)jarg3; 
  (arg1)->updateAction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_debugDraw(void * jarg1, void * jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btIDebugDraw *arg2 = (btIDebugDraw *) 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btIDebugDraw *)jarg2; 
  (arg1)->debugDraw(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getChassisWorldTransform(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btTransform *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (btTransform *) &((btRaycastVehicle const *)arg1)->getChassisWorldTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_rayCast(void * jarg1, void * jarg2) {
  float jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btWheelInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfo & type is null", 0);
    return 0;
  } 
  result = (btScalar)(arg1)->rayCast(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateVehicle(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateVehicle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_resetSuspension(void * jarg1) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  (arg1)->resetSuspension();
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_getSteeringValue(void * jarg1, int jarg2) {
  float jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btScalar)((btRaycastVehicle const *)arg1)->getSteeringValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setSteeringValue(void * jarg1, float jarg2, int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setSteeringValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_applyEngineForce(void * jarg1, float jarg2, int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->applyEngineForce(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getWheelTransformWS(void * jarg1, int jarg2) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btTransform *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btTransform *) &((btRaycastVehicle const *)arg1)->getWheelTransformWS(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransform__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->updateWheelTransform(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransform__SWIG_1(void * jarg1, int jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->updateWheelTransform(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_addWheel(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6, void * jarg7, unsigned int jarg8) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVector3 *arg4 = 0 ;
  btScalar arg5 ;
  btScalar arg6 ;
  btRaycastVehicle::btVehicleTuning *arg7 = 0 ;
  bool arg8 ;
  btWheelInfo *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg5 = (btScalar)jarg5; 
  arg6 = (btScalar)jarg6; 
  arg7 = (btRaycastVehicle::btVehicleTuning *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btRaycastVehicle::btVehicleTuning const & type is null", 0);
    return 0;
  } 
  arg8 = jarg8 ? true : false; 
  result = (btWheelInfo *) &(arg1)->addWheel((btVector3 const &)*arg2,(btVector3 const &)*arg3,(btVector3 const &)*arg4,arg5,arg6,(btRaycastVehicle::btVehicleTuning const &)*arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getNumWheels(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getNumWheels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_m_wheelInfo_set(void * jarg1, void * jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btAlignedObjectArray< btWheelInfo > *arg2 = (btAlignedObjectArray< btWheelInfo > *) 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btAlignedObjectArray< btWheelInfo > *)jarg2; 
  if (arg1) (arg1)->m_wheelInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_m_wheelInfo_get(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btAlignedObjectArray< btWheelInfo > *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (btAlignedObjectArray< btWheelInfo > *)& ((arg1)->m_wheelInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getWheelInfo__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  btWheelInfo *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  result = (btWheelInfo *) &((btRaycastVehicle const *)arg1)->getWheelInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransformsWS__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btWheelInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfo & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->updateWheelTransformsWS(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateWheelTransformsWS__SWIG_1(void * jarg1, void * jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btWheelInfo *arg2 = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btWheelInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btWheelInfo & type is null", 0);
    return ;
  } 
  (arg1)->updateWheelTransformsWS(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setBrake(void * jarg1, float jarg2, int jarg3) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  int arg3 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setBrake(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setPitchControl(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->setPitchControl(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateSuspension(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateSuspension(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_updateFriction(void * jarg1, float jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (btScalar)jarg2; 
  (arg1)->updateFriction(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getRigidBody__SWIG_0(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btRigidBody *result = 0 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (btRigidBody *)(arg1)->getRigidBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getRightAxis(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getRightAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getUpAxis(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getUpAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getForwardAxis(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getForwardAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btRaycastVehicle_getForwardVector(void * jarg1) {
  void * jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btVector3 result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = ((btRaycastVehicle const *)arg1)->getForwardVector();
  jresult = new btVector3((const btVector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_btRaycastVehicle_getCurrentSpeedKmHour(void * jarg1) {
  float jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  btScalar result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (btScalar)((btRaycastVehicle const *)arg1)->getCurrentSpeedKmHour();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setCoordinateSystem(void * jarg1, int jarg2, int jarg3, int jarg4) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setCoordinateSystem(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getUserConstraintType(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getUserConstraintType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setUserConstraintType(void * jarg1, int jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUserConstraintType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_btRaycastVehicle_setUserConstraintId(void * jarg1, int jarg2) {
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int arg2 ;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setUserConstraintId(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_btRaycastVehicle_getUserConstraintId(void * jarg1) {
  int jresult ;
  btRaycastVehicle *arg1 = (btRaycastVehicle *) 0 ;
  int result;
  
  arg1 = (btRaycastVehicle *)jarg1; 
  result = (int)((btRaycastVehicle const *)arg1)->getUserConstraintId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_btDefaultVehicleRaycaster(void * jarg1) {
  void * jresult ;
  btDynamicsWorld *arg1 = (btDynamicsWorld *) 0 ;
  btDefaultVehicleRaycaster *result = 0 ;
  
  arg1 = (btDynamicsWorld *)jarg1; 
  result = (btDefaultVehicleRaycaster *)new btDefaultVehicleRaycaster(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_btDefaultVehicleRaycaster_castRay(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  btDefaultVehicleRaycaster *arg1 = (btDefaultVehicleRaycaster *) 0 ;
  btVector3 *arg2 = 0 ;
  btVector3 *arg3 = 0 ;
  btVehicleRaycaster::btVehicleRaycasterResult *arg4 = 0 ;
  void *result = 0 ;
  
  arg1 = (btDefaultVehicleRaycaster *)jarg1; 
  arg2 = (btVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (btVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVector3 const & type is null", 0);
    return 0;
  } 
  arg4 = (btVehicleRaycaster::btVehicleRaycasterResult *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "btVehicleRaycaster::btVehicleRaycasterResult & type is null", 0);
    return 0;
  } 
  result = (void *)(arg1)->castRay((btVector3 const &)*arg2,(btVector3 const &)*arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_btDefaultVehicleRaycaster(void * jarg1) {
  btDefaultVehicleRaycaster *arg1 = (btDefaultVehicleRaycaster *) 0 ;
  
  arg1 = (btDefaultVehicleRaycaster *)jarg1; 
  delete arg1;
}


SWIGEXPORT btVector3 * SWIGSTDCALL CSharp_btVector4_SWIGUpcast(btVector4 *jarg1) {
    return (btVector3 *)jarg1;
}

SWIGEXPORT btQuadWord * SWIGSTDCALL CSharp_btQuaternion_SWIGUpcast(btQuaternion *jarg1) {
    return (btQuadWord *)jarg1;
}

SWIGEXPORT btTypedObject * SWIGSTDCALL CSharp_btPersistentManifold_SWIGUpcast(btPersistentManifold *jarg1) {
    return (btTypedObject *)jarg1;
}

SWIGEXPORT btDiscreteCollisionDetectorInterface::Result * SWIGSTDCALL CSharp_btStorageResult_SWIGUpcast(btStorageResult *jarg1) {
    return (btDiscreteCollisionDetectorInterface::Result *)jarg1;
}

SWIGEXPORT btDiscreteCollisionDetectorInterface::Result * SWIGSTDCALL CSharp_btManifoldResult_SWIGUpcast(btManifoldResult *jarg1) {
    return (btDiscreteCollisionDetectorInterface::Result *)jarg1;
}

SWIGEXPORT btDispatcher * SWIGSTDCALL CSharp_btCollisionDispatcher_SWIGUpcast(btCollisionDispatcher *jarg1) {
    return (btDispatcher *)jarg1;
}

SWIGEXPORT btBroadphaseAabbCallback * SWIGSTDCALL CSharp_btBroadphaseRayCallback_SWIGUpcast(btBroadphaseRayCallback *jarg1) {
    return (btBroadphaseAabbCallback *)jarg1;
}

SWIGEXPORT btOverlappingPairCallback * SWIGSTDCALL CSharp_btOverlappingPairCache_SWIGUpcast(btOverlappingPairCache *jarg1) {
    return (btOverlappingPairCallback *)jarg1;
}

SWIGEXPORT btOverlappingPairCache * SWIGSTDCALL CSharp_btHashedOverlappingPairCache_SWIGUpcast(btHashedOverlappingPairCache *jarg1) {
    return (btOverlappingPairCache *)jarg1;
}

SWIGEXPORT btOverlappingPairCache * SWIGSTDCALL CSharp_btSortedOverlappingPairCache_SWIGUpcast(btSortedOverlappingPairCache *jarg1) {
    return (btOverlappingPairCache *)jarg1;
}

SWIGEXPORT btOverlappingPairCache * SWIGSTDCALL CSharp_btNullPairCache_SWIGUpcast(btNullPairCache *jarg1) {
    return (btOverlappingPairCache *)jarg1;
}

SWIGEXPORT btCollisionWorld::RayResultCallback * SWIGSTDCALL CSharp_btCollisionWorld_ClosestRayResultCallback_SWIGUpcast(btCollisionWorld::ClosestRayResultCallback *jarg1) {
    return (btCollisionWorld::RayResultCallback *)jarg1;
}

SWIGEXPORT btCollisionWorld::RayResultCallback * SWIGSTDCALL CSharp_btCollisionWorld_AllHitsRayResultCallback_SWIGUpcast(btCollisionWorld::AllHitsRayResultCallback *jarg1) {
    return (btCollisionWorld::RayResultCallback *)jarg1;
}

SWIGEXPORT btCollisionWorld::ConvexResultCallback * SWIGSTDCALL CSharp_btCollisionWorld_ClosestConvexResultCallback_SWIGUpcast(btCollisionWorld::ClosestConvexResultCallback *jarg1) {
    return (btCollisionWorld::ConvexResultCallback *)jarg1;
}

SWIGEXPORT btCollisionShape * SWIGSTDCALL CSharp_btConvexShape_SWIGUpcast(btConvexShape *jarg1) {
    return (btCollisionShape *)jarg1;
}

SWIGEXPORT btConvexShape * SWIGSTDCALL CSharp_btConvexInternalShape_SWIGUpcast(btConvexInternalShape *jarg1) {
    return (btConvexShape *)jarg1;
}

SWIGEXPORT btConvexInternalShape * SWIGSTDCALL CSharp_btConvexInternalAabbCachingShape_SWIGUpcast(btConvexInternalAabbCachingShape *jarg1) {
    return (btConvexInternalShape *)jarg1;
}

SWIGEXPORT btConvexInternalShape * SWIGSTDCALL CSharp_btPolyhedralConvexShape_SWIGUpcast(btPolyhedralConvexShape *jarg1) {
    return (btConvexInternalShape *)jarg1;
}

SWIGEXPORT btPolyhedralConvexShape * SWIGSTDCALL CSharp_btPolyhedralConvexAabbCachingShape_SWIGUpcast(btPolyhedralConvexAabbCachingShape *jarg1) {
    return (btPolyhedralConvexShape *)jarg1;
}

SWIGEXPORT btPolyhedralConvexShape * SWIGSTDCALL CSharp_btBoxShape_SWIGUpcast(btBoxShape *jarg1) {
    return (btPolyhedralConvexShape *)jarg1;
}

SWIGEXPORT btConvexInternalShape * SWIGSTDCALL CSharp_btSphereShape_SWIGUpcast(btSphereShape *jarg1) {
    return (btConvexInternalShape *)jarg1;
}

SWIGEXPORT btConvexInternalShape * SWIGSTDCALL CSharp_btCapsuleShape_SWIGUpcast(btCapsuleShape *jarg1) {
    return (btConvexInternalShape *)jarg1;
}

SWIGEXPORT btCapsuleShape * SWIGSTDCALL CSharp_btCapsuleShapeX_SWIGUpcast(btCapsuleShapeX *jarg1) {
    return (btCapsuleShape *)jarg1;
}

SWIGEXPORT btCapsuleShape * SWIGSTDCALL CSharp_btCapsuleShapeZ_SWIGUpcast(btCapsuleShapeZ *jarg1) {
    return (btCapsuleShape *)jarg1;
}

SWIGEXPORT btConvexInternalShape * SWIGSTDCALL CSharp_btCylinderShape_SWIGUpcast(btCylinderShape *jarg1) {
    return (btConvexInternalShape *)jarg1;
}

SWIGEXPORT btCylinderShape * SWIGSTDCALL CSharp_btCylinderShapeX_SWIGUpcast(btCylinderShapeX *jarg1) {
    return (btCylinderShape *)jarg1;
}

SWIGEXPORT btCylinderShape * SWIGSTDCALL CSharp_btCylinderShapeZ_SWIGUpcast(btCylinderShapeZ *jarg1) {
    return (btCylinderShape *)jarg1;
}

SWIGEXPORT btConvexInternalShape * SWIGSTDCALL CSharp_btConeShape_SWIGUpcast(btConeShape *jarg1) {
    return (btConvexInternalShape *)jarg1;
}

SWIGEXPORT btConeShape * SWIGSTDCALL CSharp_btConeShapeX_SWIGUpcast(btConeShapeX *jarg1) {
    return (btConeShape *)jarg1;
}

SWIGEXPORT btConeShape * SWIGSTDCALL CSharp_btConeShapeZ_SWIGUpcast(btConeShapeZ *jarg1) {
    return (btConeShape *)jarg1;
}

SWIGEXPORT btCollisionShape * SWIGSTDCALL CSharp_btConcaveShape_SWIGUpcast(btConcaveShape *jarg1) {
    return (btCollisionShape *)jarg1;
}

SWIGEXPORT btConcaveShape * SWIGSTDCALL CSharp_btStaticPlaneShape_SWIGUpcast(btStaticPlaneShape *jarg1) {
    return (btConcaveShape *)jarg1;
}

SWIGEXPORT btPolyhedralConvexAabbCachingShape * SWIGSTDCALL CSharp_btConvexHullShape_SWIGUpcast(btConvexHullShape *jarg1) {
    return (btPolyhedralConvexAabbCachingShape *)jarg1;
}

SWIGEXPORT btStridingMeshInterface * SWIGSTDCALL CSharp_btTriangleIndexVertexArray_SWIGUpcast(btTriangleIndexVertexArray *jarg1) {
    return (btStridingMeshInterface *)jarg1;
}

SWIGEXPORT btTriangleIndexVertexArray * SWIGSTDCALL CSharp_btTriangleMesh_SWIGUpcast(btTriangleMesh *jarg1) {
    return (btTriangleIndexVertexArray *)jarg1;
}

SWIGEXPORT btPolyhedralConvexAabbCachingShape * SWIGSTDCALL CSharp_btConvexTriangleMeshShape_SWIGUpcast(btConvexTriangleMeshShape *jarg1) {
    return (btPolyhedralConvexAabbCachingShape *)jarg1;
}

SWIGEXPORT btConcaveShape * SWIGSTDCALL CSharp_btTriangleMeshShape_SWIGUpcast(btTriangleMeshShape *jarg1) {
    return (btConcaveShape *)jarg1;
}

SWIGEXPORT btQuantizedBvh * SWIGSTDCALL CSharp_btOptimizedBvh_SWIGUpcast(btOptimizedBvh *jarg1) {
    return (btQuantizedBvh *)jarg1;
}

SWIGEXPORT btSerializer * SWIGSTDCALL CSharp_btDefaultSerializer_SWIGUpcast(btDefaultSerializer *jarg1) {
    return (btSerializer *)jarg1;
}

SWIGEXPORT btTriangleMeshShape * SWIGSTDCALL CSharp_btBvhTriangleMeshShape_SWIGUpcast(btBvhTriangleMeshShape *jarg1) {
    return (btTriangleMeshShape *)jarg1;
}

SWIGEXPORT btConcaveShape * SWIGSTDCALL CSharp_btScaledBvhTriangleMeshShape_SWIGUpcast(btScaledBvhTriangleMeshShape *jarg1) {
    return (btConcaveShape *)jarg1;
}

SWIGEXPORT btCollisionShape * SWIGSTDCALL CSharp_btCompoundShape_SWIGUpcast(btCompoundShape *jarg1) {
    return (btCollisionShape *)jarg1;
}

SWIGEXPORT btPolyhedralConvexAabbCachingShape * SWIGSTDCALL CSharp_btBU_Simplex1to4_SWIGUpcast(btBU_Simplex1to4 *jarg1) {
    return (btPolyhedralConvexAabbCachingShape *)jarg1;
}

SWIGEXPORT btConcaveShape * SWIGSTDCALL CSharp_btEmptyShape_SWIGUpcast(btEmptyShape *jarg1) {
    return (btConcaveShape *)jarg1;
}

SWIGEXPORT btConvexInternalAabbCachingShape * SWIGSTDCALL CSharp_btMultiSphereShape_SWIGUpcast(btMultiSphereShape *jarg1) {
    return (btConvexInternalAabbCachingShape *)jarg1;
}

SWIGEXPORT btConvexShape * SWIGSTDCALL CSharp_btUniformScalingShape_SWIGUpcast(btUniformScalingShape *jarg1) {
    return (btConvexShape *)jarg1;
}

SWIGEXPORT btCollisionAlgorithm * SWIGSTDCALL CSharp_btActivatingCollisionAlgorithm_SWIGUpcast(btActivatingCollisionAlgorithm *jarg1) {
    return (btCollisionAlgorithm *)jarg1;
}

SWIGEXPORT btCollisionAlgorithmCreateFunc * SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_CreateFunc_SWIGUpcast(btSphereSphereCollisionAlgorithm::CreateFunc *jarg1) {
    return (btCollisionAlgorithmCreateFunc *)jarg1;
}

SWIGEXPORT btActivatingCollisionAlgorithm * SWIGSTDCALL CSharp_btSphereSphereCollisionAlgorithm_SWIGUpcast(btSphereSphereCollisionAlgorithm *jarg1) {
    return (btActivatingCollisionAlgorithm *)jarg1;
}

SWIGEXPORT btCollisionConfiguration * SWIGSTDCALL CSharp_btDefaultCollisionConfiguration_SWIGUpcast(btDefaultCollisionConfiguration *jarg1) {
    return (btCollisionConfiguration *)jarg1;
}

SWIGEXPORT btBroadphaseProxy * SWIGSTDCALL CSharp_btSimpleBroadphaseProxy_SWIGUpcast(btSimpleBroadphaseProxy *jarg1) {
    return (btBroadphaseProxy *)jarg1;
}

SWIGEXPORT btBroadphaseInterface * SWIGSTDCALL CSharp_btSimpleBroadphase_SWIGUpcast(btSimpleBroadphase *jarg1) {
    return (btBroadphaseInterface *)jarg1;
}

SWIGEXPORT btBroadphaseProxy * SWIGSTDCALL CSharp_btDbvtProxy_SWIGUpcast(btDbvtProxy *jarg1) {
    return (btBroadphaseProxy *)jarg1;
}

SWIGEXPORT btBroadphaseInterface * SWIGSTDCALL CSharp_btDbvtBroadphase_SWIGUpcast(btDbvtBroadphase *jarg1) {
    return (btBroadphaseInterface *)jarg1;
}

SWIGEXPORT btBroadphaseProxy * SWIGSTDCALL CSharp_btMultiSapBroadphase_btMultiSapProxy_SWIGUpcast(btMultiSapBroadphase::btMultiSapProxy *jarg1) {
    return (btBroadphaseProxy *)jarg1;
}

SWIGEXPORT btBroadphaseInterface * SWIGSTDCALL CSharp_btMultiSapBroadphase_SWIGUpcast(btMultiSapBroadphase *jarg1) {
    return (btBroadphaseInterface *)jarg1;
}

SWIGEXPORT btMotionState * SWIGSTDCALL CSharp_btDefaultMotionState_SWIGUpcast(btDefaultMotionState *jarg1) {
    return (btMotionState *)jarg1;
}

SWIGEXPORT btContactSolverInfoData * SWIGSTDCALL CSharp_btContactSolverInfo_SWIGUpcast(btContactSolverInfo *jarg1) {
    return (btContactSolverInfoData *)jarg1;
}

SWIGEXPORT btCollisionWorld * SWIGSTDCALL CSharp_btDynamicsWorld_SWIGUpcast(btDynamicsWorld *jarg1) {
    return (btCollisionWorld *)jarg1;
}

SWIGEXPORT btDynamicsWorld * SWIGSTDCALL CSharp_btDiscreteDynamicsWorld_SWIGUpcast(btDiscreteDynamicsWorld *jarg1) {
    return (btDynamicsWorld *)jarg1;
}

SWIGEXPORT btDynamicsWorld * SWIGSTDCALL CSharp_btSimpleDynamicsWorld_SWIGUpcast(btSimpleDynamicsWorld *jarg1) {
    return (btDynamicsWorld *)jarg1;
}

SWIGEXPORT btCollisionObject * SWIGSTDCALL CSharp_btRigidBody_SWIGUpcast(btRigidBody *jarg1) {
    return (btCollisionObject *)jarg1;
}

SWIGEXPORT btTypedObject * SWIGSTDCALL CSharp_btTypedConstraint_SWIGUpcast(btTypedConstraint *jarg1) {
    return (btTypedObject *)jarg1;
}

SWIGEXPORT btTypedConstraint * SWIGSTDCALL CSharp_btPoint2PointConstraint_SWIGUpcast(btPoint2PointConstraint *jarg1) {
    return (btTypedConstraint *)jarg1;
}

SWIGEXPORT btTypedConstraint * SWIGSTDCALL CSharp_btHingeConstraint_SWIGUpcast(btHingeConstraint *jarg1) {
    return (btTypedConstraint *)jarg1;
}

SWIGEXPORT btTypedConstraint * SWIGSTDCALL CSharp_btConeTwistConstraint_SWIGUpcast(btConeTwistConstraint *jarg1) {
    return (btTypedConstraint *)jarg1;
}

SWIGEXPORT btTypedConstraint * SWIGSTDCALL CSharp_btGeneric6DofConstraint_SWIGUpcast(btGeneric6DofConstraint *jarg1) {
    return (btTypedConstraint *)jarg1;
}

SWIGEXPORT btTypedConstraint * SWIGSTDCALL CSharp_btSliderConstraint_SWIGUpcast(btSliderConstraint *jarg1) {
    return (btTypedConstraint *)jarg1;
}

SWIGEXPORT btGeneric6DofConstraint * SWIGSTDCALL CSharp_btGeneric6DofSpringConstraint_SWIGUpcast(btGeneric6DofSpringConstraint *jarg1) {
    return (btGeneric6DofConstraint *)jarg1;
}

SWIGEXPORT btGeneric6DofConstraint * SWIGSTDCALL CSharp_btUniversalConstraint_SWIGUpcast(btUniversalConstraint *jarg1) {
    return (btGeneric6DofConstraint *)jarg1;
}

SWIGEXPORT btGeneric6DofSpringConstraint * SWIGSTDCALL CSharp_btHinge2Constraint_SWIGUpcast(btHinge2Constraint *jarg1) {
    return (btGeneric6DofSpringConstraint *)jarg1;
}

SWIGEXPORT btTypedConstraint * SWIGSTDCALL CSharp_btGearConstraint_SWIGUpcast(btGearConstraint *jarg1) {
    return (btTypedConstraint *)jarg1;
}

SWIGEXPORT btTypedConstraint * SWIGSTDCALL CSharp_btFixedConstraint_SWIGUpcast(btFixedConstraint *jarg1) {
    return (btTypedConstraint *)jarg1;
}

SWIGEXPORT btConstraintSolver * SWIGSTDCALL CSharp_btSequentialImpulseConstraintSolver_SWIGUpcast(btSequentialImpulseConstraintSolver *jarg1) {
    return (btConstraintSolver *)jarg1;
}

SWIGEXPORT btActionInterface * SWIGSTDCALL CSharp_btRaycastVehicle_SWIGUpcast(btRaycastVehicle *jarg1) {
    return (btActionInterface *)jarg1;
}

SWIGEXPORT btVehicleRaycaster * SWIGSTDCALL CSharp_btDefaultVehicleRaycaster_SWIGUpcast(btDefaultVehicleRaycaster *jarg1) {
    return (btVehicleRaycaster *)jarg1;
}

#ifdef __cplusplus
}
#endif

