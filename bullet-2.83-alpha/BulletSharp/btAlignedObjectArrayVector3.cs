//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btAlignedObjectArrayVector3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btAlignedObjectArrayVector3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btAlignedObjectArrayVector3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btAlignedObjectArrayVector3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btAlignedObjectArrayVector3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public btAlignedObjectArrayVector3() : this(BulletPINVOKE.new_btAlignedObjectArrayVector3__SWIG_0(), true) {
  }

  public btAlignedObjectArrayVector3(btAlignedObjectArrayVector3 otherArray) : this(BulletPINVOKE.new_btAlignedObjectArrayVector3__SWIG_1(btAlignedObjectArrayVector3.getCPtr(otherArray)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int size() {
    int ret = BulletPINVOKE.btAlignedObjectArrayVector3_size(swigCPtr);
    return ret;
  }

  public btVector3 at(int n) {
    btVector3 ret = new btVector3(BulletPINVOKE.btAlignedObjectArrayVector3_at__SWIG_0(swigCPtr, n), false);
    return ret;
  }

  public void clear() {
    BulletPINVOKE.btAlignedObjectArrayVector3_clear(swigCPtr);
  }

  public void pop_back() {
    BulletPINVOKE.btAlignedObjectArrayVector3_pop_back(swigCPtr);
  }

  public void resizeNoInitialize(int newsize) {
    BulletPINVOKE.btAlignedObjectArrayVector3_resizeNoInitialize(swigCPtr, newsize);
  }

  public void resize(int newsize, btVector3 fillData) {
    BulletPINVOKE.btAlignedObjectArrayVector3_resize__SWIG_0(swigCPtr, newsize, btVector3.getCPtr(fillData));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize(int newsize) {
    BulletPINVOKE.btAlignedObjectArrayVector3_resize__SWIG_1(swigCPtr, newsize);
  }

  public btVector3 expandNonInitializing() {
    btVector3 ret = new btVector3(BulletPINVOKE.btAlignedObjectArrayVector3_expandNonInitializing(swigCPtr), false);
    return ret;
  }

  public btVector3 expand(btVector3 fillValue) {
    btVector3 ret = new btVector3(BulletPINVOKE.btAlignedObjectArrayVector3_expand__SWIG_0(swigCPtr, btVector3.getCPtr(fillValue)), false);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btVector3 expand() {
    btVector3 ret = new btVector3(BulletPINVOKE.btAlignedObjectArrayVector3_expand__SWIG_1(swigCPtr), false);
    return ret;
  }

  public void push_back(btVector3 _Val) {
    BulletPINVOKE.btAlignedObjectArrayVector3_push_back(swigCPtr, btVector3.getCPtr(_Val));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int capacity() {
    int ret = BulletPINVOKE.btAlignedObjectArrayVector3_capacity(swigCPtr);
    return ret;
  }

  public void reserve(int _Count) {
    BulletPINVOKE.btAlignedObjectArrayVector3_reserve(swigCPtr, _Count);
  }

  public class less : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal less(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(less obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~less() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btAlignedObjectArrayVector3_less(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public less() : this(BulletPINVOKE.new_btAlignedObjectArrayVector3_less(), true) {
    }
  
  }

  public void swap(int index0, int index1) {
    BulletPINVOKE.btAlignedObjectArrayVector3_swap(swigCPtr, index0, index1);
  }

  public int findBinarySearch(btVector3 key) {
    int ret = BulletPINVOKE.btAlignedObjectArrayVector3_findBinarySearch(swigCPtr, btVector3.getCPtr(key));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int findLinearSearch(btVector3 key) {
    int ret = BulletPINVOKE.btAlignedObjectArrayVector3_findLinearSearch(swigCPtr, btVector3.getCPtr(key));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void remove(btVector3 key) {
    BulletPINVOKE.btAlignedObjectArrayVector3_remove(swigCPtr, btVector3.getCPtr(key));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void initializeFromBuffer(SWIGTYPE_p_void buffer, int size, int capacity) {
    BulletPINVOKE.btAlignedObjectArrayVector3_initializeFromBuffer(swigCPtr, SWIGTYPE_p_void.getCPtr(buffer), size, capacity);
  }

  public void copyFromArray(btAlignedObjectArrayVector3 otherArray) {
    BulletPINVOKE.btAlignedObjectArrayVector3_copyFromArray(swigCPtr, btAlignedObjectArrayVector3.getCPtr(otherArray));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
