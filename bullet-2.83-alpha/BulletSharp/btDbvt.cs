//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btDbvt : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btDbvt(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btDbvt obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btDbvt() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btDbvt(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class sStkNN : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal sStkNN(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(sStkNN obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~sStkNN() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDbvt_sStkNN(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public btDbvtNode a {
      set {
        BulletPINVOKE.btDbvt_sStkNN_a_set(swigCPtr, btDbvtNode.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_sStkNN_a_get(swigCPtr);
        btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
        return ret;
      } 
    }
  
    public btDbvtNode b {
      set {
        BulletPINVOKE.btDbvt_sStkNN_b_set(swigCPtr, btDbvtNode.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_sStkNN_b_get(swigCPtr);
        btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
        return ret;
      } 
    }
  
    public sStkNN() : this(BulletPINVOKE.new_btDbvt_sStkNN__SWIG_0(), true) {
    }
  
    public sStkNN(btDbvtNode na, btDbvtNode nb) : this(BulletPINVOKE.new_btDbvt_sStkNN__SWIG_1(btDbvtNode.getCPtr(na), btDbvtNode.getCPtr(nb)), true) {
    }
  
  }

  public class sStkNP : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal sStkNP(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(sStkNP obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~sStkNP() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDbvt_sStkNP(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public btDbvtNode node {
      set {
        BulletPINVOKE.btDbvt_sStkNP_node_set(swigCPtr, btDbvtNode.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_sStkNP_node_get(swigCPtr);
        btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
        return ret;
      } 
    }
  
    public int mask {
      set {
        BulletPINVOKE.btDbvt_sStkNP_mask_set(swigCPtr, value);
      } 
      get {
        int ret = BulletPINVOKE.btDbvt_sStkNP_mask_get(swigCPtr);
        return ret;
      } 
    }
  
    public sStkNP(btDbvtNode n, uint m) : this(BulletPINVOKE.new_btDbvt_sStkNP(btDbvtNode.getCPtr(n), m), true) {
    }
  
  }

  public class sStkNPS : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal sStkNPS(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(sStkNPS obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~sStkNPS() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDbvt_sStkNPS(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public btDbvtNode node {
      set {
        BulletPINVOKE.btDbvt_sStkNPS_node_set(swigCPtr, btDbvtNode.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_sStkNPS_node_get(swigCPtr);
        btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
        return ret;
      } 
    }
  
    public int mask {
      set {
        BulletPINVOKE.btDbvt_sStkNPS_mask_set(swigCPtr, value);
      } 
      get {
        int ret = BulletPINVOKE.btDbvt_sStkNPS_mask_get(swigCPtr);
        return ret;
      } 
    }
  
    public float value {
      set {
        BulletPINVOKE.btDbvt_sStkNPS_value_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btDbvt_sStkNPS_value_get(swigCPtr);
        return ret;
      } 
    }
  
    public sStkNPS() : this(BulletPINVOKE.new_btDbvt_sStkNPS__SWIG_0(), true) {
    }
  
    public sStkNPS(btDbvtNode n, uint m, float v) : this(BulletPINVOKE.new_btDbvt_sStkNPS__SWIG_1(btDbvtNode.getCPtr(n), m, v), true) {
    }
  
  }

  public class sStkCLN : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal sStkCLN(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(sStkCLN obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~sStkCLN() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDbvt_sStkCLN(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public btDbvtNode node {
      set {
        BulletPINVOKE.btDbvt_sStkCLN_node_set(swigCPtr, btDbvtNode.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_sStkCLN_node_get(swigCPtr);
        btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
        return ret;
      } 
    }
  
    public btDbvtNode parent {
      set {
        BulletPINVOKE.btDbvt_sStkCLN_parent_set(swigCPtr, btDbvtNode.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_sStkCLN_parent_get(swigCPtr);
        btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
        return ret;
      } 
    }
  
    public sStkCLN(btDbvtNode n, btDbvtNode p) : this(BulletPINVOKE.new_btDbvt_sStkCLN(btDbvtNode.getCPtr(n), btDbvtNode.getCPtr(p)), true) {
    }
  
  }

  public class ICollide : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ICollide(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ICollide obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ICollide() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDbvt_ICollide(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public virtual void Process(btDbvtNode arg0, btDbvtNode arg1) {
      BulletPINVOKE.btDbvt_ICollide_Process__SWIG_0(swigCPtr, btDbvtNode.getCPtr(arg0), btDbvtNode.getCPtr(arg1));
    }
  
    public virtual void Process(btDbvtNode arg0) {
      BulletPINVOKE.btDbvt_ICollide_Process__SWIG_1(swigCPtr, btDbvtNode.getCPtr(arg0));
    }
  
    public virtual void Process(btDbvtNode n, float arg1) {
      BulletPINVOKE.btDbvt_ICollide_Process__SWIG_2(swigCPtr, btDbvtNode.getCPtr(n), arg1);
    }
  
    public virtual bool Descent(btDbvtNode arg0) {
      bool ret = BulletPINVOKE.btDbvt_ICollide_Descent(swigCPtr, btDbvtNode.getCPtr(arg0));
      return ret;
    }
  
    public virtual bool AllLeaves(btDbvtNode arg0) {
      bool ret = BulletPINVOKE.btDbvt_ICollide_AllLeaves(swigCPtr, btDbvtNode.getCPtr(arg0));
      return ret;
    }
  
    public ICollide() : this(BulletPINVOKE.new_btDbvt_ICollide(), true) {
    }
  
  }

  public class IWriter : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal IWriter(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IWriter obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~IWriter() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDbvt_IWriter(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public virtual void Prepare(btDbvtNode root, int numnodes) {
      BulletPINVOKE.btDbvt_IWriter_Prepare(swigCPtr, btDbvtNode.getCPtr(root), numnodes);
    }
  
    public virtual void WriteNode(btDbvtNode arg0, int index, int parent, int child0, int child1) {
      BulletPINVOKE.btDbvt_IWriter_WriteNode(swigCPtr, btDbvtNode.getCPtr(arg0), index, parent, child0, child1);
    }
  
    public virtual void WriteLeaf(btDbvtNode arg0, int index, int parent) {
      BulletPINVOKE.btDbvt_IWriter_WriteLeaf(swigCPtr, btDbvtNode.getCPtr(arg0), index, parent);
    }
  
  }

  public class IClone : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal IClone(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IClone obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~IClone() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDbvt_IClone(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public virtual void CloneLeaf(btDbvtNode arg0) {
      BulletPINVOKE.btDbvt_IClone_CloneLeaf(swigCPtr, btDbvtNode.getCPtr(arg0));
    }
  
    public IClone() : this(BulletPINVOKE.new_btDbvt_IClone(), true) {
    }
  
  }

  public btDbvtNode m_root {
    set {
      BulletPINVOKE.btDbvt_m_root_set(swigCPtr, btDbvtNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_m_root_get(swigCPtr);
      btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
      return ret;
    } 
  }

  public btDbvtNode m_free {
    set {
      BulletPINVOKE.btDbvt_m_free_set(swigCPtr, btDbvtNode.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_m_free_get(swigCPtr);
      btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
      return ret;
    } 
  }

  public int m_lkhd {
    set {
      BulletPINVOKE.btDbvt_m_lkhd_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvt_m_lkhd_get(swigCPtr);
      return ret;
    } 
  }

  public int m_leaves {
    set {
      BulletPINVOKE.btDbvt_m_leaves_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvt_m_leaves_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_opath {
    set {
      BulletPINVOKE.btDbvt_m_opath_set(swigCPtr, value);
    } 
    get {
      uint ret = BulletPINVOKE.btDbvt_m_opath_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t m_stkStack {
    set {
      BulletPINVOKE.btDbvt_m_stkStack_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_m_stkStack_get(swigCPtr);
      SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t m_rayTestStack {
    set {
      BulletPINVOKE.btDbvt_m_rayTestStack_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_m_rayTestStack_get(swigCPtr);
      SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t(cPtr, false);
      return ret;
    } 
  }

  public btDbvt() : this(BulletPINVOKE.new_btDbvt(), true) {
  }

  public void clear() {
    BulletPINVOKE.btDbvt_clear(swigCPtr);
  }

  public bool empty() {
    bool ret = BulletPINVOKE.btDbvt_empty(swigCPtr);
    return ret;
  }

  public void optimizeBottomUp() {
    BulletPINVOKE.btDbvt_optimizeBottomUp(swigCPtr);
  }

  public void optimizeTopDown(int bu_treshold) {
    BulletPINVOKE.btDbvt_optimizeTopDown__SWIG_0(swigCPtr, bu_treshold);
  }

  public void optimizeTopDown() {
    BulletPINVOKE.btDbvt_optimizeTopDown__SWIG_1(swigCPtr);
  }

  public void optimizeIncremental(int passes) {
    BulletPINVOKE.btDbvt_optimizeIncremental(swigCPtr, passes);
  }

  public btDbvtNode insert(btDbvtAabbMm box, SWIGTYPE_p_void data) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDbvt_insert(swigCPtr, btDbvtAabbMm.getCPtr(box), SWIGTYPE_p_void.getCPtr(data));
    btDbvtNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvtNode(cPtr, false);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void update(btDbvtNode leaf, int lookahead) {
    BulletPINVOKE.btDbvt_update__SWIG_0(swigCPtr, btDbvtNode.getCPtr(leaf), lookahead);
  }

  public void update(btDbvtNode leaf) {
    BulletPINVOKE.btDbvt_update__SWIG_1(swigCPtr, btDbvtNode.getCPtr(leaf));
  }

  public void update(btDbvtNode leaf, btDbvtAabbMm volume) {
    BulletPINVOKE.btDbvt_update__SWIG_2(swigCPtr, btDbvtNode.getCPtr(leaf), btDbvtAabbMm.getCPtr(volume));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool update(btDbvtNode leaf, btDbvtAabbMm volume, btVector3 velocity, float margin) {
    bool ret = BulletPINVOKE.btDbvt_update__SWIG_3(swigCPtr, btDbvtNode.getCPtr(leaf), btDbvtAabbMm.getCPtr(volume), btVector3.getCPtr(velocity), margin);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool update(btDbvtNode leaf, btDbvtAabbMm volume, btVector3 velocity) {
    bool ret = BulletPINVOKE.btDbvt_update__SWIG_4(swigCPtr, btDbvtNode.getCPtr(leaf), btDbvtAabbMm.getCPtr(volume), btVector3.getCPtr(velocity));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool update(btDbvtNode leaf, btDbvtAabbMm volume, float margin) {
    bool ret = BulletPINVOKE.btDbvt_update__SWIG_5(swigCPtr, btDbvtNode.getCPtr(leaf), btDbvtAabbMm.getCPtr(volume), margin);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void remove(btDbvtNode leaf) {
    BulletPINVOKE.btDbvt_remove(swigCPtr, btDbvtNode.getCPtr(leaf));
  }

  public void write(btDbvt.IWriter iwriter) {
    BulletPINVOKE.btDbvt_write(swigCPtr, btDbvt.IWriter.getCPtr(iwriter));
  }

  public void clone(btDbvt dest, btDbvt.IClone iclone) {
    BulletPINVOKE.btDbvt_clone__SWIG_0(swigCPtr, btDbvt.getCPtr(dest), btDbvt.IClone.getCPtr(iclone));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clone(btDbvt dest) {
    BulletPINVOKE.btDbvt_clone__SWIG_1(swigCPtr, btDbvt.getCPtr(dest));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int maxdepth(btDbvtNode node) {
    int ret = BulletPINVOKE.btDbvt_maxdepth(btDbvtNode.getCPtr(node));
    return ret;
  }

  public static int countLeaves(btDbvtNode node) {
    int ret = BulletPINVOKE.btDbvt_countLeaves(btDbvtNode.getCPtr(node));
    return ret;
  }

  public static void extractLeaves(btDbvtNode node, SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t leaves) {
    BulletPINVOKE.btDbvt_extractLeaves(btDbvtNode.getCPtr(node), SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t.getCPtr(leaves));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void benchmark() {
    BulletPINVOKE.btDbvt_benchmark();
  }

  public static void enumNodes(btDbvtNode root, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_enumNodes(btDbvtNode.getCPtr(root), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void enumLeaves(btDbvtNode root, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_enumLeaves(btDbvtNode.getCPtr(root), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void collideTT(btDbvtNode root0, btDbvtNode root1, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_collideTT(swigCPtr, btDbvtNode.getCPtr(root0), btDbvtNode.getCPtr(root1), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void collideTTpersistentStack(btDbvtNode root0, btDbvtNode root1, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_collideTTpersistentStack(swigCPtr, btDbvtNode.getCPtr(root0), btDbvtNode.getCPtr(root1), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void collideTV(btDbvtNode root, btDbvtAabbMm volume, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_collideTV(swigCPtr, btDbvtNode.getCPtr(root), btDbvtAabbMm.getCPtr(volume), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void rayTest(btDbvtNode root, btVector3 rayFrom, btVector3 rayTo, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_rayTest(btDbvtNode.getCPtr(root), btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void rayTestInternal(btDbvtNode root, btVector3 rayFrom, btVector3 rayTo, btVector3 rayDirectionInverse, SWIGTYPE_p_unsigned_int signs, float lambda_max, btVector3 aabbMin, btVector3 aabbMax, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_rayTestInternal(swigCPtr, btDbvtNode.getCPtr(root), btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btVector3.getCPtr(rayDirectionInverse), SWIGTYPE_p_unsigned_int.getCPtr(signs), lambda_max, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void collideKDOP(btDbvtNode root, btVector3 normals, SWIGTYPE_p_float offsets, int count, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_collideKDOP(btDbvtNode.getCPtr(root), btVector3.getCPtr(normals), SWIGTYPE_p_float.getCPtr(offsets), count, btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void collideOCL(btDbvtNode root, btVector3 normals, SWIGTYPE_p_float offsets, btVector3 sortaxis, int count, btDbvt.ICollide policy, bool fullsort) {
    BulletPINVOKE.btDbvt_collideOCL__SWIG_0(btDbvtNode.getCPtr(root), btVector3.getCPtr(normals), SWIGTYPE_p_float.getCPtr(offsets), btVector3.getCPtr(sortaxis), count, btDbvt.ICollide.getCPtr(policy), fullsort);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void collideOCL(btDbvtNode root, btVector3 normals, SWIGTYPE_p_float offsets, btVector3 sortaxis, int count, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_collideOCL__SWIG_1(btDbvtNode.getCPtr(root), btVector3.getCPtr(normals), SWIGTYPE_p_float.getCPtr(offsets), btVector3.getCPtr(sortaxis), count, btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void collideTU(btDbvtNode root, btDbvt.ICollide policy) {
    BulletPINVOKE.btDbvt_collideTU(btDbvtNode.getCPtr(root), btDbvt.ICollide.getCPtr(policy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int nearest(SWIGTYPE_p_int i, btDbvt.sStkNPS a, float v, int l, int h) {
    int ret = BulletPINVOKE.btDbvt_nearest(SWIGTYPE_p_int.getCPtr(i), btDbvt.sStkNPS.getCPtr(a), v, l, h);
    return ret;
  }

  public static int allocate(SWIGTYPE_p_btAlignedObjectArrayT_int_t ifree, SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t stock, btDbvt.sStkNPS value) {
    int ret = BulletPINVOKE.btDbvt_allocate(SWIGTYPE_p_btAlignedObjectArrayT_int_t.getCPtr(ifree), SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t.getCPtr(stock), btDbvt.sStkNPS.getCPtr(value));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int SIMPLE_STACKSIZE = BulletPINVOKE.btDbvt_SIMPLE_STACKSIZE_get();
  public static readonly int DOUBLE_STACKSIZE = BulletPINVOKE.btDbvt_DOUBLE_STACKSIZE_get();

}

}
