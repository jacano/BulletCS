//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btManifoldPoint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btManifoldPoint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btManifoldPoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btManifoldPoint() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btManifoldPoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public btManifoldPoint() : this(BulletPINVOKE.new_btManifoldPoint__SWIG_0(), true) {
  }

  public btManifoldPoint(btVector3 pointA, btVector3 pointB, btVector3 normal, float distance) : this(BulletPINVOKE.new_btManifoldPoint__SWIG_1(btVector3.getCPtr(pointA), btVector3.getCPtr(pointB), btVector3.getCPtr(normal), distance), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 m_localPointA {
    set {
      BulletPINVOKE.btManifoldPoint_m_localPointA_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_localPointA_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_localPointB {
    set {
      BulletPINVOKE.btManifoldPoint_m_localPointB_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_localPointB_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_positionWorldOnB {
    set {
      BulletPINVOKE.btManifoldPoint_m_positionWorldOnB_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_positionWorldOnB_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_positionWorldOnA {
    set {
      BulletPINVOKE.btManifoldPoint_m_positionWorldOnA_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_positionWorldOnA_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_normalWorldOnB {
    set {
      BulletPINVOKE.btManifoldPoint_m_normalWorldOnB_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_normalWorldOnB_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public float m_distance1 {
    set {
      BulletPINVOKE.btManifoldPoint_m_distance1_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_distance1_get(swigCPtr);
      return ret;
    } 
  }

  public float m_combinedFriction {
    set {
      BulletPINVOKE.btManifoldPoint_m_combinedFriction_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_combinedFriction_get(swigCPtr);
      return ret;
    } 
  }

  public float m_combinedRollingFriction {
    set {
      BulletPINVOKE.btManifoldPoint_m_combinedRollingFriction_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_combinedRollingFriction_get(swigCPtr);
      return ret;
    } 
  }

  public float m_combinedRestitution {
    set {
      BulletPINVOKE.btManifoldPoint_m_combinedRestitution_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_combinedRestitution_get(swigCPtr);
      return ret;
    } 
  }

  public int m_partId0 {
    set {
      BulletPINVOKE.btManifoldPoint_m_partId0_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btManifoldPoint_m_partId0_get(swigCPtr);
      return ret;
    } 
  }

  public int m_partId1 {
    set {
      BulletPINVOKE.btManifoldPoint_m_partId1_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btManifoldPoint_m_partId1_get(swigCPtr);
      return ret;
    } 
  }

  public int m_index0 {
    set {
      BulletPINVOKE.btManifoldPoint_m_index0_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btManifoldPoint_m_index0_get(swigCPtr);
      return ret;
    } 
  }

  public int m_index1 {
    set {
      BulletPINVOKE.btManifoldPoint_m_index1_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btManifoldPoint_m_index1_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void m_userPersistentData {
    set {
      BulletPINVOKE.btManifoldPoint_m_userPersistentData_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_userPersistentData_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public bool m_lateralFrictionInitialized {
    set {
      BulletPINVOKE.btManifoldPoint_m_lateralFrictionInitialized_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletPINVOKE.btManifoldPoint_m_lateralFrictionInitialized_get(swigCPtr);
      return ret;
    } 
  }

  public float m_appliedImpulse {
    set {
      BulletPINVOKE.btManifoldPoint_m_appliedImpulse_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_appliedImpulse_get(swigCPtr);
      return ret;
    } 
  }

  public float m_appliedImpulseLateral1 {
    set {
      BulletPINVOKE.btManifoldPoint_m_appliedImpulseLateral1_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_appliedImpulseLateral1_get(swigCPtr);
      return ret;
    } 
  }

  public float m_appliedImpulseLateral2 {
    set {
      BulletPINVOKE.btManifoldPoint_m_appliedImpulseLateral2_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_appliedImpulseLateral2_get(swigCPtr);
      return ret;
    } 
  }

  public float m_contactMotion1 {
    set {
      BulletPINVOKE.btManifoldPoint_m_contactMotion1_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_contactMotion1_get(swigCPtr);
      return ret;
    } 
  }

  public float m_contactMotion2 {
    set {
      BulletPINVOKE.btManifoldPoint_m_contactMotion2_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_contactMotion2_get(swigCPtr);
      return ret;
    } 
  }

  public float m_contactCFM1 {
    set {
      BulletPINVOKE.btManifoldPoint_m_contactCFM1_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_contactCFM1_get(swigCPtr);
      return ret;
    } 
  }

  public float m_contactCFM2 {
    set {
      BulletPINVOKE.btManifoldPoint_m_contactCFM2_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btManifoldPoint_m_contactCFM2_get(swigCPtr);
      return ret;
    } 
  }

  public int m_lifeTime {
    set {
      BulletPINVOKE.btManifoldPoint_m_lifeTime_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btManifoldPoint_m_lifeTime_get(swigCPtr);
      return ret;
    } 
  }

  public btVector3 m_lateralFrictionDir1 {
    set {
      BulletPINVOKE.btManifoldPoint_m_lateralFrictionDir1_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_lateralFrictionDir1_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_lateralFrictionDir2 {
    set {
      BulletPINVOKE.btManifoldPoint_m_lateralFrictionDir2_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btManifoldPoint_m_lateralFrictionDir2_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public float getDistance() {
    float ret = BulletPINVOKE.btManifoldPoint_getDistance(swigCPtr);
    return ret;
  }

  public int getLifeTime() {
    int ret = BulletPINVOKE.btManifoldPoint_getLifeTime(swigCPtr);
    return ret;
  }

  public btVector3 getPositionWorldOnA() {
    btVector3 ret = new btVector3(BulletPINVOKE.btManifoldPoint_getPositionWorldOnA(swigCPtr), false);
    return ret;
  }

  public btVector3 getPositionWorldOnB() {
    btVector3 ret = new btVector3(BulletPINVOKE.btManifoldPoint_getPositionWorldOnB(swigCPtr), false);
    return ret;
  }

  public void setDistance(float dist) {
    BulletPINVOKE.btManifoldPoint_setDistance(swigCPtr, dist);
  }

  public float getAppliedImpulse() {
    float ret = BulletPINVOKE.btManifoldPoint_getAppliedImpulse(swigCPtr);
    return ret;
  }

}

}
