//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btRaycastVehicle : btActionInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btRaycastVehicle(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btRaycastVehicle_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btRaycastVehicle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btRaycastVehicle() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btRaycastVehicle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class btVehicleTuning : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal btVehicleTuning(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btVehicleTuning obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~btVehicleTuning() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btRaycastVehicle_btVehicleTuning(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public btVehicleTuning() : this(BulletPINVOKE.new_btRaycastVehicle_btVehicleTuning(), true) {
    }
  
    public float m_suspensionStiffness {
      set {
        BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_suspensionStiffness_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_suspensionStiffness_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_suspensionCompression {
      set {
        BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_suspensionCompression_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_suspensionCompression_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_suspensionDamping {
      set {
        BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_suspensionDamping_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_suspensionDamping_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_maxSuspensionTravelCm {
      set {
        BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_maxSuspensionTravelCm_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_maxSuspensionTravelCm_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_frictionSlip {
      set {
        BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_frictionSlip_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_frictionSlip_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_maxSuspensionForce {
      set {
        BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_maxSuspensionForce_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btRaycastVehicle_btVehicleTuning_m_maxSuspensionForce_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public btRaycastVehicle(btRaycastVehicle.btVehicleTuning tuning, btRigidBody chassis, btVehicleRaycaster raycaster) : this(BulletPINVOKE.new_btRaycastVehicle(btRaycastVehicle.btVehicleTuning.getCPtr(tuning), btRigidBody.getCPtr(chassis), btVehicleRaycaster.getCPtr(raycaster)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void updateAction(btCollisionWorld collisionWorld, float step) {
    BulletPINVOKE.btRaycastVehicle_updateAction(swigCPtr, btCollisionWorld.getCPtr(collisionWorld), step);
  }

  public override void debugDraw(btIDebugDraw debugDrawer) {
    BulletPINVOKE.btRaycastVehicle_debugDraw(swigCPtr, btIDebugDraw.getCPtr(debugDrawer));
  }

  public btTransform getChassisWorldTransform() {
    btTransform ret = new btTransform(BulletPINVOKE.btRaycastVehicle_getChassisWorldTransform(swigCPtr), false);
    return ret;
  }

  public float rayCast(btWheelInfo wheel) {
    float ret = BulletPINVOKE.btRaycastVehicle_rayCast(swigCPtr, btWheelInfo.getCPtr(wheel));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void updateVehicle(float step) {
    BulletPINVOKE.btRaycastVehicle_updateVehicle(swigCPtr, step);
  }

  public void resetSuspension() {
    BulletPINVOKE.btRaycastVehicle_resetSuspension(swigCPtr);
  }

  public float getSteeringValue(int wheel) {
    float ret = BulletPINVOKE.btRaycastVehicle_getSteeringValue(swigCPtr, wheel);
    return ret;
  }

  public void setSteeringValue(float steering, int wheel) {
    BulletPINVOKE.btRaycastVehicle_setSteeringValue(swigCPtr, steering, wheel);
  }

  public void applyEngineForce(float force, int wheel) {
    BulletPINVOKE.btRaycastVehicle_applyEngineForce(swigCPtr, force, wheel);
  }

  public btTransform getWheelTransformWS(int wheelIndex) {
    btTransform ret = new btTransform(BulletPINVOKE.btRaycastVehicle_getWheelTransformWS(swigCPtr, wheelIndex), false);
    return ret;
  }

  public void updateWheelTransform(int wheelIndex, bool interpolatedTransform) {
    BulletPINVOKE.btRaycastVehicle_updateWheelTransform__SWIG_0(swigCPtr, wheelIndex, interpolatedTransform);
  }

  public void updateWheelTransform(int wheelIndex) {
    BulletPINVOKE.btRaycastVehicle_updateWheelTransform__SWIG_1(swigCPtr, wheelIndex);
  }

  public btWheelInfo addWheel(btVector3 connectionPointCS0, btVector3 wheelDirectionCS0, btVector3 wheelAxleCS, float suspensionRestLength, float wheelRadius, btRaycastVehicle.btVehicleTuning tuning, bool isFrontWheel) {
    btWheelInfo ret = new btWheelInfo(BulletPINVOKE.btRaycastVehicle_addWheel(swigCPtr, btVector3.getCPtr(connectionPointCS0), btVector3.getCPtr(wheelDirectionCS0), btVector3.getCPtr(wheelAxleCS), suspensionRestLength, wheelRadius, btRaycastVehicle.btVehicleTuning.getCPtr(tuning), isFrontWheel), false);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getNumWheels() {
    int ret = BulletPINVOKE.btRaycastVehicle_getNumWheels(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t m_wheelInfo {
    set {
      BulletPINVOKE.btRaycastVehicle_m_wheelInfo_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btRaycastVehicle_m_wheelInfo_get(swigCPtr);
      SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t(cPtr, false);
      return ret;
    } 
  }

  public btWheelInfo getWheelInfo(int index) {
    btWheelInfo ret = new btWheelInfo(BulletPINVOKE.btRaycastVehicle_getWheelInfo__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public void updateWheelTransformsWS(btWheelInfo wheel, bool interpolatedTransform) {
    BulletPINVOKE.btRaycastVehicle_updateWheelTransformsWS__SWIG_0(swigCPtr, btWheelInfo.getCPtr(wheel), interpolatedTransform);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateWheelTransformsWS(btWheelInfo wheel) {
    BulletPINVOKE.btRaycastVehicle_updateWheelTransformsWS__SWIG_1(swigCPtr, btWheelInfo.getCPtr(wheel));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBrake(float brake, int wheelIndex) {
    BulletPINVOKE.btRaycastVehicle_setBrake(swigCPtr, brake, wheelIndex);
  }

  public void setPitchControl(float pitch) {
    BulletPINVOKE.btRaycastVehicle_setPitchControl(swigCPtr, pitch);
  }

  public void updateSuspension(float deltaTime) {
    BulletPINVOKE.btRaycastVehicle_updateSuspension(swigCPtr, deltaTime);
  }

  public virtual void updateFriction(float timeStep) {
    BulletPINVOKE.btRaycastVehicle_updateFriction(swigCPtr, timeStep);
  }

  public btRigidBody getRigidBody() {
    global::System.IntPtr cPtr = BulletPINVOKE.btRaycastVehicle_getRigidBody__SWIG_0(swigCPtr);
    btRigidBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
    return ret;
  }

  public int getRightAxis() {
    int ret = BulletPINVOKE.btRaycastVehicle_getRightAxis(swigCPtr);
    return ret;
  }

  public int getUpAxis() {
    int ret = BulletPINVOKE.btRaycastVehicle_getUpAxis(swigCPtr);
    return ret;
  }

  public int getForwardAxis() {
    int ret = BulletPINVOKE.btRaycastVehicle_getForwardAxis(swigCPtr);
    return ret;
  }

  public btVector3 getForwardVector() {
    btVector3 ret = new btVector3(BulletPINVOKE.btRaycastVehicle_getForwardVector(swigCPtr), true);
    return ret;
  }

  public float getCurrentSpeedKmHour() {
    float ret = BulletPINVOKE.btRaycastVehicle_getCurrentSpeedKmHour(swigCPtr);
    return ret;
  }

  public virtual void setCoordinateSystem(int rightIndex, int upIndex, int forwardIndex) {
    BulletPINVOKE.btRaycastVehicle_setCoordinateSystem(swigCPtr, rightIndex, upIndex, forwardIndex);
  }

  public int getUserConstraintType() {
    int ret = BulletPINVOKE.btRaycastVehicle_getUserConstraintType(swigCPtr);
    return ret;
  }

  public void setUserConstraintType(int userConstraintType) {
    BulletPINVOKE.btRaycastVehicle_setUserConstraintType(swigCPtr, userConstraintType);
  }

  public void setUserConstraintId(int uid) {
    BulletPINVOKE.btRaycastVehicle_setUserConstraintId(swigCPtr, uid);
  }

  public int getUserConstraintId() {
    int ret = BulletPINVOKE.btRaycastVehicle_getUserConstraintId(swigCPtr);
    return ret;
  }

}

}
