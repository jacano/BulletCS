//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btSolverBody : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btSolverBody(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btSolverBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSolverBody() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btSolverBody(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public btTransform m_worldTransform {
    set {
      BulletPINVOKE.btSolverBody_m_worldTransform_set(swigCPtr, btTransform.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_worldTransform_get(swigCPtr);
      btTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new btTransform(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_deltaLinearVelocity {
    set {
      BulletPINVOKE.btSolverBody_m_deltaLinearVelocity_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_deltaLinearVelocity_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_deltaAngularVelocity {
    set {
      BulletPINVOKE.btSolverBody_m_deltaAngularVelocity_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_deltaAngularVelocity_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_angularFactor {
    set {
      BulletPINVOKE.btSolverBody_m_angularFactor_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_angularFactor_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_linearFactor {
    set {
      BulletPINVOKE.btSolverBody_m_linearFactor_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_linearFactor_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_invMass {
    set {
      BulletPINVOKE.btSolverBody_m_invMass_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_invMass_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_pushVelocity {
    set {
      BulletPINVOKE.btSolverBody_m_pushVelocity_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_pushVelocity_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_turnVelocity {
    set {
      BulletPINVOKE.btSolverBody_m_turnVelocity_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_turnVelocity_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_linearVelocity {
    set {
      BulletPINVOKE.btSolverBody_m_linearVelocity_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_linearVelocity_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_angularVelocity {
    set {
      BulletPINVOKE.btSolverBody_m_angularVelocity_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_angularVelocity_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_externalForceImpulse {
    set {
      BulletPINVOKE.btSolverBody_m_externalForceImpulse_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_externalForceImpulse_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_externalTorqueImpulse {
    set {
      BulletPINVOKE.btSolverBody_m_externalTorqueImpulse_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_externalTorqueImpulse_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btRigidBody m_originalBody {
    set {
      BulletPINVOKE.btSolverBody_m_originalBody_set(swigCPtr, btRigidBody.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverBody_m_originalBody_get(swigCPtr);
      btRigidBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new btRigidBody(cPtr, false);
      return ret;
    } 
  }

  public void setWorldTransform(btTransform worldTransform) {
    BulletPINVOKE.btSolverBody_setWorldTransform(swigCPtr, btTransform.getCPtr(worldTransform));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btTransform getWorldTransform() {
    btTransform ret = new btTransform(BulletPINVOKE.btSolverBody_getWorldTransform(swigCPtr), false);
    return ret;
  }

  public void getVelocityInLocalPointNoDelta(btVector3 rel_pos, btVector3 velocity) {
    BulletPINVOKE.btSolverBody_getVelocityInLocalPointNoDelta(swigCPtr, btVector3.getCPtr(rel_pos), btVector3.getCPtr(velocity));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getVelocityInLocalPointObsolete(btVector3 rel_pos, btVector3 velocity) {
    BulletPINVOKE.btSolverBody_getVelocityInLocalPointObsolete(swigCPtr, btVector3.getCPtr(rel_pos), btVector3.getCPtr(velocity));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getAngularVelocity(btVector3 angVel) {
    BulletPINVOKE.btSolverBody_getAngularVelocity(swigCPtr, btVector3.getCPtr(angVel));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void applyImpulse(btVector3 linearComponent, btVector3 angularComponent, float impulseMagnitude) {
    BulletPINVOKE.btSolverBody_applyImpulse(swigCPtr, btVector3.getCPtr(linearComponent), btVector3.getCPtr(angularComponent), impulseMagnitude);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void internalApplyPushImpulse(btVector3 linearComponent, btVector3 angularComponent, float impulseMagnitude) {
    BulletPINVOKE.btSolverBody_internalApplyPushImpulse(swigCPtr, btVector3.getCPtr(linearComponent), btVector3.getCPtr(angularComponent), impulseMagnitude);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 getDeltaLinearVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_getDeltaLinearVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 getDeltaAngularVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_getDeltaAngularVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 getPushVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_getPushVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 getTurnVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_getTurnVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetDeltaLinearVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_internalGetDeltaLinearVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetDeltaAngularVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_internalGetDeltaAngularVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetAngularFactor() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_internalGetAngularFactor(swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetInvMass() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_internalGetInvMass(swigCPtr), false);
    return ret;
  }

  public void internalSetInvMass(btVector3 invMass) {
    BulletPINVOKE.btSolverBody_internalSetInvMass(swigCPtr, btVector3.getCPtr(invMass));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 internalGetPushVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_internalGetPushVelocity(swigCPtr), false);
    return ret;
  }

  public btVector3 internalGetTurnVelocity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSolverBody_internalGetTurnVelocity(swigCPtr), false);
    return ret;
  }

  public void internalGetVelocityInLocalPointObsolete(btVector3 rel_pos, btVector3 velocity) {
    BulletPINVOKE.btSolverBody_internalGetVelocityInLocalPointObsolete(swigCPtr, btVector3.getCPtr(rel_pos), btVector3.getCPtr(velocity));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void internalGetAngularVelocity(btVector3 angVel) {
    BulletPINVOKE.btSolverBody_internalGetAngularVelocity(swigCPtr, btVector3.getCPtr(angVel));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void internalApplyImpulse(btVector3 linearComponent, btVector3 angularComponent, float impulseMagnitude) {
    BulletPINVOKE.btSolverBody_internalApplyImpulse(swigCPtr, btVector3.getCPtr(linearComponent), btVector3.getCPtr(angularComponent), impulseMagnitude);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void writebackVelocity() {
    BulletPINVOKE.btSolverBody_writebackVelocity(swigCPtr);
  }

  public void writebackVelocityAndTransform(float timeStep, float splitImpulseTurnErp) {
    BulletPINVOKE.btSolverBody_writebackVelocityAndTransform(swigCPtr, timeStep, splitImpulseTurnErp);
  }

  public btSolverBody() : this(BulletPINVOKE.new_btSolverBody(), true) {
  }

}

}
