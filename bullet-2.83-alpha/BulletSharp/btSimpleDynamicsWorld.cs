//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btSimpleDynamicsWorld : btDynamicsWorld {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btSimpleDynamicsWorld(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btSimpleDynamicsWorld_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btSimpleDynamicsWorld obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSimpleDynamicsWorld() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btSimpleDynamicsWorld(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btSimpleDynamicsWorld(btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) : this(BulletPINVOKE.new_btSimpleDynamicsWorld(btDispatcher.getCPtr(dispatcher), btBroadphaseInterface.getCPtr(pairCache), btConstraintSolver.getCPtr(constraintSolver), btCollisionConfiguration.getCPtr(collisionConfiguration)), true) {
  }

  public override int stepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {
    int ret = BulletPINVOKE.btSimpleDynamicsWorld_stepSimulation__SWIG_0(swigCPtr, timeStep, maxSubSteps, fixedTimeStep);
    return ret;
  }

  public override int stepSimulation(float timeStep, int maxSubSteps) {
    int ret = BulletPINVOKE.btSimpleDynamicsWorld_stepSimulation__SWIG_1(swigCPtr, timeStep, maxSubSteps);
    return ret;
  }

  public override int stepSimulation(float timeStep) {
    int ret = BulletPINVOKE.btSimpleDynamicsWorld_stepSimulation__SWIG_2(swigCPtr, timeStep);
    return ret;
  }

  public override void setGravity(btVector3 gravity) {
    BulletPINVOKE.btSimpleDynamicsWorld_setGravity(swigCPtr, btVector3.getCPtr(gravity));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override btVector3 getGravity() {
    btVector3 ret = new btVector3(BulletPINVOKE.btSimpleDynamicsWorld_getGravity(swigCPtr), true);
    return ret;
  }

  public override void addRigidBody(btRigidBody body) {
    BulletPINVOKE.btSimpleDynamicsWorld_addRigidBody__SWIG_0(swigCPtr, btRigidBody.getCPtr(body));
  }

  public override void addRigidBody(btRigidBody body, short group, short mask) {
    BulletPINVOKE.btSimpleDynamicsWorld_addRigidBody__SWIG_1(swigCPtr, btRigidBody.getCPtr(body), group, mask);
  }

  public override void removeRigidBody(btRigidBody body) {
    BulletPINVOKE.btSimpleDynamicsWorld_removeRigidBody(swigCPtr, btRigidBody.getCPtr(body));
  }

  public override void debugDrawWorld() {
    BulletPINVOKE.btSimpleDynamicsWorld_debugDrawWorld(swigCPtr);
  }

  public override void addAction(btActionInterface action) {
    BulletPINVOKE.btSimpleDynamicsWorld_addAction(swigCPtr, btActionInterface.getCPtr(action));
  }

  public override void removeAction(btActionInterface action) {
    BulletPINVOKE.btSimpleDynamicsWorld_removeAction(swigCPtr, btActionInterface.getCPtr(action));
  }

  public override void removeCollisionObject(btCollisionObject collisionObject) {
    BulletPINVOKE.btSimpleDynamicsWorld_removeCollisionObject(swigCPtr, btCollisionObject.getCPtr(collisionObject));
  }

  public override void updateAabbs() {
    BulletPINVOKE.btSimpleDynamicsWorld_updateAabbs(swigCPtr);
  }

  public override void synchronizeMotionStates() {
    BulletPINVOKE.btSimpleDynamicsWorld_synchronizeMotionStates(swigCPtr);
  }

  public override void setConstraintSolver(btConstraintSolver solver) {
    BulletPINVOKE.btSimpleDynamicsWorld_setConstraintSolver(swigCPtr, btConstraintSolver.getCPtr(solver));
  }

  public override btConstraintSolver getConstraintSolver() {
    global::System.IntPtr cPtr = BulletPINVOKE.btSimpleDynamicsWorld_getConstraintSolver(swigCPtr);
    btConstraintSolver ret = (cPtr == global::System.IntPtr.Zero) ? null : new btConstraintSolver(cPtr, false);
    return ret;
  }

  public override btDynamicsWorldType getWorldType() {
    btDynamicsWorldType ret = (btDynamicsWorldType)BulletPINVOKE.btSimpleDynamicsWorld_getWorldType(swigCPtr);
    return ret;
  }

  public override void clearForces() {
    BulletPINVOKE.btSimpleDynamicsWorld_clearForces(swigCPtr);
  }

}

}
