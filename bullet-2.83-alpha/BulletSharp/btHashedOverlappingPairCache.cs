//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btHashedOverlappingPairCache : btOverlappingPairCache {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btHashedOverlappingPairCache(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btHashedOverlappingPairCache_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btHashedOverlappingPairCache obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btHashedOverlappingPairCache() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btHashedOverlappingPairCache(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btHashedOverlappingPairCache() : this(BulletPINVOKE.new_btHashedOverlappingPairCache(), true) {
  }

  public override void removeOverlappingPairsContainingProxy(btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BulletPINVOKE.btHashedOverlappingPairCache_removeOverlappingPairsContainingProxy(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btDispatcher.getCPtr(dispatcher));
  }

  public override SWIGTYPE_p_void removeOverlappingPair(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1, btDispatcher dispatcher) {
    global::System.IntPtr cPtr = BulletPINVOKE.btHashedOverlappingPairCache_removeOverlappingPair(swigCPtr, btBroadphaseProxy.getCPtr(proxy0), btBroadphaseProxy.getCPtr(proxy1), btDispatcher.getCPtr(dispatcher));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public bool needsBroadphaseCollision(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) {
    bool ret = BulletPINVOKE.btHashedOverlappingPairCache_needsBroadphaseCollision(swigCPtr, btBroadphaseProxy.getCPtr(proxy0), btBroadphaseProxy.getCPtr(proxy1));
    return ret;
  }

  public override btBroadphasePair addOverlappingPair(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) {
    global::System.IntPtr cPtr = BulletPINVOKE.btHashedOverlappingPairCache_addOverlappingPair(swigCPtr, btBroadphaseProxy.getCPtr(proxy0), btBroadphaseProxy.getCPtr(proxy1));
    btBroadphasePair ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphasePair(cPtr, false);
    return ret;
  }

  public override void cleanProxyFromPairs(btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BulletPINVOKE.btHashedOverlappingPairCache_cleanProxyFromPairs(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btDispatcher.getCPtr(dispatcher));
  }

  public override void processAllOverlappingPairs(btOverlapCallback arg0, btDispatcher dispatcher) {
    BulletPINVOKE.btHashedOverlappingPairCache_processAllOverlappingPairs(swigCPtr, btOverlapCallback.getCPtr(arg0), btDispatcher.getCPtr(dispatcher));
  }

  public override btBroadphasePair getOverlappingPairArrayPtr() {
    global::System.IntPtr cPtr = BulletPINVOKE.btHashedOverlappingPairCache_getOverlappingPairArrayPtr__SWIG_0(swigCPtr);
    btBroadphasePair ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphasePair(cPtr, false);
    return ret;
  }

  public override SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t getOverlappingPairArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btBroadphasePair_t(BulletPINVOKE.btHashedOverlappingPairCache_getOverlappingPairArray__SWIG_0(swigCPtr), false);
    return ret;
  }

  public override void cleanOverlappingPair(btBroadphasePair pair, btDispatcher dispatcher) {
    BulletPINVOKE.btHashedOverlappingPairCache_cleanOverlappingPair(swigCPtr, btBroadphasePair.getCPtr(pair), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override btBroadphasePair findPair(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) {
    global::System.IntPtr cPtr = BulletPINVOKE.btHashedOverlappingPairCache_findPair(swigCPtr, btBroadphaseProxy.getCPtr(proxy0), btBroadphaseProxy.getCPtr(proxy1));
    btBroadphasePair ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphasePair(cPtr, false);
    return ret;
  }

  public int GetCount() {
    int ret = BulletPINVOKE.btHashedOverlappingPairCache_GetCount(swigCPtr);
    return ret;
  }

  public btOverlapFilterCallback getOverlapFilterCallback() {
    global::System.IntPtr cPtr = BulletPINVOKE.btHashedOverlappingPairCache_getOverlapFilterCallback(swigCPtr);
    btOverlapFilterCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new btOverlapFilterCallback(cPtr, false);
    return ret;
  }

  public override void setOverlapFilterCallback(btOverlapFilterCallback callback) {
    BulletPINVOKE.btHashedOverlappingPairCache_setOverlapFilterCallback(swigCPtr, btOverlapFilterCallback.getCPtr(callback));
  }

  public override int getNumOverlappingPairs() {
    int ret = BulletPINVOKE.btHashedOverlappingPairCache_getNumOverlappingPairs(swigCPtr);
    return ret;
  }

}

}
