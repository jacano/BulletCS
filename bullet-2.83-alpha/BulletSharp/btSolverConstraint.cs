//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btSolverConstraint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btSolverConstraint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btSolverConstraint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSolverConstraint() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btSolverConstraint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public btVector3 m_relpos1CrossNormal {
    set {
      BulletPINVOKE.btSolverConstraint_m_relpos1CrossNormal_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverConstraint_m_relpos1CrossNormal_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_contactNormal1 {
    set {
      BulletPINVOKE.btSolverConstraint_m_contactNormal1_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverConstraint_m_contactNormal1_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_relpos2CrossNormal {
    set {
      BulletPINVOKE.btSolverConstraint_m_relpos2CrossNormal_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverConstraint_m_relpos2CrossNormal_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_contactNormal2 {
    set {
      BulletPINVOKE.btSolverConstraint_m_contactNormal2_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverConstraint_m_contactNormal2_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_angularComponentA {
    set {
      BulletPINVOKE.btSolverConstraint_m_angularComponentA_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverConstraint_m_angularComponentA_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_angularComponentB {
    set {
      BulletPINVOKE.btSolverConstraint_m_angularComponentB_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverConstraint_m_angularComponentB_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public float m_appliedPushImpulse {
    set {
      BulletPINVOKE.btSolverConstraint_m_appliedPushImpulse_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_appliedPushImpulse_get(swigCPtr);
      return ret;
    } 
  }

  public float m_appliedImpulse {
    set {
      BulletPINVOKE.btSolverConstraint_m_appliedImpulse_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_appliedImpulse_get(swigCPtr);
      return ret;
    } 
  }

  public float m_friction {
    set {
      BulletPINVOKE.btSolverConstraint_m_friction_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_friction_get(swigCPtr);
      return ret;
    } 
  }

  public float m_jacDiagABInv {
    set {
      BulletPINVOKE.btSolverConstraint_m_jacDiagABInv_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_jacDiagABInv_get(swigCPtr);
      return ret;
    } 
  }

  public float m_rhs {
    set {
      BulletPINVOKE.btSolverConstraint_m_rhs_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_rhs_get(swigCPtr);
      return ret;
    } 
  }

  public float m_cfm {
    set {
      BulletPINVOKE.btSolverConstraint_m_cfm_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_cfm_get(swigCPtr);
      return ret;
    } 
  }

  public float m_lowerLimit {
    set {
      BulletPINVOKE.btSolverConstraint_m_lowerLimit_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_lowerLimit_get(swigCPtr);
      return ret;
    } 
  }

  public float m_upperLimit {
    set {
      BulletPINVOKE.btSolverConstraint_m_upperLimit_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_upperLimit_get(swigCPtr);
      return ret;
    } 
  }

  public float m_rhsPenetration {
    set {
      BulletPINVOKE.btSolverConstraint_m_rhsPenetration_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_rhsPenetration_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_void m_originalContactPoint {
    set {
      BulletPINVOKE.btSolverConstraint_m_originalContactPoint_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btSolverConstraint_m_originalContactPoint_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public float m_unusedPadding4 {
    set {
      BulletPINVOKE.btSolverConstraint_m_unusedPadding4_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btSolverConstraint_m_unusedPadding4_get(swigCPtr);
      return ret;
    } 
  }

  public int m_numRowsForNonContactConstraint {
    set {
      BulletPINVOKE.btSolverConstraint_m_numRowsForNonContactConstraint_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btSolverConstraint_m_numRowsForNonContactConstraint_get(swigCPtr);
      return ret;
    } 
  }

  public int m_overrideNumSolverIterations {
    set {
      BulletPINVOKE.btSolverConstraint_m_overrideNumSolverIterations_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btSolverConstraint_m_overrideNumSolverIterations_get(swigCPtr);
      return ret;
    } 
  }

  public int m_frictionIndex {
    set {
      BulletPINVOKE.btSolverConstraint_m_frictionIndex_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btSolverConstraint_m_frictionIndex_get(swigCPtr);
      return ret;
    } 
  }

  public int m_solverBodyIdA {
    set {
      BulletPINVOKE.btSolverConstraint_m_solverBodyIdA_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btSolverConstraint_m_solverBodyIdA_get(swigCPtr);
      return ret;
    } 
  }

  public int m_solverBodyIdB {
    set {
      BulletPINVOKE.btSolverConstraint_m_solverBodyIdB_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btSolverConstraint_m_solverBodyIdB_get(swigCPtr);
      return ret;
    } 
  }

  public btSolverConstraint() : this(BulletPINVOKE.new_btSolverConstraint(), true) {
  }

  public enum btSolverConstraintType {
    BT_SOLVER_CONTACT_1D = 0,
    BT_SOLVER_FRICTION_1D
  }

}

}
