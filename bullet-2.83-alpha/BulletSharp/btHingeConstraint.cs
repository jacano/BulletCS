//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btHingeConstraint : btTypedConstraint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btHingeConstraint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btHingeConstraint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btHingeConstraint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btHingeConstraint() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btHingeConstraint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, btVector3 pivotInA, btVector3 pivotInB, btVector3 axisInA, btVector3 axisInB, bool useReferenceFrameA) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_0(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), btVector3.getCPtr(pivotInA), btVector3.getCPtr(pivotInB), btVector3.getCPtr(axisInA), btVector3.getCPtr(axisInB), useReferenceFrameA), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, btVector3 pivotInA, btVector3 pivotInB, btVector3 axisInA, btVector3 axisInB) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_1(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), btVector3.getCPtr(pivotInA), btVector3.getCPtr(pivotInB), btVector3.getCPtr(axisInA), btVector3.getCPtr(axisInB)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btVector3 pivotInA, btVector3 axisInA, bool useReferenceFrameA) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_2(btRigidBody.getCPtr(rbA), btVector3.getCPtr(pivotInA), btVector3.getCPtr(axisInA), useReferenceFrameA), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btVector3 pivotInA, btVector3 axisInA) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_3(btRigidBody.getCPtr(rbA), btVector3.getCPtr(pivotInA), btVector3.getCPtr(axisInA)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame, bool useReferenceFrameA) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_4(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), btTransform.getCPtr(rbAFrame), btTransform.getCPtr(rbBFrame), useReferenceFrameA), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_5(btRigidBody.getCPtr(rbA), btRigidBody.getCPtr(rbB), btTransform.getCPtr(rbAFrame), btTransform.getCPtr(rbBFrame)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btTransform rbAFrame, bool useReferenceFrameA) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_6(btRigidBody.getCPtr(rbA), btTransform.getCPtr(rbAFrame), useReferenceFrameA), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btHingeConstraint(btRigidBody rbA, btTransform rbAFrame) : this(BulletPINVOKE.new_btHingeConstraint__SWIG_7(btRigidBody.getCPtr(rbA), btTransform.getCPtr(rbAFrame)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void buildJacobian() {
    BulletPINVOKE.btHingeConstraint_buildJacobian(swigCPtr);
  }

  public override void getInfo1(btTypedConstraint.btConstraintInfo1 info) {
    BulletPINVOKE.btHingeConstraint_getInfo1(swigCPtr, btTypedConstraint.btConstraintInfo1.getCPtr(info));
  }

  public void getInfo1NonVirtual(btTypedConstraint.btConstraintInfo1 info) {
    BulletPINVOKE.btHingeConstraint_getInfo1NonVirtual(swigCPtr, btTypedConstraint.btConstraintInfo1.getCPtr(info));
  }

  public override void getInfo2(btTypedConstraint.btConstraintInfo2 info) {
    BulletPINVOKE.btHingeConstraint_getInfo2(swigCPtr, btTypedConstraint.btConstraintInfo2.getCPtr(info));
  }

  public void getInfo2NonVirtual(btTypedConstraint.btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 angVelA, btVector3 angVelB) {
    BulletPINVOKE.btHingeConstraint_getInfo2NonVirtual(swigCPtr, btTypedConstraint.btConstraintInfo2.getCPtr(info), btTransform.getCPtr(transA), btTransform.getCPtr(transB), btVector3.getCPtr(angVelA), btVector3.getCPtr(angVelB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getInfo2Internal(btTypedConstraint.btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 angVelA, btVector3 angVelB) {
    BulletPINVOKE.btHingeConstraint_getInfo2Internal(swigCPtr, btTypedConstraint.btConstraintInfo2.getCPtr(info), btTransform.getCPtr(transA), btTransform.getCPtr(transB), btVector3.getCPtr(angVelA), btVector3.getCPtr(angVelB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getInfo2InternalUsingFrameOffset(btTypedConstraint.btConstraintInfo2 info, btTransform transA, btTransform transB, btVector3 angVelA, btVector3 angVelB) {
    BulletPINVOKE.btHingeConstraint_getInfo2InternalUsingFrameOffset(swigCPtr, btTypedConstraint.btConstraintInfo2.getCPtr(info), btTransform.getCPtr(transA), btTransform.getCPtr(transB), btVector3.getCPtr(angVelA), btVector3.getCPtr(angVelB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateRHS(float timeStep) {
    BulletPINVOKE.btHingeConstraint_updateRHS(swigCPtr, timeStep);
  }

  public new btRigidBody getRigidBodyA() {
    btRigidBody ret = new btRigidBody(BulletPINVOKE.btHingeConstraint_getRigidBodyA__SWIG_0(swigCPtr), false);
    return ret;
  }

  public new btRigidBody getRigidBodyB() {
    btRigidBody ret = new btRigidBody(BulletPINVOKE.btHingeConstraint_getRigidBodyB__SWIG_0(swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetA() {
    btTransform ret = new btTransform(BulletPINVOKE.btHingeConstraint_getFrameOffsetA(swigCPtr), false);
    return ret;
  }

  public btTransform getFrameOffsetB() {
    btTransform ret = new btTransform(BulletPINVOKE.btHingeConstraint_getFrameOffsetB(swigCPtr), false);
    return ret;
  }

  public void setFrames(btTransform frameA, btTransform frameB) {
    BulletPINVOKE.btHingeConstraint_setFrames(swigCPtr, btTransform.getCPtr(frameA), btTransform.getCPtr(frameB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAngularOnly(bool angularOnly) {
    BulletPINVOKE.btHingeConstraint_setAngularOnly(swigCPtr, angularOnly);
  }

  public void enableAngularMotor(bool enableMotor, float targetVelocity, float maxMotorImpulse) {
    BulletPINVOKE.btHingeConstraint_enableAngularMotor(swigCPtr, enableMotor, targetVelocity, maxMotorImpulse);
  }

  public void enableMotor(bool enableMotor) {
    BulletPINVOKE.btHingeConstraint_enableMotor(swigCPtr, enableMotor);
  }

  public void setMaxMotorImpulse(float maxMotorImpulse) {
    BulletPINVOKE.btHingeConstraint_setMaxMotorImpulse(swigCPtr, maxMotorImpulse);
  }

  public void setMotorTarget(btQuaternion qAinB, float dt) {
    BulletPINVOKE.btHingeConstraint_setMotorTarget__SWIG_0(swigCPtr, btQuaternion.getCPtr(qAinB), dt);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMotorTarget(float targetAngle, float dt) {
    BulletPINVOKE.btHingeConstraint_setMotorTarget__SWIG_1(swigCPtr, targetAngle, dt);
  }

  public void setLimit(float low, float high, float _softness, float _biasFactor, float _relaxationFactor) {
    BulletPINVOKE.btHingeConstraint_setLimit__SWIG_0(swigCPtr, low, high, _softness, _biasFactor, _relaxationFactor);
  }

  public void setLimit(float low, float high, float _softness, float _biasFactor) {
    BulletPINVOKE.btHingeConstraint_setLimit__SWIG_1(swigCPtr, low, high, _softness, _biasFactor);
  }

  public void setLimit(float low, float high, float _softness) {
    BulletPINVOKE.btHingeConstraint_setLimit__SWIG_2(swigCPtr, low, high, _softness);
  }

  public void setLimit(float low, float high) {
    BulletPINVOKE.btHingeConstraint_setLimit__SWIG_3(swigCPtr, low, high);
  }

  public void setAxis(btVector3 axisInA) {
    BulletPINVOKE.btHingeConstraint_setAxis(swigCPtr, btVector3.getCPtr(axisInA));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getLowerLimit() {
    float ret = BulletPINVOKE.btHingeConstraint_getLowerLimit(swigCPtr);
    return ret;
  }

  public float getUpperLimit() {
    float ret = BulletPINVOKE.btHingeConstraint_getUpperLimit(swigCPtr);
    return ret;
  }

  public float getHingeAngle() {
    float ret = BulletPINVOKE.btHingeConstraint_getHingeAngle__SWIG_0(swigCPtr);
    return ret;
  }

  public float getHingeAngle(btTransform transA, btTransform transB) {
    float ret = BulletPINVOKE.btHingeConstraint_getHingeAngle__SWIG_1(swigCPtr, btTransform.getCPtr(transA), btTransform.getCPtr(transB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void testLimit(btTransform transA, btTransform transB) {
    BulletPINVOKE.btHingeConstraint_testLimit(swigCPtr, btTransform.getCPtr(transA), btTransform.getCPtr(transB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btTransform getAFrame() {
    btTransform ret = new btTransform(BulletPINVOKE.btHingeConstraint_getAFrame__SWIG_0(swigCPtr), false);
    return ret;
  }

  public btTransform getBFrame() {
    btTransform ret = new btTransform(BulletPINVOKE.btHingeConstraint_getBFrame__SWIG_0(swigCPtr), false);
    return ret;
  }

  public int getSolveLimit() {
    int ret = BulletPINVOKE.btHingeConstraint_getSolveLimit(swigCPtr);
    return ret;
  }

  public float getLimitSign() {
    float ret = BulletPINVOKE.btHingeConstraint_getLimitSign(swigCPtr);
    return ret;
  }

  public bool getAngularOnly() {
    bool ret = BulletPINVOKE.btHingeConstraint_getAngularOnly(swigCPtr);
    return ret;
  }

  public bool getEnableAngularMotor() {
    bool ret = BulletPINVOKE.btHingeConstraint_getEnableAngularMotor(swigCPtr);
    return ret;
  }

  public float getMotorTargetVelosity() {
    float ret = BulletPINVOKE.btHingeConstraint_getMotorTargetVelosity(swigCPtr);
    return ret;
  }

  public float getMaxMotorImpulse() {
    float ret = BulletPINVOKE.btHingeConstraint_getMaxMotorImpulse(swigCPtr);
    return ret;
  }

  public bool getUseFrameOffset() {
    bool ret = BulletPINVOKE.btHingeConstraint_getUseFrameOffset(swigCPtr);
    return ret;
  }

  public void setUseFrameOffset(bool frameOffsetOnOff) {
    BulletPINVOKE.btHingeConstraint_setUseFrameOffset(swigCPtr, frameOffsetOnOff);
  }

  public override void setParam(int num, float value, int axis) {
    BulletPINVOKE.btHingeConstraint_setParam__SWIG_0(swigCPtr, num, value, axis);
  }

  public override void setParam(int num, float value) {
    BulletPINVOKE.btHingeConstraint_setParam__SWIG_1(swigCPtr, num, value);
  }

  public override float getParam(int num, int axis) {
    float ret = BulletPINVOKE.btHingeConstraint_getParam__SWIG_0(swigCPtr, num, axis);
    return ret;
  }

  public override float getParam(int num) {
    float ret = BulletPINVOKE.btHingeConstraint_getParam__SWIG_1(swigCPtr, num);
    return ret;
  }

  public override int calculateSerializeBufferSize() {
    int ret = BulletPINVOKE.btHingeConstraint_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public override string serialize(SWIGTYPE_p_void dataBuffer, btSerializer serializer) {
    string ret = BulletPINVOKE.btHingeConstraint_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), btSerializer.getCPtr(serializer));
    return ret;
  }

}

}
