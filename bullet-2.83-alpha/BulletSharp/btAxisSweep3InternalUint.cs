//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btAxisSweep3InternalUint : btBroadphaseInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btAxisSweep3InternalUint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btAxisSweep3InternalUint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btAxisSweep3InternalUint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btAxisSweep3InternalUint() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btAxisSweep3InternalUint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class Edge : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Edge(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Edge obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Edge() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btAxisSweep3InternalUint_Edge(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint m_pos {
      set {
        BulletPINVOKE.btAxisSweep3InternalUint_Edge_m_pos_set(swigCPtr, value);
      } 
      get {
        uint ret = BulletPINVOKE.btAxisSweep3InternalUint_Edge_m_pos_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint m_handle {
      set {
        BulletPINVOKE.btAxisSweep3InternalUint_Edge_m_handle_set(swigCPtr, value);
      } 
      get {
        uint ret = BulletPINVOKE.btAxisSweep3InternalUint_Edge_m_handle_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint IsMax() {
      uint ret = BulletPINVOKE.btAxisSweep3InternalUint_Edge_IsMax(swigCPtr);
      return ret;
    }
  
    public Edge() : this(BulletPINVOKE.new_btAxisSweep3InternalUint_Edge(), true) {
    }
  
  }

  public class Handle : btBroadphaseProxy {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal Handle(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btAxisSweep3InternalUint_Handle_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Handle obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Handle() {
      Dispose();
    }
  
    public override void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btAxisSweep3InternalUint_Handle(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
        base.Dispose();
      }
    }
  
    public SWIGTYPE_p_unsigned_int m_minEdges {
      set {
        BulletPINVOKE.btAxisSweep3InternalUint_Handle_m_minEdges_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btAxisSweep3InternalUint_Handle_m_minEdges_get(swigCPtr);
        SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_unsigned_int m_maxEdges {
      set {
        BulletPINVOKE.btAxisSweep3InternalUint_Handle_m_maxEdges_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btAxisSweep3InternalUint_Handle_m_maxEdges_get(swigCPtr);
        SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
        return ret;
      } 
    }
  
    public btBroadphaseProxy m_dbvtProxy {
      set {
        BulletPINVOKE.btAxisSweep3InternalUint_Handle_m_dbvtProxy_set(swigCPtr, btBroadphaseProxy.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btAxisSweep3InternalUint_Handle_m_dbvtProxy_get(swigCPtr);
        btBroadphaseProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphaseProxy(cPtr, false);
        return ret;
      } 
    }
  
    public void SetNextFree(uint next) {
      BulletPINVOKE.btAxisSweep3InternalUint_Handle_SetNextFree(swigCPtr, next);
    }
  
    public uint GetNextFree() {
      uint ret = BulletPINVOKE.btAxisSweep3InternalUint_Handle_GetNextFree(swigCPtr);
      return ret;
    }
  
    public Handle() : this(BulletPINVOKE.new_btAxisSweep3InternalUint_Handle(), true) {
    }
  
  }

  public btAxisSweep3InternalUint(btVector3 worldAabbMin, btVector3 worldAabbMax, uint handleMask, uint handleSentinel, uint maxHandles, btOverlappingPairCache pairCache, bool disableRaycastAccelerator) : this(BulletPINVOKE.new_btAxisSweep3InternalUint__SWIG_0(btVector3.getCPtr(worldAabbMin), btVector3.getCPtr(worldAabbMax), handleMask, handleSentinel, maxHandles, btOverlappingPairCache.getCPtr(pairCache), disableRaycastAccelerator), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btAxisSweep3InternalUint(btVector3 worldAabbMin, btVector3 worldAabbMax, uint handleMask, uint handleSentinel, uint maxHandles, btOverlappingPairCache pairCache) : this(BulletPINVOKE.new_btAxisSweep3InternalUint__SWIG_1(btVector3.getCPtr(worldAabbMin), btVector3.getCPtr(worldAabbMax), handleMask, handleSentinel, maxHandles, btOverlappingPairCache.getCPtr(pairCache)), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btAxisSweep3InternalUint(btVector3 worldAabbMin, btVector3 worldAabbMax, uint handleMask, uint handleSentinel, uint maxHandles) : this(BulletPINVOKE.new_btAxisSweep3InternalUint__SWIG_2(btVector3.getCPtr(worldAabbMin), btVector3.getCPtr(worldAabbMax), handleMask, handleSentinel, maxHandles), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btAxisSweep3InternalUint(btVector3 worldAabbMin, btVector3 worldAabbMax, uint handleMask, uint handleSentinel) : this(BulletPINVOKE.new_btAxisSweep3InternalUint__SWIG_3(btVector3.getCPtr(worldAabbMin), btVector3.getCPtr(worldAabbMax), handleMask, handleSentinel), true) {
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getNumHandles() {
    uint ret = BulletPINVOKE.btAxisSweep3InternalUint_getNumHandles(swigCPtr);
    return ret;
  }

  public override void calculateOverlappingPairs(btDispatcher dispatcher) {
    BulletPINVOKE.btAxisSweep3InternalUint_calculateOverlappingPairs(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public uint addHandle(btVector3 aabbMin, btVector3 aabbMax, SWIGTYPE_p_void pOwner, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, SWIGTYPE_p_void multiSapProxy) {
    uint ret = BulletPINVOKE.btAxisSweep3InternalUint_addHandle(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), SWIGTYPE_p_void.getCPtr(pOwner), collisionFilterGroup, collisionFilterMask, btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_void.getCPtr(multiSapProxy));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeHandle(uint handle, btDispatcher dispatcher) {
    BulletPINVOKE.btAxisSweep3InternalUint_removeHandle(swigCPtr, handle, btDispatcher.getCPtr(dispatcher));
  }

  public void updateHandle(uint handle, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BulletPINVOKE.btAxisSweep3InternalUint_updateHandle(swigCPtr, handle, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btAxisSweep3InternalUint.Handle getHandle(uint index) {
    global::System.IntPtr cPtr = BulletPINVOKE.btAxisSweep3InternalUint_getHandle(swigCPtr, index);
    btAxisSweep3InternalUint.Handle ret = (cPtr == global::System.IntPtr.Zero) ? null : new btAxisSweep3InternalUint.Handle(cPtr, false);
    return ret;
  }

  public override void resetPool(btDispatcher dispatcher) {
    BulletPINVOKE.btAxisSweep3InternalUint_resetPool(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public void processAllOverlappingPairs(btOverlapCallback callback) {
    BulletPINVOKE.btAxisSweep3InternalUint_processAllOverlappingPairs(swigCPtr, btOverlapCallback.getCPtr(callback));
  }

  public override btBroadphaseProxy createProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, SWIGTYPE_p_void userPtr, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, SWIGTYPE_p_void multiSapProxy) {
    global::System.IntPtr cPtr = BulletPINVOKE.btAxisSweep3InternalUint_createProxy(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), shapeType, SWIGTYPE_p_void.getCPtr(userPtr), collisionFilterGroup, collisionFilterMask, btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_void.getCPtr(multiSapProxy));
    btBroadphaseProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphaseProxy(cPtr, false);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void destroyProxy(btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BulletPINVOKE.btAxisSweep3InternalUint_destroyProxy(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btDispatcher.getCPtr(dispatcher));
  }

  public override void setAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BulletPINVOKE.btAxisSweep3InternalUint_setAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void getAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btAxisSweep3InternalUint_getAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btAxisSweep3InternalUint_rayTest__SWIG_0(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin) {
    BulletPINVOKE.btAxisSweep3InternalUint_rayTest__SWIG_1(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback) {
    BulletPINVOKE.btAxisSweep3InternalUint_rayTest__SWIG_2(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void aabbTest(btVector3 aabbMin, btVector3 aabbMax, btBroadphaseAabbCallback callback) {
    BulletPINVOKE.btAxisSweep3InternalUint_aabbTest(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btBroadphaseAabbCallback.getCPtr(callback));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void quantize(SWIGTYPE_p_unsigned_int arg0, btVector3 point, int isMax) {
    BulletPINVOKE.btAxisSweep3InternalUint_quantize(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(arg0), btVector3.getCPtr(point), isMax);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void unQuantize(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btAxisSweep3InternalUint_unQuantize(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool testAabbOverlap(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) {
    bool ret = BulletPINVOKE.btAxisSweep3InternalUint_testAabbOverlap(swigCPtr, btBroadphaseProxy.getCPtr(proxy0), btBroadphaseProxy.getCPtr(proxy1));
    return ret;
  }

  public override btOverlappingPairCache getOverlappingPairCache() {
    global::System.IntPtr cPtr = BulletPINVOKE.btAxisSweep3InternalUint_getOverlappingPairCache__SWIG_0(swigCPtr);
    btOverlappingPairCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public void setOverlappingPairUserCallback(btOverlappingPairCallback pairCallback) {
    BulletPINVOKE.btAxisSweep3InternalUint_setOverlappingPairUserCallback(swigCPtr, btOverlappingPairCallback.getCPtr(pairCallback));
  }

  public btOverlappingPairCallback getOverlappingPairUserCallback() {
    global::System.IntPtr cPtr = BulletPINVOKE.btAxisSweep3InternalUint_getOverlappingPairUserCallback(swigCPtr);
    btOverlappingPairCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new btOverlappingPairCallback(cPtr, false);
    return ret;
  }

  public override void getBroadphaseAabb(btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btAxisSweep3InternalUint_getBroadphaseAabb(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void printStats() {
    BulletPINVOKE.btAxisSweep3InternalUint_printStats(swigCPtr);
  }

}

}
