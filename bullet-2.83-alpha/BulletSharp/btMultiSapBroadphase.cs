//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btMultiSapBroadphase : btBroadphaseInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btMultiSapBroadphase(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btMultiSapBroadphase_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btMultiSapBroadphase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btMultiSapBroadphase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btMultiSapBroadphase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class btMultiSapProxy : btBroadphaseProxy {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal btMultiSapProxy(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btMultiSapProxy obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~btMultiSapProxy() {
      Dispose();
    }
  
    public override void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btMultiSapBroadphase_btMultiSapProxy(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
        base.Dispose();
      }
    }
  
    public SWIGTYPE_p_btAlignedObjectArrayT_btBridgeProxy_p_t m_bridgeProxies {
      set {
        BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_bridgeProxies_set(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btBridgeProxy_p_t.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_bridgeProxies_get(swigCPtr);
        SWIGTYPE_p_btAlignedObjectArrayT_btBridgeProxy_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_btAlignedObjectArrayT_btBridgeProxy_p_t(cPtr, false);
        return ret;
      } 
    }
  
    public btVector3 m_aabbMin {
      set {
        BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_aabbMin_set(swigCPtr, btVector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_aabbMin_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        return ret;
      } 
    }
  
    public btVector3 m_aabbMax {
      set {
        BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_aabbMax_set(swigCPtr, btVector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_aabbMax_get(swigCPtr);
        btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
        return ret;
      } 
    }
  
    public int m_shapeType {
      set {
        BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_shapeType_set(swigCPtr, value);
      } 
      get {
        int ret = BulletPINVOKE.btMultiSapBroadphase_btMultiSapProxy_m_shapeType_get(swigCPtr);
        return ret;
      } 
    }
  
    public btMultiSapProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, SWIGTYPE_p_void userPtr, short collisionFilterGroup, short collisionFilterMask) : this(BulletPINVOKE.new_btMultiSapBroadphase_btMultiSapProxy(btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), shapeType, SWIGTYPE_p_void.getCPtr(userPtr), collisionFilterGroup, collisionFilterMask), true) {
      if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t getBroadphaseArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btBroadphaseInterface_p_t(BulletPINVOKE.btMultiSapBroadphase_getBroadphaseArray__SWIG_0(swigCPtr), false);
    return ret;
  }

  public override btBroadphaseProxy createProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, SWIGTYPE_p_void userPtr, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, SWIGTYPE_p_void multiSapProxy) {
    global::System.IntPtr cPtr = BulletPINVOKE.btMultiSapBroadphase_createProxy(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), shapeType, SWIGTYPE_p_void.getCPtr(userPtr), collisionFilterGroup, collisionFilterMask, btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_void.getCPtr(multiSapProxy));
    btBroadphaseProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphaseProxy(cPtr, false);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void destroyProxy(btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BulletPINVOKE.btMultiSapBroadphase_destroyProxy(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btDispatcher.getCPtr(dispatcher));
  }

  public override void setAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BulletPINVOKE.btMultiSapBroadphase_setAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void getAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btMultiSapBroadphase_getAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btMultiSapBroadphase_rayTest__SWIG_0(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin) {
    BulletPINVOKE.btMultiSapBroadphase_rayTest__SWIG_1(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback) {
    BulletPINVOKE.btMultiSapBroadphase_rayTest__SWIG_2(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addToChildBroadphase(btMultiSapBroadphase.btMultiSapProxy parentMultiSapProxy, btBroadphaseProxy childProxy, btBroadphaseInterface childBroadphase) {
    BulletPINVOKE.btMultiSapBroadphase_addToChildBroadphase(swigCPtr, btMultiSapBroadphase.btMultiSapProxy.getCPtr(parentMultiSapProxy), btBroadphaseProxy.getCPtr(childProxy), btBroadphaseInterface.getCPtr(childBroadphase));
  }

  public override void calculateOverlappingPairs(btDispatcher dispatcher) {
    BulletPINVOKE.btMultiSapBroadphase_calculateOverlappingPairs(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public bool testAabbOverlap(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) {
    bool ret = BulletPINVOKE.btMultiSapBroadphase_testAabbOverlap(swigCPtr, btBroadphaseProxy.getCPtr(proxy0), btBroadphaseProxy.getCPtr(proxy1));
    return ret;
  }

  public override btOverlappingPairCache getOverlappingPairCache() {
    global::System.IntPtr cPtr = BulletPINVOKE.btMultiSapBroadphase_getOverlappingPairCache__SWIG_0(swigCPtr);
    btOverlappingPairCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public override void getBroadphaseAabb(btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btMultiSapBroadphase_getBroadphaseAabb(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void buildTree(btVector3 bvhAabbMin, btVector3 bvhAabbMax) {
    BulletPINVOKE.btMultiSapBroadphase_buildTree(swigCPtr, btVector3.getCPtr(bvhAabbMin), btVector3.getCPtr(bvhAabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void printStats() {
    BulletPINVOKE.btMultiSapBroadphase_printStats(swigCPtr);
  }

  public override void resetPool(btDispatcher dispatcher) {
    BulletPINVOKE.btMultiSapBroadphase_resetPool(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

}

}
