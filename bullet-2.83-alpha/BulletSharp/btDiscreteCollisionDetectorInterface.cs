//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btDiscreteCollisionDetectorInterface : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btDiscreteCollisionDetectorInterface(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btDiscreteCollisionDetectorInterface obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btDiscreteCollisionDetectorInterface() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btDiscreteCollisionDetectorInterface(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class Result : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Result(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Result obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Result() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDiscreteCollisionDetectorInterface_Result(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public virtual void setShapeIdentifiersA(int partId0, int index0) {
      BulletPINVOKE.btDiscreteCollisionDetectorInterface_Result_setShapeIdentifiersA(swigCPtr, partId0, index0);
    }
  
    public virtual void setShapeIdentifiersB(int partId1, int index1) {
      BulletPINVOKE.btDiscreteCollisionDetectorInterface_Result_setShapeIdentifiersB(swigCPtr, partId1, index1);
    }
  
    public virtual void addContactPoint(btVector3 normalOnBInWorld, btVector3 pointInWorld, float depth) {
      BulletPINVOKE.btDiscreteCollisionDetectorInterface_Result_addContactPoint(swigCPtr, btVector3.getCPtr(normalOnBInWorld), btVector3.getCPtr(pointInWorld), depth);
      if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public class ClosestPointInput : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ClosestPointInput(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClosestPointInput obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ClosestPointInput() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btDiscreteCollisionDetectorInterface_ClosestPointInput(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public ClosestPointInput() : this(BulletPINVOKE.new_btDiscreteCollisionDetectorInterface_ClosestPointInput(), true) {
    }
  
    public btTransform m_transformA {
      set {
        BulletPINVOKE.btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformA_set(swigCPtr, btTransform.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformA_get(swigCPtr);
        btTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new btTransform(cPtr, false);
        return ret;
      } 
    }
  
    public btTransform m_transformB {
      set {
        BulletPINVOKE.btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformB_set(swigCPtr, btTransform.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btDiscreteCollisionDetectorInterface_ClosestPointInput_m_transformB_get(swigCPtr);
        btTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new btTransform(cPtr, false);
        return ret;
      } 
    }
  
    public float m_maximumDistanceSquared {
      set {
        BulletPINVOKE.btDiscreteCollisionDetectorInterface_ClosestPointInput_m_maximumDistanceSquared_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btDiscreteCollisionDetectorInterface_ClosestPointInput_m_maximumDistanceSquared_get(swigCPtr);
        return ret;
      } 
    }
  
  }

  public virtual void getClosestPoints(btDiscreteCollisionDetectorInterface.ClosestPointInput input, btDiscreteCollisionDetectorInterface.Result output, btIDebugDraw debugDraw, bool swapResults) {
    BulletPINVOKE.btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_0(swigCPtr, btDiscreteCollisionDetectorInterface.ClosestPointInput.getCPtr(input), btDiscreteCollisionDetectorInterface.Result.getCPtr(output), btIDebugDraw.getCPtr(debugDraw), swapResults);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getClosestPoints(btDiscreteCollisionDetectorInterface.ClosestPointInput input, btDiscreteCollisionDetectorInterface.Result output, btIDebugDraw debugDraw) {
    BulletPINVOKE.btDiscreteCollisionDetectorInterface_getClosestPoints__SWIG_1(swigCPtr, btDiscreteCollisionDetectorInterface.ClosestPointInput.getCPtr(input), btDiscreteCollisionDetectorInterface.Result.getCPtr(output), btIDebugDraw.getCPtr(debugDraw));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
