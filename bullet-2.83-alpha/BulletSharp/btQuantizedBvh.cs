//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btQuantizedBvh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btQuantizedBvh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btQuantizedBvh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btQuantizedBvh() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btQuantizedBvh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public btQuantizedBvh() : this(BulletPINVOKE.new_btQuantizedBvh(), true) {
  }

  public void setQuantizationValues(btVector3 bvhAabbMin, btVector3 bvhAabbMax, float quantizationMargin) {
    BulletPINVOKE.btQuantizedBvh_setQuantizationValues__SWIG_0(swigCPtr, btVector3.getCPtr(bvhAabbMin), btVector3.getCPtr(bvhAabbMax), quantizationMargin);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setQuantizationValues(btVector3 bvhAabbMin, btVector3 bvhAabbMax) {
    BulletPINVOKE.btQuantizedBvh_setQuantizationValues__SWIG_1(swigCPtr, btVector3.getCPtr(bvhAabbMin), btVector3.getCPtr(bvhAabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t getLeafNodeArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t(BulletPINVOKE.btQuantizedBvh_getLeafNodeArray(swigCPtr), false);
    return ret;
  }

  public void buildInternal() {
    BulletPINVOKE.btQuantizedBvh_buildInternal(swigCPtr);
  }

  public void reportAabbOverlappingNodex(btNodeOverlapCallback nodeCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btQuantizedBvh_reportAabbOverlappingNodex(swigCPtr, btNodeOverlapCallback.getCPtr(nodeCallback), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reportRayOverlappingNodex(btNodeOverlapCallback nodeCallback, btVector3 raySource, btVector3 rayTarget) {
    BulletPINVOKE.btQuantizedBvh_reportRayOverlappingNodex(swigCPtr, btNodeOverlapCallback.getCPtr(nodeCallback), btVector3.getCPtr(raySource), btVector3.getCPtr(rayTarget));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reportBoxCastOverlappingNodex(btNodeOverlapCallback nodeCallback, btVector3 raySource, btVector3 rayTarget, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btQuantizedBvh_reportBoxCastOverlappingNodex(swigCPtr, btNodeOverlapCallback.getCPtr(nodeCallback), btVector3.getCPtr(raySource), btVector3.getCPtr(rayTarget), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void quantize(SWIGTYPE_p_unsigned_short arg0, btVector3 point, int isMax) {
    BulletPINVOKE.btQuantizedBvh_quantize(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(arg0), btVector3.getCPtr(point), isMax);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void quantizeWithClamp(SWIGTYPE_p_unsigned_short arg0, btVector3 point2, int isMax) {
    BulletPINVOKE.btQuantizedBvh_quantizeWithClamp(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(arg0), btVector3.getCPtr(point2), isMax);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 unQuantize(SWIGTYPE_p_unsigned_short vecIn) {
    btVector3 ret = new btVector3(BulletPINVOKE.btQuantizedBvh_unQuantize(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(vecIn)), true);
    return ret;
  }

  public void setTraversalMode(btQuantizedBvh.btTraversalMode traversalMode) {
    BulletPINVOKE.btQuantizedBvh_setTraversalMode(swigCPtr, (int)traversalMode);
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t getQuantizedNodeArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t(BulletPINVOKE.btQuantizedBvh_getQuantizedNodeArray(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t getSubtreeInfoArray() {
    SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t ret = new SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t(BulletPINVOKE.btQuantizedBvh_getSubtreeInfoArray(swigCPtr), false);
    return ret;
  }

  public uint calculateSerializeBufferSize() {
    uint ret = BulletPINVOKE.btQuantizedBvh_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual bool serialize(SWIGTYPE_p_void o_alignedDataBuffer, uint i_dataBufferSize, bool i_swapEndian) {
    bool ret = BulletPINVOKE.btQuantizedBvh_serialize__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(o_alignedDataBuffer), i_dataBufferSize, i_swapEndian);
    return ret;
  }

  public static btQuantizedBvh deSerializeInPlace(SWIGTYPE_p_void i_alignedDataBuffer, uint i_dataBufferSize, bool i_swapEndian) {
    global::System.IntPtr cPtr = BulletPINVOKE.btQuantizedBvh_deSerializeInPlace(SWIGTYPE_p_void.getCPtr(i_alignedDataBuffer), i_dataBufferSize, i_swapEndian);
    btQuantizedBvh ret = (cPtr == global::System.IntPtr.Zero) ? null : new btQuantizedBvh(cPtr, false);
    return ret;
  }

  public static uint getAlignmentSerializationPadding() {
    uint ret = BulletPINVOKE.btQuantizedBvh_getAlignmentSerializationPadding();
    return ret;
  }

  public virtual int calculateSerializeBufferSizeNew() {
    int ret = BulletPINVOKE.btQuantizedBvh_calculateSerializeBufferSizeNew(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, btSerializer serializer) {
    string ret = BulletPINVOKE.btQuantizedBvh_serialize__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), btSerializer.getCPtr(serializer));
    return ret;
  }

  public virtual void deSerializeFloat(btQuantizedBvhFloatData quantizedBvhFloatData) {
    BulletPINVOKE.btQuantizedBvh_deSerializeFloat(swigCPtr, btQuantizedBvhFloatData.getCPtr(quantizedBvhFloatData));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void deSerializeDouble(btQuantizedBvhDoubleData quantizedBvhDoubleData) {
    BulletPINVOKE.btQuantizedBvh_deSerializeDouble(swigCPtr, btQuantizedBvhDoubleData.getCPtr(quantizedBvhDoubleData));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isQuantized() {
    bool ret = BulletPINVOKE.btQuantizedBvh_isQuantized(swigCPtr);
    return ret;
  }

  public enum btTraversalMode {
    TRAVERSAL_STACKLESS = 0,
    TRAVERSAL_STACKLESS_CACHE_FRIENDLY,
    TRAVERSAL_RECURSIVE
  }

}

}
