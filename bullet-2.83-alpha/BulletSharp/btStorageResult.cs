//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btStorageResult : btDiscreteCollisionDetectorInterface.Result {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btStorageResult(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btStorageResult_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btStorageResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btStorageResult() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btStorageResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btVector3 m_normalOnSurfaceB {
    set {
      BulletPINVOKE.btStorageResult_m_normalOnSurfaceB_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btStorageResult_m_normalOnSurfaceB_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public btVector3 m_closestPointInB {
    set {
      BulletPINVOKE.btStorageResult_m_closestPointInB_set(swigCPtr, btVector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btStorageResult_m_closestPointInB_get(swigCPtr);
      btVector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new btVector3(cPtr, false);
      return ret;
    } 
  }

  public float m_distance {
    set {
      BulletPINVOKE.btStorageResult_m_distance_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btStorageResult_m_distance_get(swigCPtr);
      return ret;
    } 
  }

  public override void addContactPoint(btVector3 normalOnBInWorld, btVector3 pointInWorld, float depth) {
    BulletPINVOKE.btStorageResult_addContactPoint(swigCPtr, btVector3.getCPtr(normalOnBInWorld), btVector3.getCPtr(pointInWorld), depth);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
