//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btTriangleInfoMap : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btTriangleInfoMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btTriangleInfoMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btTriangleInfoMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btTriangleInfoMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public float m_convexEpsilon {
    set {
      BulletPINVOKE.btTriangleInfoMap_m_convexEpsilon_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btTriangleInfoMap_m_convexEpsilon_get(swigCPtr);
      return ret;
    } 
  }

  public float m_planarEpsilon {
    set {
      BulletPINVOKE.btTriangleInfoMap_m_planarEpsilon_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btTriangleInfoMap_m_planarEpsilon_get(swigCPtr);
      return ret;
    } 
  }

  public float m_equalVertexThreshold {
    set {
      BulletPINVOKE.btTriangleInfoMap_m_equalVertexThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btTriangleInfoMap_m_equalVertexThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public float m_edgeDistanceThreshold {
    set {
      BulletPINVOKE.btTriangleInfoMap_m_edgeDistanceThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btTriangleInfoMap_m_edgeDistanceThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public float m_maxEdgeAngleThreshold {
    set {
      BulletPINVOKE.btTriangleInfoMap_m_maxEdgeAngleThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btTriangleInfoMap_m_maxEdgeAngleThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public float m_zeroAreaThreshold {
    set {
      BulletPINVOKE.btTriangleInfoMap_m_zeroAreaThreshold_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btTriangleInfoMap_m_zeroAreaThreshold_get(swigCPtr);
      return ret;
    } 
  }

  public btTriangleInfoMap() : this(BulletPINVOKE.new_btTriangleInfoMap(), true) {
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = BulletPINVOKE.btTriangleInfoMap_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, btSerializer serializer) {
    string ret = BulletPINVOKE.btTriangleInfoMap_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), btSerializer.getCPtr(serializer));
    return ret;
  }

  public void deSerialize(btTriangleInfoMapData data) {
    BulletPINVOKE.btTriangleInfoMap_deSerialize(swigCPtr, btTriangleInfoMapData.getCPtr(data));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
