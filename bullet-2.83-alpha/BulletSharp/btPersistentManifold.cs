//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btPersistentManifold : btTypedObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btPersistentManifold(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btPersistentManifold_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btPersistentManifold obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btPersistentManifold() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btPersistentManifold(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public int m_companionIdA {
    set {
      BulletPINVOKE.btPersistentManifold_m_companionIdA_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btPersistentManifold_m_companionIdA_get(swigCPtr);
      return ret;
    } 
  }

  public int m_companionIdB {
    set {
      BulletPINVOKE.btPersistentManifold_m_companionIdB_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btPersistentManifold_m_companionIdB_get(swigCPtr);
      return ret;
    } 
  }

  public int m_index1a {
    set {
      BulletPINVOKE.btPersistentManifold_m_index1a_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btPersistentManifold_m_index1a_get(swigCPtr);
      return ret;
    } 
  }

  public btPersistentManifold() : this(BulletPINVOKE.new_btPersistentManifold__SWIG_0(), true) {
  }

  public btPersistentManifold(btCollisionObject body0, btCollisionObject body1, int arg2, float contactBreakingThreshold, float contactProcessingThreshold) : this(BulletPINVOKE.new_btPersistentManifold__SWIG_1(btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1), arg2, contactBreakingThreshold, contactProcessingThreshold), true) {
  }

  public btCollisionObject getBody0() {
    global::System.IntPtr cPtr = BulletPINVOKE.btPersistentManifold_getBody0(swigCPtr);
    btCollisionObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObject(cPtr, false);
    return ret;
  }

  public btCollisionObject getBody1() {
    global::System.IntPtr cPtr = BulletPINVOKE.btPersistentManifold_getBody1(swigCPtr);
    btCollisionObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new btCollisionObject(cPtr, false);
    return ret;
  }

  public void setBodies(btCollisionObject body0, btCollisionObject body1) {
    BulletPINVOKE.btPersistentManifold_setBodies(swigCPtr, btCollisionObject.getCPtr(body0), btCollisionObject.getCPtr(body1));
  }

  public void clearUserCache(btManifoldPoint pt) {
    BulletPINVOKE.btPersistentManifold_clearUserCache(swigCPtr, btManifoldPoint.getCPtr(pt));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getNumContacts() {
    int ret = BulletPINVOKE.btPersistentManifold_getNumContacts(swigCPtr);
    return ret;
  }

  public void setNumContacts(int cachedPoints) {
    BulletPINVOKE.btPersistentManifold_setNumContacts(swigCPtr, cachedPoints);
  }

  public btManifoldPoint getContactPoint(int index) {
    btManifoldPoint ret = new btManifoldPoint(BulletPINVOKE.btPersistentManifold_getContactPoint__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public float getContactBreakingThreshold() {
    float ret = BulletPINVOKE.btPersistentManifold_getContactBreakingThreshold(swigCPtr);
    return ret;
  }

  public float getContactProcessingThreshold() {
    float ret = BulletPINVOKE.btPersistentManifold_getContactProcessingThreshold(swigCPtr);
    return ret;
  }

  public void setContactBreakingThreshold(float contactBreakingThreshold) {
    BulletPINVOKE.btPersistentManifold_setContactBreakingThreshold(swigCPtr, contactBreakingThreshold);
  }

  public void setContactProcessingThreshold(float contactProcessingThreshold) {
    BulletPINVOKE.btPersistentManifold_setContactProcessingThreshold(swigCPtr, contactProcessingThreshold);
  }

  public int getCacheEntry(btManifoldPoint newPoint) {
    int ret = BulletPINVOKE.btPersistentManifold_getCacheEntry(swigCPtr, btManifoldPoint.getCPtr(newPoint));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int addManifoldPoint(btManifoldPoint newPoint, bool isPredictive) {
    int ret = BulletPINVOKE.btPersistentManifold_addManifoldPoint__SWIG_0(swigCPtr, btManifoldPoint.getCPtr(newPoint), isPredictive);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int addManifoldPoint(btManifoldPoint newPoint) {
    int ret = BulletPINVOKE.btPersistentManifold_addManifoldPoint__SWIG_1(swigCPtr, btManifoldPoint.getCPtr(newPoint));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeContactPoint(int index) {
    BulletPINVOKE.btPersistentManifold_removeContactPoint(swigCPtr, index);
  }

  public void replaceContactPoint(btManifoldPoint newPoint, int insertIndex) {
    BulletPINVOKE.btPersistentManifold_replaceContactPoint(swigCPtr, btManifoldPoint.getCPtr(newPoint), insertIndex);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool validContactDistance(btManifoldPoint pt) {
    bool ret = BulletPINVOKE.btPersistentManifold_validContactDistance(swigCPtr, btManifoldPoint.getCPtr(pt));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void refreshContactPoints(btTransform trA, btTransform trB) {
    BulletPINVOKE.btPersistentManifold_refreshContactPoints(swigCPtr, btTransform.getCPtr(trA), btTransform.getCPtr(trB));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearManifold() {
    BulletPINVOKE.btPersistentManifold_clearManifold(swigCPtr);
  }

}

}
