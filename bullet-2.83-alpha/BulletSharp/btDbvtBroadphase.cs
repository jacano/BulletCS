//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btDbvtBroadphase : btBroadphaseInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btDbvtBroadphase(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btDbvtBroadphase_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btDbvtBroadphase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btDbvtBroadphase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btDbvtBroadphase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btDbvt m_sets {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_sets_set(swigCPtr, btDbvt.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btDbvtBroadphase_m_sets_get(swigCPtr);
      btDbvt ret = (cPtr == global::System.IntPtr.Zero) ? null : new btDbvt(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_btDbvtProxy m_stageRoots {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_stageRoots_set(swigCPtr, SWIGTYPE_p_p_btDbvtProxy.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btDbvtBroadphase_m_stageRoots_get(swigCPtr);
      SWIGTYPE_p_p_btDbvtProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_btDbvtProxy(cPtr, false);
      return ret;
    } 
  }

  public btOverlappingPairCache m_paircache {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_paircache_set(swigCPtr, btOverlappingPairCache.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = BulletPINVOKE.btDbvtBroadphase_m_paircache_get(swigCPtr);
      btOverlappingPairCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new btOverlappingPairCache(cPtr, false);
      return ret;
    } 
  }

  public float m_prediction {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_prediction_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btDbvtBroadphase_m_prediction_get(swigCPtr);
      return ret;
    } 
  }

  public int m_stageCurrent {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_stageCurrent_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_stageCurrent_get(swigCPtr);
      return ret;
    } 
  }

  public int m_fupdates {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_fupdates_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_fupdates_get(swigCPtr);
      return ret;
    } 
  }

  public int m_dupdates {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_dupdates_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_dupdates_get(swigCPtr);
      return ret;
    } 
  }

  public int m_cupdates {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_cupdates_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_cupdates_get(swigCPtr);
      return ret;
    } 
  }

  public int m_newpairs {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_newpairs_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_newpairs_get(swigCPtr);
      return ret;
    } 
  }

  public int m_fixedleft {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_fixedleft_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_fixedleft_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_updates_call {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_updates_call_set(swigCPtr, value);
    } 
    get {
      uint ret = BulletPINVOKE.btDbvtBroadphase_m_updates_call_get(swigCPtr);
      return ret;
    } 
  }

  public uint m_updates_done {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_updates_done_set(swigCPtr, value);
    } 
    get {
      uint ret = BulletPINVOKE.btDbvtBroadphase_m_updates_done_get(swigCPtr);
      return ret;
    } 
  }

  public float m_updates_ratio {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_updates_ratio_set(swigCPtr, value);
    } 
    get {
      float ret = BulletPINVOKE.btDbvtBroadphase_m_updates_ratio_get(swigCPtr);
      return ret;
    } 
  }

  public int m_pid {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_pid_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_pid_get(swigCPtr);
      return ret;
    } 
  }

  public int m_cid {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_cid_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_cid_get(swigCPtr);
      return ret;
    } 
  }

  public int m_gid {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_gid_set(swigCPtr, value);
    } 
    get {
      int ret = BulletPINVOKE.btDbvtBroadphase_m_gid_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_releasepaircache {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_releasepaircache_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletPINVOKE.btDbvtBroadphase_m_releasepaircache_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_deferedcollide {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_deferedcollide_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletPINVOKE.btDbvtBroadphase_m_deferedcollide_get(swigCPtr);
      return ret;
    } 
  }

  public bool m_needcleanup {
    set {
      BulletPINVOKE.btDbvtBroadphase_m_needcleanup_set(swigCPtr, value);
    } 
    get {
      bool ret = BulletPINVOKE.btDbvtBroadphase_m_needcleanup_get(swigCPtr);
      return ret;
    } 
  }

  public btDbvtBroadphase(btOverlappingPairCache paircache) : this(BulletPINVOKE.new_btDbvtBroadphase__SWIG_0(btOverlappingPairCache.getCPtr(paircache)), true) {
  }

  public btDbvtBroadphase() : this(BulletPINVOKE.new_btDbvtBroadphase__SWIG_1(), true) {
  }

  public void collide(btDispatcher dispatcher) {
    BulletPINVOKE.btDbvtBroadphase_collide(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public void optimize() {
    BulletPINVOKE.btDbvtBroadphase_optimize(swigCPtr);
  }

  public override btBroadphaseProxy createProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, SWIGTYPE_p_void userPtr, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, SWIGTYPE_p_void multiSapProxy) {
    global::System.IntPtr cPtr = BulletPINVOKE.btDbvtBroadphase_createProxy(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), shapeType, SWIGTYPE_p_void.getCPtr(userPtr), collisionFilterGroup, collisionFilterMask, btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_void.getCPtr(multiSapProxy));
    btBroadphaseProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphaseProxy(cPtr, false);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void destroyProxy(btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BulletPINVOKE.btDbvtBroadphase_destroyProxy(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btDispatcher.getCPtr(dispatcher));
  }

  public override void setAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BulletPINVOKE.btDbvtBroadphase_setAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btDbvtBroadphase_rayTest__SWIG_0(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin) {
    BulletPINVOKE.btDbvtBroadphase_rayTest__SWIG_1(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback) {
    BulletPINVOKE.btDbvtBroadphase_rayTest__SWIG_2(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void aabbTest(btVector3 aabbMin, btVector3 aabbMax, btBroadphaseAabbCallback callback) {
    BulletPINVOKE.btDbvtBroadphase_aabbTest(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btBroadphaseAabbCallback.getCPtr(callback));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void getAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btDbvtBroadphase_getAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void calculateOverlappingPairs(btDispatcher dispatcher) {
    BulletPINVOKE.btDbvtBroadphase_calculateOverlappingPairs(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public override btOverlappingPairCache getOverlappingPairCache() {
    global::System.IntPtr cPtr = BulletPINVOKE.btDbvtBroadphase_getOverlappingPairCache__SWIG_0(swigCPtr);
    btOverlappingPairCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public override void getBroadphaseAabb(btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btDbvtBroadphase_getBroadphaseAabb(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void printStats() {
    BulletPINVOKE.btDbvtBroadphase_printStats(swigCPtr);
  }

  public override void resetPool(btDispatcher dispatcher) {
    BulletPINVOKE.btDbvtBroadphase_resetPool(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public void performDeferredRemoval(btDispatcher dispatcher) {
    BulletPINVOKE.btDbvtBroadphase_performDeferredRemoval(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public void setVelocityPrediction(float prediction) {
    BulletPINVOKE.btDbvtBroadphase_setVelocityPrediction(swigCPtr, prediction);
  }

  public float getVelocityPrediction() {
    float ret = BulletPINVOKE.btDbvtBroadphase_getVelocityPrediction(swigCPtr);
    return ret;
  }

  public void setAabbForceUpdate(btBroadphaseProxy absproxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher arg3) {
    BulletPINVOKE.btDbvtBroadphase_setAabbForceUpdate(swigCPtr, btBroadphaseProxy.getCPtr(absproxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btDispatcher.getCPtr(arg3));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void benchmark(btBroadphaseInterface arg0) {
    BulletPINVOKE.btDbvtBroadphase_benchmark(btBroadphaseInterface.getCPtr(arg0));
  }

  public static readonly int DYNAMIC_SET = BulletPINVOKE.btDbvtBroadphase_DYNAMIC_SET_get();
  public static readonly int FIXED_SET = BulletPINVOKE.btDbvtBroadphase_FIXED_SET_get();
  public static readonly int STAGECOUNT = BulletPINVOKE.btDbvtBroadphase_STAGECOUNT_get();

}

}
