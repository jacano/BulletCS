//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btTypedConstraint : btTypedObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btTypedConstraint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btTypedConstraint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btTypedConstraint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btTypedConstraint() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btTypedConstraint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class btConstraintInfo1 : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal btConstraintInfo1(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btConstraintInfo1 obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~btConstraintInfo1() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btTypedConstraint_btConstraintInfo1(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public int m_numConstraintRows {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo1_m_numConstraintRows_set(swigCPtr, value);
      } 
      get {
        int ret = BulletPINVOKE.btTypedConstraint_btConstraintInfo1_m_numConstraintRows_get(swigCPtr);
        return ret;
      } 
    }
  
    public int nub {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo1_nub_set(swigCPtr, value);
      } 
      get {
        int ret = BulletPINVOKE.btTypedConstraint_btConstraintInfo1_nub_get(swigCPtr);
        return ret;
      } 
    }
  
    public btConstraintInfo1() : this(BulletPINVOKE.new_btTypedConstraint_btConstraintInfo1(), true) {
    }
  
  }

  public static btRigidBody getFixedBody() {
    btRigidBody ret = new btRigidBody(BulletPINVOKE.btTypedConstraint_getFixedBody(), false);
    return ret;
  }

  public class btConstraintInfo2 : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal btConstraintInfo2(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btConstraintInfo2 obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~btConstraintInfo2() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            BulletPINVOKE.delete_btTypedConstraint_btConstraintInfo2(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public float fps {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_fps_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_fps_get(swigCPtr);
        return ret;
      } 
    }
  
    public float erp {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_erp_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_erp_get(swigCPtr);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float m_J1linearAxis {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J1linearAxis_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J1linearAxis_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float m_J1angularAxis {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J1angularAxis_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J1angularAxis_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float m_J2linearAxis {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J2linearAxis_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J2linearAxis_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float m_J2angularAxis {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J2angularAxis_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_J2angularAxis_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public int rowskip {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_rowskip_set(swigCPtr, value);
      } 
      get {
        int ret = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_rowskip_get(swigCPtr);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float m_constraintError {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_constraintError_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_constraintError_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float cfm {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_cfm_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_cfm_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float m_lowerLimit {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_lowerLimit_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_lowerLimit_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_float m_upperLimit {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_upperLimit_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_upperLimit_get(swigCPtr);
        SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_int findex {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_findex_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_findex_get(swigCPtr);
        SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
        return ret;
      } 
    }
  
    public int m_numIterations {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_numIterations_set(swigCPtr, value);
      } 
      get {
        int ret = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_numIterations_get(swigCPtr);
        return ret;
      } 
    }
  
    public float m_damping {
      set {
        BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_damping_set(swigCPtr, value);
      } 
      get {
        float ret = BulletPINVOKE.btTypedConstraint_btConstraintInfo2_m_damping_get(swigCPtr);
        return ret;
      } 
    }
  
    public btConstraintInfo2() : this(BulletPINVOKE.new_btTypedConstraint_btConstraintInfo2(), true) {
    }
  
  }

  public int getOverrideNumSolverIterations() {
    int ret = BulletPINVOKE.btTypedConstraint_getOverrideNumSolverIterations(swigCPtr);
    return ret;
  }

  public void setOverrideNumSolverIterations(int overideNumIterations) {
    BulletPINVOKE.btTypedConstraint_setOverrideNumSolverIterations(swigCPtr, overideNumIterations);
  }

  public virtual void buildJacobian() {
    BulletPINVOKE.btTypedConstraint_buildJacobian(swigCPtr);
  }

  public virtual void setupSolverConstraint(SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t ca, int solverBodyA, int solverBodyB, float timeStep) {
    BulletPINVOKE.btTypedConstraint_setupSolverConstraint(swigCPtr, SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t.getCPtr(ca), solverBodyA, solverBodyB, timeStep);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void getInfo1(btTypedConstraint.btConstraintInfo1 info) {
    BulletPINVOKE.btTypedConstraint_getInfo1(swigCPtr, btTypedConstraint.btConstraintInfo1.getCPtr(info));
  }

  public virtual void getInfo2(btTypedConstraint.btConstraintInfo2 info) {
    BulletPINVOKE.btTypedConstraint_getInfo2(swigCPtr, btTypedConstraint.btConstraintInfo2.getCPtr(info));
  }

  public void internalSetAppliedImpulse(float appliedImpulse) {
    BulletPINVOKE.btTypedConstraint_internalSetAppliedImpulse(swigCPtr, appliedImpulse);
  }

  public float internalGetAppliedImpulse() {
    float ret = BulletPINVOKE.btTypedConstraint_internalGetAppliedImpulse(swigCPtr);
    return ret;
  }

  public float getBreakingImpulseThreshold() {
    float ret = BulletPINVOKE.btTypedConstraint_getBreakingImpulseThreshold(swigCPtr);
    return ret;
  }

  public void setBreakingImpulseThreshold(float threshold) {
    BulletPINVOKE.btTypedConstraint_setBreakingImpulseThreshold(swigCPtr, threshold);
  }

  public bool isEnabled() {
    bool ret = BulletPINVOKE.btTypedConstraint_isEnabled(swigCPtr);
    return ret;
  }

  public void setEnabled(bool enabled) {
    BulletPINVOKE.btTypedConstraint_setEnabled(swigCPtr, enabled);
  }

  public virtual void solveConstraintObsolete(btSolverBody arg0, btSolverBody arg1, float arg2) {
    BulletPINVOKE.btTypedConstraint_solveConstraintObsolete(swigCPtr, btSolverBody.getCPtr(arg0), btSolverBody.getCPtr(arg1), arg2);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public btRigidBody getRigidBodyA() {
    btRigidBody ret = new btRigidBody(BulletPINVOKE.btTypedConstraint_getRigidBodyA__SWIG_0(swigCPtr), false);
    return ret;
  }

  public btRigidBody getRigidBodyB() {
    btRigidBody ret = new btRigidBody(BulletPINVOKE.btTypedConstraint_getRigidBodyB__SWIG_0(swigCPtr), false);
    return ret;
  }

  public int getUserConstraintType() {
    int ret = BulletPINVOKE.btTypedConstraint_getUserConstraintType(swigCPtr);
    return ret;
  }

  public void setUserConstraintType(int userConstraintType) {
    BulletPINVOKE.btTypedConstraint_setUserConstraintType(swigCPtr, userConstraintType);
  }

  public void setUserConstraintId(int uid) {
    BulletPINVOKE.btTypedConstraint_setUserConstraintId(swigCPtr, uid);
  }

  public int getUserConstraintId() {
    int ret = BulletPINVOKE.btTypedConstraint_getUserConstraintId(swigCPtr);
    return ret;
  }

  public void setUserConstraintPtr(SWIGTYPE_p_void ptr) {
    BulletPINVOKE.btTypedConstraint_setUserConstraintPtr(swigCPtr, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public SWIGTYPE_p_void getUserConstraintPtr() {
    global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_getUserConstraintPtr(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public void setJointFeedback(btJointFeedback jointFeedback) {
    BulletPINVOKE.btTypedConstraint_setJointFeedback(swigCPtr, btJointFeedback.getCPtr(jointFeedback));
  }

  public btJointFeedback getJointFeedback() {
    global::System.IntPtr cPtr = BulletPINVOKE.btTypedConstraint_getJointFeedback__SWIG_0(swigCPtr);
    btJointFeedback ret = (cPtr == global::System.IntPtr.Zero) ? null : new btJointFeedback(cPtr, false);
    return ret;
  }

  public int getUid() {
    int ret = BulletPINVOKE.btTypedConstraint_getUid(swigCPtr);
    return ret;
  }

  public bool needsFeedback() {
    bool ret = BulletPINVOKE.btTypedConstraint_needsFeedback(swigCPtr);
    return ret;
  }

  public void enableFeedback(bool needsFeedback) {
    BulletPINVOKE.btTypedConstraint_enableFeedback(swigCPtr, needsFeedback);
  }

  public float getAppliedImpulse() {
    float ret = BulletPINVOKE.btTypedConstraint_getAppliedImpulse(swigCPtr);
    return ret;
  }

  public btTypedConstraintType getConstraintType() {
    btTypedConstraintType ret = (btTypedConstraintType)BulletPINVOKE.btTypedConstraint_getConstraintType(swigCPtr);
    return ret;
  }

  public void setDbgDrawSize(float dbgDrawSize) {
    BulletPINVOKE.btTypedConstraint_setDbgDrawSize(swigCPtr, dbgDrawSize);
  }

  public float getDbgDrawSize() {
    float ret = BulletPINVOKE.btTypedConstraint_getDbgDrawSize(swigCPtr);
    return ret;
  }

  public virtual void setParam(int num, float value, int axis) {
    BulletPINVOKE.btTypedConstraint_setParam__SWIG_0(swigCPtr, num, value, axis);
  }

  public virtual void setParam(int num, float value) {
    BulletPINVOKE.btTypedConstraint_setParam__SWIG_1(swigCPtr, num, value);
  }

  public virtual float getParam(int num, int axis) {
    float ret = BulletPINVOKE.btTypedConstraint_getParam__SWIG_0(swigCPtr, num, axis);
    return ret;
  }

  public virtual float getParam(int num) {
    float ret = BulletPINVOKE.btTypedConstraint_getParam__SWIG_1(swigCPtr, num);
    return ret;
  }

  public virtual int calculateSerializeBufferSize() {
    int ret = BulletPINVOKE.btTypedConstraint_calculateSerializeBufferSize(swigCPtr);
    return ret;
  }

  public virtual string serialize(SWIGTYPE_p_void dataBuffer, btSerializer serializer) {
    string ret = BulletPINVOKE.btTypedConstraint_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(dataBuffer), btSerializer.getCPtr(serializer));
    return ret;
  }

}

}
