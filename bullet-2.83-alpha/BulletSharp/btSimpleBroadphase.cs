//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace BulletSharp {

public class btSimpleBroadphase : btBroadphaseInterface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal btSimpleBroadphase(global::System.IntPtr cPtr, bool cMemoryOwn) : base(BulletPINVOKE.btSimpleBroadphase_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btSimpleBroadphase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btSimpleBroadphase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BulletPINVOKE.delete_btSimpleBroadphase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public btSimpleBroadphase(int maxProxies, btOverlappingPairCache overlappingPairCache) : this(BulletPINVOKE.new_btSimpleBroadphase__SWIG_0(maxProxies, btOverlappingPairCache.getCPtr(overlappingPairCache)), true) {
  }

  public btSimpleBroadphase(int maxProxies) : this(BulletPINVOKE.new_btSimpleBroadphase__SWIG_1(maxProxies), true) {
  }

  public btSimpleBroadphase() : this(BulletPINVOKE.new_btSimpleBroadphase__SWIG_2(), true) {
  }

  public static bool aabbOverlap(btSimpleBroadphaseProxy proxy0, btSimpleBroadphaseProxy proxy1) {
    bool ret = BulletPINVOKE.btSimpleBroadphase_aabbOverlap(btSimpleBroadphaseProxy.getCPtr(proxy0), btSimpleBroadphaseProxy.getCPtr(proxy1));
    return ret;
  }

  public override btBroadphaseProxy createProxy(btVector3 aabbMin, btVector3 aabbMax, int shapeType, SWIGTYPE_p_void userPtr, short collisionFilterGroup, short collisionFilterMask, btDispatcher dispatcher, SWIGTYPE_p_void multiSapProxy) {
    global::System.IntPtr cPtr = BulletPINVOKE.btSimpleBroadphase_createProxy(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), shapeType, SWIGTYPE_p_void.getCPtr(userPtr), collisionFilterGroup, collisionFilterMask, btDispatcher.getCPtr(dispatcher), SWIGTYPE_p_void.getCPtr(multiSapProxy));
    btBroadphaseProxy ret = (cPtr == global::System.IntPtr.Zero) ? null : new btBroadphaseProxy(cPtr, false);
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void calculateOverlappingPairs(btDispatcher dispatcher) {
    BulletPINVOKE.btSimpleBroadphase_calculateOverlappingPairs(swigCPtr, btDispatcher.getCPtr(dispatcher));
  }

  public override void destroyProxy(btBroadphaseProxy proxy, btDispatcher dispatcher) {
    BulletPINVOKE.btSimpleBroadphase_destroyProxy(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btDispatcher.getCPtr(dispatcher));
  }

  public override void setAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax, btDispatcher dispatcher) {
    BulletPINVOKE.btSimpleBroadphase_setAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btDispatcher.getCPtr(dispatcher));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void getAabb(btBroadphaseProxy proxy, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btSimpleBroadphase_getAabb(swigCPtr, btBroadphaseProxy.getCPtr(proxy), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btSimpleBroadphase_rayTest__SWIG_0(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback, btVector3 aabbMin) {
    BulletPINVOKE.btSimpleBroadphase_rayTest__SWIG_1(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback), btVector3.getCPtr(aabbMin));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void rayTest(btVector3 rayFrom, btVector3 rayTo, btBroadphaseRayCallback rayCallback) {
    BulletPINVOKE.btSimpleBroadphase_rayTest__SWIG_2(swigCPtr, btVector3.getCPtr(rayFrom), btVector3.getCPtr(rayTo), btBroadphaseRayCallback.getCPtr(rayCallback));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void aabbTest(btVector3 aabbMin, btVector3 aabbMax, btBroadphaseAabbCallback callback) {
    BulletPINVOKE.btSimpleBroadphase_aabbTest(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax), btBroadphaseAabbCallback.getCPtr(callback));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override btOverlappingPairCache getOverlappingPairCache() {
    global::System.IntPtr cPtr = BulletPINVOKE.btSimpleBroadphase_getOverlappingPairCache__SWIG_0(swigCPtr);
    btOverlappingPairCache ret = (cPtr == global::System.IntPtr.Zero) ? null : new btOverlappingPairCache(cPtr, false);
    return ret;
  }

  public bool testAabbOverlap(btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) {
    bool ret = BulletPINVOKE.btSimpleBroadphase_testAabbOverlap(swigCPtr, btBroadphaseProxy.getCPtr(proxy0), btBroadphaseProxy.getCPtr(proxy1));
    return ret;
  }

  public override void getBroadphaseAabb(btVector3 aabbMin, btVector3 aabbMax) {
    BulletPINVOKE.btSimpleBroadphase_getBroadphaseAabb(swigCPtr, btVector3.getCPtr(aabbMin), btVector3.getCPtr(aabbMax));
    if (BulletPINVOKE.SWIGPendingException.Pending) throw BulletPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void printStats() {
    BulletPINVOKE.btSimpleBroadphase_printStats(swigCPtr);
  }

}

}
